{
  // Attributes to generate the parser definition
  parserClass="glsl.language.parser.GlslParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Glsl"
  psiImplClassSuffix="Impl"
  psiPackage="glsl.language.psi"  // location to generate
  psiImplPackage="glsl.language.psi.impl"

  elementTypeHolderClass="glsl.language.psi.GlslTypes"  // gets auto generated
  elementTypeClass="glsl.language.psi.GlslElementType"  // class to represent internal node
  tokenTypeClass="glsl.language.psi.GlslTokenType"  // represent terminal node

  // Utility
  psiImplUtilClass="glsl.language.psi.impl.GlslPsiImplUtil"
}

glslFile ::= segment*
//glslFile ::= header segment*

//private header ::= '#version' 440
private segment ::= declaration | COMMENT | CRLF

declaration ::= struct_definition | variable_definition | function_definition

//private rule_recover ::= !(SEMICOLON)

// Terminal token
storage_qualifier ::= const | in | out | attribute | uniform | varying | buffer | shared
identifier_type ::= void | int | uint | float | double | bool | var_name

// Definition
struct_definition ::= struct var_name C_BRACKET_L variable_definition* C_BRACKET_R SEMICOLON
variable_definition ::= storage_qualifier? identifier_type var_name (OPERATOR_ASSIGNMENT variable_val)? SEMICOLON

// Function definition
function_definition ::= identifier_type var_name PAREN_L function_args? PAREN_R (C_BRACKET_L C_BRACKET_R)? SEMICOLON
function_args ::= identifier_type var_name (COMMA function_args)?


// Swizzle built in type
//swizzle_access ::= IDENTIFIER DOT swizzle_prop? swizzle_prop? swizzle_prop? swizzle_prop?
//swizzle_prop ::= (swizzle_property_rgba | swizzle_property_stpq | swizzle_property_xyzw)
//private swizzle_property_xyzw ::= x | y | z | w
//private swizzle_property_rgba ::= r | g | b | a
//private swizzle_property_stpq ::= s | t | p | q

var_name ::= IDENTIFIER {
  mixin="glsl.language.psi.impl.GlslNamedVariableImpl"
  implements="glsl.language.psi.GlslNamedElement"
  methods=[getName setName getNameIdentifier]
}

variable_val ::= IDENTIFIER | FLOAT_CONSTANT | INTEGER_CONSTANT

