{
  // Attributes to generate the parser definition
  parserClass="glsl.language.parser.GlslParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Glsl"
  psiImplClassSuffix="Impl"
  psiPackage="glsl.language.psi"  // location to generate
  psiImplPackage="glsl.language.psi.impl"

  elementTypeHolderClass="glsl.language.psi.GlslTypes"  // gets auto generated
  elementTypeClass="glsl.language.psi.GlslElementType"  // class to represent internal node
  tokenTypeClass="glsl.language.psi.GlslTokenType"  // represent terminal node

  // Utility
  psiImplUtilClass="glsl.language.psi.impl.GlslPsiImplUtil"
}

glslFile ::= segment*
//glslFile ::= header segment*

//private header ::= '#version' 440
private segment ::= declaration | expression | COMMENT | CRLF

declaration ::= struct_definition | variable_definition | function_definition
expression ::= expression_assign
//private rule_recover ::= !(SEMICOLON)

// Terminal token
storage_qualifier ::= const | in | out | attribute | uniform | varying | buffer | shared
identifier_type ::= void | int | uint | float | double | bool | var_name
assign_op ::= EQUAL | MUL_ASSIGN | DIV_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | MOD_ASSIGN | LEFT_ASSIGN | RIGHT_ASSIGN | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN
arithmetic_op ::= PLUS | DASH | STAR | SLASH | PERCENT | LEFT_OP | RIGHT_OP | AMPERSAND | CARET | VERTICAL_BAR
relational_op ::= EQ_OP | ANGLE_L | ANGLE_R | GE_OP | LE_OP | NE_OP | AND_OP | OR_OP | XOR_OP

// Definition
struct_definition ::= struct var_name_origin_struct C_BRACKET_L variable_definition* C_BRACKET_R SEMICOLON
variable_definition ::= storage_qualifier? identifier_type var_name_origin_variable (EQUAL init_val)? SEMICOLON

// Function definition
function_definition ::= identifier_type var_name_origin_func PAREN_L function_args? PAREN_R (C_BRACKET_L C_BRACKET_R)? SEMICOLON
function_args ::= identifier_type var_name_origin_variable (COMMA function_args)?

// expression
expression_assign ::= expression_no_assign (assign_op expression_assign)?
expression_no_assign ::= expression_unit ((arithmetic_op | relational_op) expression_no_assign)?

// Swizzle built in type
//swizzle_access ::= IDENTIFIER DOT swizzle_prop? swizzle_prop? swizzle_prop? swizzle_prop?
//swizzle_prop ::= (swizzle_property_rgba | swizzle_property_stpq | swizzle_property_xyzw)
//private swizzle_property_xyzw ::= x | y | z | w
//private swizzle_property_rgba ::= r | g | b | a
//private swizzle_property_stpq ::= s | t | p | q

// variable with special purpose or reference ------------------------
var_name_origin_func ::= IDENTIFIER {
  mixin="glsl.language.psi.impl.GlslNamedFunctionDeclareImpl"
  implements="glsl.language.psi.GlslNamedElement"
  methods=[getName setName getNameIdentifier]
}

var_name_origin_struct ::= IDENTIFIER {
    mixin="glsl.language.psi.impl.GlslNamedStructDeclareImpl"
    implements="glsl.language.psi.GlslNamedElement"
    methods=[getName setName getNameIdentifier]
}

var_name_origin_variable ::= IDENTIFIER {
    mixin="glsl.language.psi.impl.GlslNamedVariableDeclareImpl"
    implements="glsl.language.psi.GlslNamedElement"
    methods=[getName setName getNameIdentifier]
}

var_name ::= IDENTIFIER {
  mixin="glsl.language.psi.impl.GlslNamedVariableImpl"
  implements="glsl.language.psi.GlslNamedElement"
  methods=[getName setName getNameIdentifier]
}

expression_unit ::= FLOAT_CONSTANT | INTEGER_CONSTANT
init_val ::= IDENTIFIER | FLOAT_CONSTANT | INTEGER_CONSTANT

