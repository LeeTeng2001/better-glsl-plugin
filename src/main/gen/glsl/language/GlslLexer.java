/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package glsl.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import glsl.language.psi.GlslTypes;  // contain token we'll use


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>glsl.flex</tt>
 */
class GlslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17552 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\2\0\1\56\1\57\1\60\13\24\1\61\1\47"+
    "\1\62\1\63\1\56\1\64\1\30\1\65\1\66\3\24\3\0\1\67\12\24\1\70\1\0\1\71\1\30"+
    "\1\56\1\72\3\24\1\55\1\73\1\23\2\24\1\70\1\74\1\75\1\76\2\30\3\24\1\77\1\24"+
    "\1\51\6\30\2\24\1\33\1\100\2\30\1\101\5\0\1\102\6\24\1\103\2\0\1\104\1\24"+
    "\1\105\1\56\1\43\1\24\1\106\1\107\1\110\2\24\1\111\1\112\1\113\1\114\1\115"+
    "\1\65\1\116\1\105\1\56\1\117\1\120\1\121\1\122\1\110\2\24\1\111\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\56\1\132\1\30\1\121\1\40\1\37\2\24\1\111"+
    "\1\133\1\113\1\47\1\134\1\135\1\30\1\105\1\56\1\44\1\136\1\121\1\107\1\110"+
    "\2\24\1\111\1\133\1\113\1\114\1\126\1\137\1\116\1\105\1\56\1\44\1\30\1\140"+
    "\1\141\1\142\1\143\1\120\1\141\1\24\1\144\1\145\1\146\1\147\1\30\1\131\1\56"+
    "\1\30\1\44\1\150\1\33\1\111\2\24\1\111\1\24\1\151\1\152\1\146\1\153\1\51\1"+
    "\105\1\56\2\30\1\106\1\33\1\111\2\24\1\111\1\154\1\113\1\152\1\146\1\153\1"+
    "\35\1\105\1\56\1\155\1\30\1\150\1\33\1\111\4\24\1\156\1\152\1\157\1\160\1"+
    "\45\1\105\1\56\1\30\1\42\1\161\1\24\1\25\1\42\2\24\1\37\1\162\1\25\1\163\1"+
    "\164\1\0\1\131\1\56\1\165\1\30\1\43\5\24\1\166\1\167\1\170\1\171\1\56\1\172"+
    "\4\30\1\173\1\174\1\175\1\43\1\176\1\177\1\166\1\200\1\201\1\52\1\56\1\202"+
    "\4\30\1\135\2\30\1\203\1\56\1\172\1\204\1\205\1\24\1\43\3\24\1\31\1\46\1\0"+
    "\1\152\1\206\1\0\1\46\3\0\1\207\1\210\7\30\5\24\1\55\1\0\1\211\1\56\1\172"+
    "\1\70\1\212\1\213\1\214\1\215\1\24\1\216\1\217\1\56\1\220\4\24\1\40\1\22\5"+
    "\24\1\221\51\24\1\142\1\25\1\142\5\24\1\142\4\24\1\142\1\25\1\142\1\24\1\25"+
    "\7\24\1\142\10\24\1\222\4\30\2\24\2\30\12\24\2\100\1\43\114\24\1\107\2\24"+
    "\1\43\2\24\1\51\11\24\1\141\1\24\1\135\1\24\1\33\1\223\1\30\2\24\1\223\1\30"+
    "\2\24\1\224\1\30\1\24\1\33\1\225\1\30\6\24\1\226\3\0\1\227\1\230\1\56\1\172"+
    "\3\30\1\231\1\56\1\172\13\24\1\30\1\232\4\24\1\233\10\24\1\100\1\30\3\24\1"+
    "\25\1\0\1\2\1\0\1\2\1\131\1\56\3\24\1\100\1\31\1\30\5\24\1\117\3\24\1\27\1"+
    "\56\1\172\4\30\2\24\1\170\1\2\6\24\1\206\1\171\3\0\1\114\1\56\1\172\1\56\1"+
    "\172\1\45\1\30\1\0\1\52\10\30\1\234\5\24\1\226\1\0\1\234\1\117\1\56\1\172"+
    "\1\30\1\235\1\2\1\30\1\236\3\24\1\104\1\214\1\56\1\72\4\24\1\70\1\0\1\2\1"+
    "\30\4\24\1\226\2\0\1\30\1\56\1\237\1\56\1\72\3\24\1\100\1\24\1\135\10\30\1"+
    "\240\2\0\1\241\1\242\1\203\30\24\7\0\1\243\42\24\2\100\4\24\2\100\1\24\1\244"+
    "\3\24\1\100\6\24\1\33\1\201\1\245\1\31\1\246\1\117\1\24\1\31\1\245\1\31\1"+
    "\30\1\235\3\30\1\247\1\30\1\45\1\135\1\30\1\250\1\30\1\152\1\0\1\44\1\45\2"+
    "\30\1\24\1\31\4\24\2\30\1\0\1\207\1\251\1\0\1\252\1\30\1\253\1\42\1\162\1"+
    "\254\1\32\1\255\1\24\1\256\1\257\1\260\2\30\5\24\1\135\116\30\5\24\1\25\5"+
    "\24\1\25\20\24\1\31\1\261\1\262\1\30\4\24\1\40\1\22\7\24\1\45\1\30\1\65\2"+
    "\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1\257\3\30\1\43\1\216\1\254\1\31\1"+
    "\43\11\24\1\25\1\263\1\43\12\24\1\221\1\257\4\24\1\25\1\43\12\24\1\25\2\30"+
    "\3\24\1\51\6\30\170\24\1\100\11\30\75\24\1\51\2\30\21\24\1\31\10\30\5\24\1"+
    "\100\41\24\1\31\2\24\1\56\1\264\2\30\5\24\1\170\1\101\1\265\3\24\1\70\12\24"+
    "\1\203\3\30\1\45\1\24\1\42\14\24\1\110\3\24\1\25\1\24\7\30\1\45\1\24\1\266"+
    "\1\267\2\24\1\55\2\30\1\135\6\24\1\117\1\30\1\270\5\24\1\226\1\0\1\52\1\30"+
    "\1\56\1\172\2\0\1\270\1\271\1\56\1\72\2\24\1\70\1\52\2\24\1\170\1\0\1\2\1"+
    "\30\3\24\1\31\1\102\5\24\1\55\1\0\1\252\1\45\1\56\1\172\1\272\1\24\1\56\1"+
    "\273\5\24\1\104\1\171\1\30\1\267\1\274\1\56\1\172\2\24\1\25\1\275\6\24\1\213"+
    "\1\276\1\233\2\30\1\277\1\24\1\55\1\300\1\30\3\301\1\30\2\25\5\24\1\221\1"+
    "\100\1\30\16\24\1\55\1\302\1\56\1\172\64\24\1\117\1\30\2\24\1\25\1\303\5\24"+
    "\1\117\40\30\55\24\1\100\15\24\1\27\4\30\1\25\1\30\1\303\1\304\1\24\1\111"+
    "\1\25\1\201\1\305\15\24\1\27\3\30\1\303\54\24\1\100\2\30\10\24\1\42\6\24\5"+
    "\30\1\24\1\31\2\0\2\30\2\0\1\120\2\30\1\257\3\30\1\44\1\33\20\24\1\306\1\250"+
    "\1\30\1\56\1\172\1\43\2\24\1\122\1\43\2\24\1\51\1\307\12\24\1\25\3\42\1\310"+
    "\1\311\2\30\1\312\1\24\1\154\2\24\1\25\2\24\1\313\1\24\1\100\1\24\1\100\4"+
    "\30\17\24\1\51\10\30\6\24\1\31\20\30\1\314\20\30\3\24\1\31\6\24\1\135\1\30"+
    "\1\252\3\30\4\24\1\30\1\257\3\24\1\51\4\24\1\70\1\315\3\24\1\100\4\24\1\117"+
    "\1\24\1\254\5\30\23\24\1\100\1\56\1\172\4\24\1\117\4\24\1\117\5\24\1\30\6"+
    "\24\1\117\23\30\46\24\1\25\1\30\2\24\1\100\1\30\1\24\23\30\1\100\1\111\4\24"+
    "\1\40\1\316\2\24\1\100\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24\1\317\1\30"+
    "\2\24\1\100\1\30\3\24\1\27\10\30\7\24\1\307\10\30\1\320\1\101\1\154\1\43\2"+
    "\24\1\117\1\125\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1\321\3\30\6"+
    "\24\1\100\1\30\2\24\1\100\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11\24\1\135"+
    "\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\236\6\24\1\0\1\171\3\30\1\131\1\56"+
    "\1\30\1\65\1\236\5\24\1\0\1\322\2\30\3\24\1\135\1\56\1\172\1\236\3\24\1\170"+
    "\1\0\1\323\1\56\2\30\4\24\1\324\1\30\1\236\5\24\1\55\1\0\1\325\1\326\1\56"+
    "\1\327\4\30\2\24\1\37\2\24\1\226\1\0\1\210\10\30\1\25\1\255\1\24\1\40\1\24"+
    "\1\135\5\24\1\170\1\0\1\315\1\56\1\172\1\150\1\107\1\110\2\24\1\111\1\133"+
    "\1\113\1\114\1\126\1\147\1\257\1\330\2\207\21\30\6\24\1\206\1\0\1\211\1\51"+
    "\1\56\1\172\4\30\6\24\2\0\1\331\1\30\1\56\1\172\24\30\5\24\1\170\1\52\1\0"+
    "\1\252\2\30\1\274\4\30\6\24\2\0\1\332\1\30\1\56\1\172\4\30\5\24\1\55\1\0\1"+
    "\30\1\56\1\172\6\30\3\24\1\333\1\0\1\2\1\56\1\172\54\30\10\24\1\56\1\172\1"+
    "\30\1\45\40\30\1\104\1\236\4\24\1\55\1\334\1\65\1\30\1\104\1\102\4\24\1\246"+
    "\1\216\1\0\1\203\4\30\7\24\1\135\40\30\1\24\1\111\3\24\1\170\1\171\1\0\1\135"+
    "\1\30\1\56\1\172\2\30\1\42\3\24\1\335\2\0\1\46\1\171\11\30\1\25\1\37\4\24"+
    "\1\336\1\337\1\217\1\30\1\0\1\203\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\117\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\135\3\24\1\25\1\56"+
    "\1\172\14\30\3\24\1\100\1\207\1\30\6\24\1\171\1\30\1\117\1\30\1\56\1\172\1"+
    "\303\2\24\1\257\2\24\56\30\10\24\1\31\1\30\1\104\4\0\1\171\1\30\1\65\1\236"+
    "\1\24\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61"+
    "\24\1\117\40\30\15\24\1\51\1\24\1\31\1\24\1\135\1\24\1\340\1\2\127\30\1\341"+
    "\1\342\2\0\1\343\1\2\3\30\1\344\22\30\1\326\67\30\12\24\1\33\10\24\1\33\1"+
    "\345\1\346\1\24\1\347\1\154\7\24\1\40\1\350\2\33\3\24\1\351\1\201\1\42\1\111"+
    "\51\24\1\100\3\24\1\111\2\24\1\221\3\24\1\221\2\24\1\33\3\24\1\33\2\24\1\25"+
    "\3\24\1\25\3\24\1\111\3\24\1\111\2\24\1\221\1\352\6\56\6\0\1\171\1\235\5\0"+
    "\1\207\1\314\1\30\1\353\2\30\1\235\1\46\1\0\52\30\1\171\2\0\1\354\1\355\1"+
    "\315\72\30\30\24\1\31\1\30\1\171\5\30\10\24\1\226\1\315\1\56\1\172\24\30\1"+
    "\154\3\24\1\173\1\43\1\221\1\356\1\253\1\357\1\173\1\244\1\173\2\221\1\130"+
    "\1\24\1\37\1\24\1\117\1\360\1\37\1\24\1\117\50\30\32\24\1\25\5\30\106\24\1"+
    "\31\1\30\33\24\1\100\120\24\1\27\1\30\146\24\1\135\3\30\3\24\1\100\74\30\1"+
    "\127\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1928 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\4\1\2\1\1\1\5\1\3\6\20\4\0\1\4\1\107\1\0\1\74\1\17\1\101\1\104\1"+
    "\0\1\71\1\72\1\76\1\77\1\73\1\100\1\12\1\6\1\7\1\40\1\44\1\41\1\30\5\7\1\64"+
    "\1\63\1\102\1\75\1\103\2\0\1\46\1\50\1\43\1\42\1\17\1\15\2\17\1\57\2\17\1"+
    "\16\1\51\4\17\1\45\1\52\1\17\1\11\5\17\1\67\1\0\1\70\1\105\1\17\1\0\1\32\1"+
    "\22\1\25\1\27\1\24\1\14\1\56\1\53\1\26\1\17\1\61\1\13\1\31\1\60\1\54\1\36"+
    "\1\17\1\37\1\35\1\33\1\10\1\23\1\55\1\34\1\47\1\62\1\65\1\106\1\66\1\0\6\20"+
    "\1\21\2\20\2\0\4\17\4\0\1\17\2\0\1\20\7\0\1\17\4\0\1\17\5\0\17\17\1\0\2\17"+
    "\4\0\4\17\16\0\5\17\7\0\1\17\1\0\1\17\1\0\5\17\1\0\2\17\2\0\4\17\1\0\1\17"+
    "\6\0\1\17\1\0\3\17\1\0\1\17\1\0\4\17\1\0\13\17\1\0\3\17\1\0\5\20\2\0\6\17"+
    "\1\0\7\17\1\0\1\17\15\0\1\17\1\0\15\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0\1\20"+
    "\3\17\5\0\6\20\5\0\1\17\4\0\3\20\1\0\1\20\3\0\3\17\5\20\12\7\4\0\2\17\1\20"+
    "\13\17\1\0\1\17\7\20\2\17\2\20\1\0\4\20\2\17\2\7\3\17\2\0\1\17\7\0\1\20\1"+
    "\17\1\20\6\17\3\20\2\0\11\17\3\20\1\17\6\0\2\7\6\17\4\20\2\17\2\0\2\20\1\17"+
    "\11\20\1\17\3\20\1\17\5\20\2\0\1\17\3\20\4\0\6\17\6\0\10\20\6\17\3\20\1\17"+
    "\2\20\1\17\7\20\2\17\2\20\2\0\2\7\1\17\3\20\1\0\10\17\2\0\2\17\2\0\6\17\1"+
    "\0\7\17\1\0\1\17\3\0\4\17\2\0\1\20\1\17\7\20\2\0\2\20\2\0\3\20\1\17\5\0\2"+
    "\17\1\0\5\17\7\0\2\17\4\0\3\20\1\0\6\17\4\0\2\17\1\0\2\17\1\0\2\17\1\0\2\17"+
    "\2\0\1\20\1\0\5\20\4\0\2\20\2\0\3\20\3\0\1\20\7\0\4\17\1\0\1\17\7\0\2\7\2"+
    "\20\3\17\1\20\2\0\1\17\1\0\2\17\1\0\3\17\2\20\1\0\3\20\2\0\1\17\10\0\1\17"+
    "\6\20\6\0\2\20\2\0\1\20\1\17\1\0\6\17\3\0\3\17\1\0\4\17\3\0\2\17\1\0\1\17"+
    "\1\0\4\17\4\0\5\20\3\0\3\20\1\0\4\20\2\0\1\17\6\0\5\20\1\0\5\17\3\0\1\17\7"+
    "\20\1\0\2\20\5\0\2\20\1\0\4\17\1\0\3\17\1\0\2\17\5\0\3\17\2\20\1\17\3\20\1"+
    "\0\4\20\1\17\5\0\3\17\1\20\2\0\2\20\1\0\7\17\1\0\1\17\4\0\1\20\4\0\6\20\1"+
    "\0\1\20\3\0\2\20\4\0\1\17\1\20\2\17\7\20\4\0\10\17\10\20\1\0\2\7\7\0\2\17"+
    "\1\0\1\17\2\0\2\17\1\0\1\17\2\0\1\17\6\0\4\17\1\0\3\17\1\0\1\17\1\0\1\17\2"+
    "\0\2\17\1\0\3\17\2\20\1\0\2\20\1\17\2\0\5\17\1\0\1\17\1\0\2\7\2\0\4\17\2\20"+
    "\13\0\1\20\1\0\1\20\1\0\1\20\4\0\2\20\5\17\10\20\11\0\1\20\1\0\7\20\1\17\2"+
    "\20\4\17\3\20\1\17\3\20\2\17\7\20\3\17\4\20\5\17\14\20\1\17\1\20\2\7\4\20"+
    "\2\0\3\17\1\0\7\17\2\0\3\20\2\17\3\20\3\0\2\17\2\20\4\0\1\17\1\0\2\20\4\0"+
    "\4\17\10\20\3\0\1\17\3\0\2\17\1\20\5\0\4\20\1\0\5\17\2\20\2\17\1\20\1\17\5"+
    "\0\5\20\3\17\3\0\10\20\5\17\2\7\3\0\3\17\3\20\1\0\5\20\4\17\1\20\4\17\3\20"+
    "\2\17\3\20\1\0\5\20\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17\2\0\3\17\1\0\6\17"+
    "\2\0\2\17\2\1\5\20\5\0\1\17\4\0\1\20\3\0\4\20\11\0\1\17\4\0\1\17\1\0\5\17"+
    "\2\0\1\17\1\0\4\17\1\0\3\17\2\0\4\17\5\0\5\17\4\0\1\17\4\0\4\17\3\20\2\17"+
    "\5\0\2\20\2\0\3\17\2\7\2\17\4\0\6\20\1\0\3\17\1\20\3\17\1\20\4\17\1\20\4\17"+
    "\2\20\6\17\3\0\1\17\1\0\1\17\2\0\5\17\1\20\2\17\2\7\5\17\1\0\4\17\2\20\4\0"+
    "\1\17\3\20\2\17\1\20\5\17\2\20\3\0\3\17\4\0\3\17\2\20\2\0\6\17\1\0\3\20\1"+
    "\0\2\20\5\0\5\17\5\0\1\17\1\20\3\17\1\0\2\17\1\0\7\17\2\0\1\20\6\0\2\17\2"+
    "\0\3\17\3\0\2\17\3\0\2\17\2\0\3\20\4\0\3\17\1\0\2\17\1\0\1\17\5\0\1\20\2\0"+
    "\3\20\5\0\1\17\3\0\1\17\2\0\4\17\1\0\2\17\2\0\1\17\3\20\1\0\2\20\1\0\5\17"+
    "\2\20\1\0\3\20\2\0\1\20\2\0\5\20\1\0\2\7\3\17\1\20\2\0\1\17\1\0\1\20\4\17"+
    "\5\0\3\20\3\0\2\7\1\17\1\0\1\17\3\0\2\17\2\20\2\0\6\20\2\17\1\0\1\17\1\20"+
    "\3\0\1\17\3\0\2\17\3\0\5\20\1\17\4\20\3\0\6\20\1\17\6\20\3\0\1\20\1\0\2\20"+
    "\1\0\1\20\2\17\3\0\2\20\6\0\5\20\3\0\6\20\2\0\3\20\2\0\4\20\4\0\1\17\2\0\2"+
    "\17\2\0\4\17\1\0\4\17\1\0\1\17\1\0\6\17\2\0\5\17\1\0\4\17\1\0\4\17\2\0\2\7"+
    "\4\0\1\20\3\0\1\20\2\0\7\20\1\0\2\20\1\0\2\20\1\0\1\17\1\0\1\17\5\0\1\17\1"+
    "\0\1\17\1\0\3\17\1\0\3\17\1\0\3\17");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\5\1\6\23\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\34\1\3\1\1"+
    "\1\6\22\1\1\35\1\36\1\4\1\0\5\5\1\37"+
    "\22\5\1\40\3\5\1\41\2\5\1\42\26\5\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\24\0\1\40\1\41\2\0\1\42\25\0\6\5"+
    "\1\0\1\37\1\0\7\5\1\65\15\5\1\66\7\5"+
    "\1\67\23\5\1\70\4\5\1\71\1\72\12\0\1\65"+
    "\13\0\1\66\6\0\1\67\21\0\1\70\4\0\1\73"+
    "\14\5\1\74\1\75\1\76\1\77\1\5\1\100\13\5"+
    "\1\101\3\5\1\102\17\5\1\73\13\0\1\74\1\76"+
    "\1\77\1\0\1\100\14\0\1\102\16\0\4\5\1\103"+
    "\1\5\1\104\1\5\1\105\2\5\1\106\3\5\1\107"+
    "\21\5\1\110\1\5\3\0\1\103\1\0\1\104\1\0"+
    "\1\105\2\0\1\106\2\0\1\107\16\0\1\110\1\0"+
    "\2\5\1\111\1\112\1\67\11\5\1\113\1\101\4\5"+
    "\1\114\1\115\1\116\1\5\1\117\1\5\1\0\1\111"+
    "\1\112\1\67\4\0\1\113\2\0\1\114\1\115\1\116"+
    "\1\0\1\117\1\0\1\5\1\120\2\5\2\121\1\5"+
    "\1\121\1\5\1\122\1\123\2\5\1\124\1\120\2\0"+
    "\1\122\1\123\1\0\1\5\1\125\21\5\1\125\1\0"+
    "\7\5\2\124\1\5\1\124\2\5\2\126\1\5\1\126"+
    "\2\5\1\0\2\126\1\5\1\126\21\5\1\0\16\5"+
    "\1\0\5\5\1\124\13\5\1\126\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[631];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\220\0\220\0\u07e0\0\u0828"+
    "\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68"+
    "\0\u0ab0\0\330\0\u0af8\0\u0b40\0\u0b88\0\220\0\u0bd0\0\u0c18"+
    "\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58"+
    "\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098"+
    "\0\u10e0\0\220\0\220\0\u0240\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440"+
    "\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680"+
    "\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u01f8\0\u17e8\0\u1830\0\u1878"+
    "\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8"+
    "\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8"+
    "\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u1fc8\0\220\0\220\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\u2010\0\220\0\u2058\0\220\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\u20a0\0\u20e8\0\u2130\0\u2178"+
    "\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8"+
    "\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8"+
    "\0\220\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u27f0"+
    "\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0\0\u29e8\0\u2a30"+
    "\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70"+
    "\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0"+
    "\0\u2ef8\0\220\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8"+
    "\0\u30f0\0\u3138\0\u01f8\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0"+
    "\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0"+
    "\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720"+
    "\0\u01f8\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u3918"+
    "\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58"+
    "\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98"+
    "\0\u3de0\0\220\0\220\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48"+
    "\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0\0\220\0\u40f8\0\u4140"+
    "\0\u4188\0\u41d0\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380"+
    "\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578\0\u45c0"+
    "\0\220\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8"+
    "\0\u4800\0\u4848\0\u4890\0\u48d8\0\u4920\0\u4968\0\u49b0\0\u49f8"+
    "\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u01f8"+
    "\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u4de8\0\u4e30"+
    "\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u4f98\0\u01f8\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100\0\u5148"+
    "\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340\0\u5388"+
    "\0\u53d0\0\u01f8\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580"+
    "\0\u55c8\0\u5610\0\u5658\0\u56a0\0\u56e8\0\u5730\0\u5778\0\u57c0"+
    "\0\u5808\0\220\0\u5850\0\u5898\0\u58e0\0\u5928\0\u5970\0\u59b8"+
    "\0\u5a00\0\u5a48\0\u5a90\0\u5ad8\0\u5b20\0\220\0\220\0\220"+
    "\0\u5b68\0\220\0\u5bb0\0\u5bf8\0\u5c40\0\u5c88\0\u5cd0\0\u5d18"+
    "\0\u5d60\0\u5da8\0\u5df0\0\u5e38\0\u5e80\0\u5ec8\0\220\0\u5f10"+
    "\0\u5f58\0\u5fa0\0\u5fe8\0\u6030\0\u6078\0\u60c0\0\u6108\0\u6150"+
    "\0\u6198\0\u61e0\0\u6228\0\u6270\0\u62b8\0\u6300\0\u6348\0\u6390"+
    "\0\u63d8\0\u01f8\0\u6420\0\u01f8\0\u6468\0\u01f8\0\u64b0\0\u64f8"+
    "\0\u01f8\0\u6540\0\u6588\0\u65d0\0\u01f8\0\u6618\0\u6660\0\u66a8"+
    "\0\u66f0\0\u6738\0\u6780\0\u67c8\0\u6810\0\u6858\0\u68a0\0\u68e8"+
    "\0\u6930\0\u6978\0\u69c0\0\u6a08\0\u6a50\0\u6a98\0\u01f8\0\u6ae0"+
    "\0\u6b28\0\u6b70\0\u6bb8\0\220\0\u6c00\0\220\0\u6c48\0\220"+
    "\0\u6c90\0\u6cd8\0\220\0\u6d20\0\u6d68\0\220\0\u6db0\0\u6df8"+
    "\0\u6e40\0\u6e88\0\u6ed0\0\u6f18\0\u6f60\0\u6fa8\0\u6ff0\0\u7038"+
    "\0\u7080\0\u70c8\0\u7110\0\u7158\0\220\0\u71a0\0\u71e8\0\u7230"+
    "\0\u01f8\0\u01f8\0\u7278\0\u72c0\0\u7308\0\u7350\0\u7398\0\u73e0"+
    "\0\u7428\0\u7470\0\u74b8\0\u7500\0\u01f8\0\u01f8\0\u7548\0\u7590"+
    "\0\u75d8\0\u7620\0\u01f8\0\u01f8\0\u01f8\0\u7668\0\u01f8\0\u76b0"+
    "\0\u76f8\0\220\0\220\0\u7740\0\u7788\0\u77d0\0\u7818\0\u7860"+
    "\0\220\0\u78a8\0\u78f0\0\220\0\220\0\220\0\u7938\0\220"+
    "\0\u7980\0\u79c8\0\u01f8\0\u7a10\0\u7a58\0\u7aa0\0\u01f8\0\u7ae8"+
    "\0\u7b30\0\u7b78\0\u01f8\0\u01f8\0\u7bc0\0\u7c08\0\u7c50\0\220"+
    "\0\u7c98\0\u7ce0\0\220\0\220\0\u7d28\0\u7d70\0\u01f8\0\u7db8"+
    "\0\u7e00\0\u7e48\0\u7e90\0\u7ed8\0\u7f20\0\u7f68\0\u7fb0\0\u7ff8"+
    "\0\u8040\0\u8088\0\u80d0\0\u8118\0\u8160\0\u81a8\0\u81f0\0\u8238"+
    "\0\220\0\u8280\0\u82c8\0\u8310\0\u8358\0\u83a0\0\u83e8\0\u8430"+
    "\0\u8478\0\u84c0\0\u01f8\0\u8508\0\u8550\0\u8598\0\u85e0\0\u8628"+
    "\0\u8670\0\u86b8\0\u8700\0\u8748\0\u8790\0\u87d8\0\u8820\0\u01f8"+
    "\0\u8868\0\u88b0\0\u88f8\0\u8940\0\u8988\0\u89d0\0\u8a18\0\u8a60"+
    "\0\u8aa8\0\u8af0\0\u8b38\0\u8b80\0\u8bc8\0\u8c10\0\u8c58\0\u8ca0"+
    "\0\u8ce8\0\u8d30\0\u8d78\0\u8dc0\0\u8e08\0\u8e50\0\u8e98\0\u8ee0"+
    "\0\u8f28\0\u8f70\0\u8fb8\0\u9000\0\u9048\0\u9090\0\u90d8\0\u9120"+
    "\0\u9168\0\u91b0\0\u91f8\0\u9240\0\u9288\0\u92d0\0\u9318\0\u9360"+
    "\0\u93a8\0\u93f0\0\u9438\0\u9480\0\u94c8\0\u9510\0\u9558\0\u95a0"+
    "\0\u95e8\0\u9630\0\u9678\0\u96c0\0\u9708\0\u9750\0\u9798";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[631];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\5\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\3\10\1\3\1\4\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\6\1\22\1\23\1\24\1\10\1\25"+
    "\1\26\1\27\2\6\2\10\1\6\6\10\1\30\1\31"+
    "\1\32\1\33\1\10\1\34\2\10\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\3\1\4\1\62\1\4\1\63\1\62"+
    "\1\64\1\3\1\65\1\3\1\66\1\67\1\70\4\3"+
    "\1\4\1\71\1\72\1\73\1\74\1\75\1\76\2\3"+
    "\1\77\1\100\1\3\1\101\1\102\1\103\13\3\1\104"+
    "\1\105\1\106\1\107\1\3\1\110\2\3\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\111\0\5\4\13\0\1\4\74\0"+
    "\1\111\66\0\1\112\21\0\1\6\2\113\1\114\15\0"+
    "\1\6\7\0\2\6\2\0\1\6\52\0\3\10\1\0"+
    "\10\10\1\115\2\10\1\116\4\10\1\117\1\10\1\120"+
    "\22\10\1\121\2\10\34\0\3\10\1\0\50\10\34\0"+
    "\1\122\20\0\1\122\7\0\2\122\2\0\1\122\52\0"+
    "\3\10\1\0\17\10\1\123\21\10\1\124\6\10\34\0"+
    "\3\10\1\0\1\125\7\10\1\126\2\10\1\127\3\10"+
    "\1\130\21\10\1\131\6\10\34\0\1\10\1\132\1\10"+
    "\1\0\10\10\1\115\13\10\1\133\14\10\1\134\6\10"+
    "\34\0\3\10\1\0\11\10\1\135\27\10\1\136\6\10"+
    "\34\0\3\10\1\0\1\137\20\10\1\140\23\10\1\141"+
    "\2\10\34\0\3\10\1\0\1\142\16\10\1\143\21\10"+
    "\1\144\6\10\34\0\3\10\1\0\1\10\1\145\6\10"+
    "\1\115\2\10\1\146\2\10\1\147\1\10\1\117\1\10"+
    "\1\150\22\10\1\151\2\10\34\0\3\10\1\0\10\10"+
    "\1\115\1\152\1\10\1\153\2\10\1\22\22\10\1\154"+
    "\6\10\34\0\3\10\1\0\17\10\1\155\30\10\34\0"+
    "\3\10\1\0\12\10\1\156\7\10\1\157\25\10\34\0"+
    "\3\10\1\0\11\10\1\160\12\10\1\161\7\10\1\162"+
    "\3\10\1\163\7\10\34\0\1\10\1\164\1\10\1\0"+
    "\13\10\1\165\3\10\1\166\1\167\17\10\1\170\1\10"+
    "\1\171\5\10\34\0\1\10\1\172\1\10\1\0\17\10"+
    "\1\173\30\10\34\0\3\10\1\0\11\10\1\174\36\10"+
    "\34\0\3\10\1\0\10\10\1\126\6\10\1\175\30\10"+
    "\34\0\1\10\1\176\1\10\1\0\50\10\34\0\3\10"+
    "\1\0\40\10\1\177\7\10\34\0\3\10\1\0\41\10"+
    "\1\200\6\10\34\0\3\10\1\0\17\10\1\201\21\10"+
    "\1\202\6\10\122\0\1\203\107\0\1\204\107\0\1\205"+
    "\1\0\1\206\105\0\1\207\2\0\1\210\104\0\1\211"+
    "\107\0\1\212\4\0\1\213\102\0\1\214\5\0\1\215"+
    "\101\0\1\216\6\0\1\217\100\0\1\220\7\0\1\221"+
    "\77\0\1\222\10\0\1\223\76\0\1\224\13\0\1\4"+
    "\1\63\1\4\2\63\13\0\1\4\163\0\1\112\40\0"+
    "\1\225\6\0\1\226\22\0\1\227\61\0\1\230\21\0"+
    "\1\231\46\0\1\232\7\0\1\233\2\0\1\234\3\0"+
    "\1\235\21\0\1\236\43\0\1\237\26\0\1\240\14\0"+
    "\1\241\107\0\1\242\46\0\1\243\20\0\1\244\23\0"+
    "\1\245\42\0\1\246\16\0\1\247\21\0\1\250\47\0"+
    "\1\251\43\0\1\252\53\0\1\253\1\0\1\254\25\0"+
    "\1\255\60\0\1\256\7\0\1\257\76\0\1\260\12\0"+
    "\1\261\7\0\1\262\3\0\1\263\44\0\1\264\15\0"+
    "\1\265\3\0\1\266\1\267\17\0\1\270\1\0\1\271"+
    "\42\0\1\272\21\0\1\273\101\0\1\274\106\0\1\233"+
    "\6\0\1\275\65\0\1\276\152\0\1\277\110\0\1\300"+
    "\65\0\1\301\21\0\1\302\33\0\2\111\2\0\104\111"+
    "\7\0\3\10\1\0\11\10\1\135\36\10\34\0\3\10"+
    "\1\0\16\10\1\147\26\10\1\303\2\10\34\0\3\10"+
    "\1\0\11\10\1\304\36\10\34\0\1\10\1\305\1\10"+
    "\1\0\13\10\1\124\3\10\1\306\30\10\34\0\3\10"+
    "\1\0\13\10\1\307\6\10\1\310\25\10\34\0\1\122"+
    "\3\0\1\311\2\312\1\313\11\0\1\122\7\0\2\122"+
    "\2\0\1\122\52\0\3\10\1\0\34\10\1\314\13\10"+
    "\34\0\3\10\1\0\45\10\1\315\2\10\34\0\3\10"+
    "\1\0\41\10\1\316\6\10\34\0\3\10\1\0\11\10"+
    "\1\317\36\10\34\0\3\10\1\0\1\320\20\10\1\321"+
    "\26\10\34\0\3\10\1\0\1\322\47\10\34\0\3\10"+
    "\1\0\24\10\1\323\23\10\34\0\3\10\1\0\1\10"+
    "\1\324\46\10\34\0\3\10\1\0\11\10\1\325\36\10"+
    "\34\0\3\10\1\0\41\10\1\326\6\10\34\0\3\10"+
    "\1\0\12\10\1\327\35\10\34\0\3\10\1\0\13\10"+
    "\1\330\34\10\34\0\3\10\1\0\22\10\1\331\25\10"+
    "\34\0\3\10\1\0\20\10\1\332\27\10\34\0\1\10"+
    "\1\157\1\10\1\0\50\10\34\0\3\10\1\0\17\10"+
    "\1\333\30\10\34\0\3\10\1\0\22\10\1\334\25\10"+
    "\34\0\3\10\1\0\16\10\1\335\26\10\1\336\2\10"+
    "\34\0\3\10\1\0\16\10\1\147\31\10\34\0\3\10"+
    "\1\0\17\10\1\337\30\10\34\0\1\10\1\305\1\10"+
    "\1\0\17\10\1\306\30\10\34\0\3\10\1\0\1\340"+
    "\17\10\1\341\2\10\1\342\15\10\1\343\6\10\34\0"+
    "\3\10\1\0\1\10\1\344\46\10\34\0\3\10\1\0"+
    "\22\10\1\345\25\10\34\0\1\10\1\346\1\10\1\0"+
    "\50\10\34\0\3\10\1\0\20\10\1\347\27\10\34\0"+
    "\3\10\1\0\20\10\1\350\27\10\34\0\3\10\1\0"+
    "\16\10\1\351\31\10\34\0\3\10\1\0\16\10\1\352"+
    "\2\10\1\353\26\10\34\0\1\10\1\354\1\10\1\0"+
    "\50\10\34\0\3\10\1\0\23\10\1\355\24\10\34\0"+
    "\3\10\1\0\13\10\1\356\34\10\34\0\3\10\1\0"+
    "\7\10\1\357\13\10\1\360\24\10\34\0\3\10\1\0"+
    "\47\10\1\361\34\0\3\10\1\0\16\10\1\362\31\10"+
    "\34\0\3\10\1\0\17\10\1\363\4\10\1\364\23\10"+
    "\34\0\3\10\1\0\17\10\1\365\21\10\1\366\6\10"+
    "\34\0\3\10\1\0\13\10\1\367\34\10\34\0\3\10"+
    "\1\0\7\10\1\370\40\10\34\0\3\10\1\0\24\10"+
    "\1\371\23\10\34\0\3\10\1\0\20\10\1\372\1\10"+
    "\1\373\25\10\34\0\3\10\1\0\1\374\47\10\34\0"+
    "\3\10\1\0\20\10\1\375\27\10\34\0\3\10\1\0"+
    "\13\10\1\376\34\10\34\0\3\10\1\0\20\10\1\377"+
    "\27\10\34\0\3\10\1\0\16\10\1\u0100\31\10\34\0"+
    "\3\10\1\0\13\10\1\u0101\34\10\122\0\1\u0102\107\0"+
    "\1\u0103\72\0\1\u0104\55\0\1\231\107\0\1\u0105\6\0"+
    "\1\u0106\121\0\1\u0107\120\0\1\u0108\103\0\1\u0109\57\0"+
    "\1\u010a\76\0\1\u010b\20\0\1\u010c\66\0\1\u010d\133\0"+
    "\1\u010e\64\0\1\u010f\117\0\1\u0110\137\0\1\u0111\61\0"+
    "\1\u0112\116\0\1\u0113\105\0\1\u0114\64\0\1\257\131\0"+
    "\1\u0115\112\0\1\u0116\103\0\1\u0117\26\0\1\u0118\42\0"+
    "\1\u0119\17\0\1\u011a\2\0\1\u011b\15\0\1\u011c\47\0"+
    "\1\u011d\130\0\1\u011e\62\0\1\u011f\132\0\1\u0120\105\0"+
    "\1\u0121\107\0\1\u0122\66\0\1\u0123\135\0\1\u0124\77\0"+
    "\1\u0125\117\0\1\u0126\133\0\1\u0127\56\0\1\u0128\110\0"+
    "\1\u0129\4\0\1\u012a\102\0\1\u012b\21\0\1\u012c\61\0"+
    "\1\u012d\103\0\1\u012e\124\0\1\u012f\103\0\1\u0130\1\0"+
    "\1\u0131\65\0\1\u0132\127\0\1\u0133\102\0\1\u0134\114\0"+
    "\1\u0135\105\0\1\u0136\104\0\1\u0137\70\0\3\10\1\0"+
    "\20\10\1\u0138\27\10\34\0\3\10\1\0\21\10\1\353"+
    "\26\10\34\0\3\10\1\0\7\10\1\357\40\10\34\0"+
    "\3\10\1\0\16\10\1\u0139\31\10\34\0\3\10\1\0"+
    "\1\10\1\u013a\37\10\1\u013b\6\10\34\0\3\10\1\0"+
    "\13\10\1\u013c\34\10\41\0\1\312\110\0\1\312\101\0"+
    "\3\10\1\0\41\10\1\u013d\6\10\34\0\3\10\1\0"+
    "\43\10\1\351\4\10\34\0\3\10\1\0\17\10\1\u013e"+
    "\30\10\34\0\3\10\1\0\12\10\1\u013f\35\10\34\0"+
    "\3\10\1\0\20\10\1\u0140\27\10\34\0\3\10\1\0"+
    "\11\10\1\u0141\36\10\34\0\3\10\1\0\22\10\1\u0142"+
    "\25\10\34\0\3\10\1\0\1\10\1\u0143\46\10\34\0"+
    "\3\10\1\0\17\10\1\u0144\30\10\34\0\3\10\1\0"+
    "\1\u0145\47\10\34\0\3\10\1\0\15\10\1\u0146\10\10"+
    "\1\u0146\2\10\1\u0146\16\10\34\0\3\10\1\0\14\10"+
    "\1\u0147\33\10\34\0\3\10\1\0\11\10\1\u0148\36\10"+
    "\34\0\3\10\1\0\11\10\1\u0149\36\10\34\0\3\10"+
    "\1\0\22\10\1\356\25\10\34\0\3\10\1\0\11\10"+
    "\1\u014a\6\10\1\351\27\10\34\0\3\10\1\0\16\10"+
    "\1\u014b\31\10\34\0\3\10\1\0\20\10\1\u014c\1\10"+
    "\1\u014d\25\10\34\0\3\10\1\0\43\10\1\u014e\4\10"+
    "\34\0\3\10\1\0\13\10\1\u014f\34\10\34\0\3\10"+
    "\1\0\11\10\1\u0150\36\10\34\0\1\10\1\u0151\1\10"+
    "\1\0\50\10\34\0\1\10\1\u0152\1\10\1\0\50\10"+
    "\34\0\3\10\1\0\17\10\1\u0153\30\10\34\0\3\10"+
    "\1\0\12\10\1\u0154\35\10\34\0\3\10\1\0\7\10"+
    "\1\u0155\40\10\34\0\3\10\1\0\15\10\1\u0156\10\10"+
    "\1\u0156\2\10\1\u0156\16\10\34\0\3\10\1\0\13\10"+
    "\1\u0157\34\10\34\0\3\10\1\0\23\10\1\u0158\24\10"+
    "\34\0\3\10\1\0\20\10\1\u0159\27\10\34\0\3\10"+
    "\1\0\11\10\1\u015a\36\10\34\0\3\10\1\0\11\10"+
    "\1\u015b\36\10\34\0\3\10\1\0\22\10\1\351\25\10"+
    "\34\0\3\10\1\0\23\10\1\u015c\24\10\34\0\3\10"+
    "\1\0\11\10\1\u015d\36\10\34\0\3\10\1\0\11\10"+
    "\1\u015e\36\10\34\0\3\10\1\0\23\10\1\u015f\24\10"+
    "\34\0\3\10\1\0\20\10\1\u0160\27\10\34\0\1\10"+
    "\1\u0161\1\10\1\0\50\10\34\0\3\10\1\0\24\10"+
    "\1\u0162\23\10\34\0\3\10\1\0\24\10\1\u0151\23\10"+
    "\34\0\3\10\1\0\20\10\1\u0163\27\10\34\0\3\10"+
    "\1\0\1\u0160\47\10\34\0\3\10\1\0\20\10\1\u0164"+
    "\27\10\34\0\1\10\1\u0165\1\10\1\0\50\10\34\0"+
    "\3\10\1\0\41\10\1\u0166\6\10\34\0\3\10\1\0"+
    "\1\10\1\351\46\10\34\0\3\10\1\0\23\10\1\342"+
    "\24\10\34\0\3\10\1\0\1\u0167\47\10\34\0\3\10"+
    "\1\0\41\10\1\351\6\10\34\0\3\10\1\0\11\10"+
    "\1\u0168\36\10\34\0\3\10\1\0\45\10\1\u0169\2\10"+
    "\60\0\1\u016a\70\0\1\u016b\37\0\1\u016c\61\0\1\u016d"+
    "\135\0\1\u016e\111\0\1\u0121\63\0\1\u016f\102\0\1\u0170"+
    "\115\0\1\u0171\100\0\1\u0172\120\0\1\u0173\66\0\1\u0174"+
    "\125\0\1\u0175\70\0\1\u0176\123\0\1\u0177\104\0\1\u0178"+
    "\107\0\1\u0179\120\0\1\u0125\76\0\1\u017a\6\0\1\u0121"+
    "\105\0\1\u017b\111\0\1\u017c\1\0\1\u017d\100\0\1\u017e"+
    "\105\0\1\u017f\73\0\1\u0180\107\0\1\u0181\131\0\1\u0182"+
    "\102\0\1\u0183\104\0\1\u0184\113\0\1\u0185\117\0\1\u0186"+
    "\75\0\1\u0187\107\0\1\u0188\120\0\1\u0121\76\0\1\u0189"+
    "\107\0\1\u018a\121\0\1\u018b\104\0\1\u018c\64\0\1\u018d"+
    "\136\0\1\u018e\107\0\1\u0180\103\0\1\u018f\67\0\1\u018c"+
    "\127\0\1\u0190\64\0\1\u0191\153\0\1\u0192\47\0\1\u0121"+
    "\131\0\1\u011b\64\0\1\u0193\150\0\1\u0121\57\0\1\u0194"+
    "\143\0\1\u0195\36\0\3\10\1\0\23\10\1\u0196\24\10"+
    "\34\0\3\10\1\0\41\10\1\u0197\6\10\34\0\3\10"+
    "\1\0\45\10\1\351\2\10\34\0\3\10\1\0\43\10"+
    "\1\u0198\4\10\34\0\1\10\1\u0199\1\10\1\0\50\10"+
    "\34\0\3\10\1\0\20\10\1\u019a\27\10\34\0\3\10"+
    "\1\0\15\10\1\351\10\10\1\351\2\10\1\351\16\10"+
    "\34\0\3\10\1\0\11\10\1\u019b\36\10\34\0\3\10"+
    "\1\0\14\10\1\351\33\10\34\0\3\10\1\0\11\10"+
    "\1\u019c\36\10\34\0\3\10\1\0\11\10\1\u019d\36\10"+
    "\34\0\3\10\1\0\46\10\1\u019e\1\10\34\0\3\10"+
    "\1\0\24\10\1\u019f\23\10\34\0\3\10\1\0\41\10"+
    "\1\u013b\6\10\34\0\3\10\1\0\13\10\1\u01a0\34\10"+
    "\34\0\3\10\1\0\20\10\1\u01a1\27\10\34\0\3\10"+
    "\1\0\11\10\1\u01a2\36\10\34\0\3\10\1\0\45\10"+
    "\1\u01a3\2\10\34\0\3\10\1\0\24\10\1\u01a4\23\10"+
    "\34\0\3\10\1\0\20\10\1\351\27\10\34\0\3\10"+
    "\1\0\20\10\1\u01a5\27\10\34\0\1\10\1\u01a6\1\10"+
    "\1\0\50\10\34\0\3\10\1\0\17\10\1\u01a7\30\10"+
    "\34\0\3\10\1\0\1\u01a8\47\10\34\0\3\10\1\0"+
    "\21\10\1\u01a9\26\10\34\0\3\10\1\0\10\10\1\u01a3"+
    "\37\10\34\0\3\10\1\0\1\u01aa\47\10\34\0\1\10"+
    "\1\u01ab\1\10\1\0\50\10\34\0\3\10\1\0\14\10"+
    "\1\u01ac\33\10\34\0\3\10\1\0\17\10\1\u01ad\30\10"+
    "\34\0\3\10\1\0\24\10\1\u01ae\23\10\34\0\3\10"+
    "\1\0\41\10\1\374\6\10\34\0\3\10\1\0\1\u01af"+
    "\47\10\34\0\3\10\1\0\13\10\1\u01b0\34\10\34\0"+
    "\3\10\1\0\12\10\1\u01b1\35\10\34\0\3\10\1\0"+
    "\11\10\1\u01b2\36\10\34\0\3\10\1\0\12\10\1\u01b3"+
    "\35\10\34\0\3\10\1\0\13\10\1\u01b4\34\10\34\0"+
    "\3\10\1\0\24\10\1\u01b5\23\10\34\0\1\10\1\u01b6"+
    "\1\10\1\0\50\10\34\0\3\10\1\0\11\10\1\u01b7"+
    "\36\10\34\0\3\10\1\0\22\10\1\u01b8\25\10\34\0"+
    "\3\10\1\0\1\340\47\10\101\0\1\u01b9\113\0\1\u0121"+
    "\105\0\1\u01ba\41\0\1\u01bb\132\0\1\u01bc\104\0\1\u0121"+
    "\10\0\1\u0121\2\0\1\u0121\67\0\1\u01bd\112\0\1\u0121"+
    "\104\0\1\u01be\107\0\1\u01bf\144\0\1\u01c0\65\0\1\u01c1"+
    "\124\0\1\u016c\61\0\1\u01c2\114\0\1\u01c3\134\0\1\u01c4"+
    "\66\0\1\u01c5\103\0\1\u0121\107\0\1\u01c6\64\0\1\u01c7"+
    "\131\0\1\u01c8\70\0\1\u01c9\117\0\1\u01c4\77\0\1\u01ca"+
    "\123\0\1\u01cb\117\0\1\u01cc\124\0\1\u0132\46\0\1\u01cd"+
    "\122\0\1\u01ce\106\0\1\u01cf\106\0\1\u01d0\110\0\1\u01d1"+
    "\110\0\1\u01d2\120\0\1\u01d3\60\0\1\u01d4\123\0\1\u01d5"+
    "\120\0\1\u01d6\65\0\1\u0119\103\0\3\10\1\0\1\u01d7"+
    "\47\10\34\0\3\10\1\0\24\10\1\u01d8\23\10\34\0"+
    "\3\10\1\0\45\10\1\321\2\10\34\0\3\10\1\0"+
    "\20\10\1\u01d9\27\10\34\0\3\10\1\0\24\10\1\351"+
    "\23\10\34\0\3\10\1\0\24\10\1\u01da\23\10\34\0"+
    "\3\10\1\0\45\10\1\u01db\2\10\34\0\3\10\1\0"+
    "\45\10\1\u01dc\2\10\34\0\3\10\1\0\25\10\1\u01dd"+
    "\1\u01de\1\10\1\u01df\1\u01e0\3\10\1\u01e1\12\10\34\0"+
    "\3\10\1\0\11\10\1\351\36\10\34\0\3\10\1\0"+
    "\1\10\1\u01e2\46\10\34\0\3\10\1\0\1\u01e3\47\10"+
    "\34\0\3\10\1\0\24\10\1\u01e4\23\10\34\0\3\10"+
    "\1\0\11\10\1\u01e5\36\10\34\0\3\10\1\0\15\10"+
    "\1\u01e6\10\10\1\u01e6\2\10\1\u01e6\16\10\34\0\3\10"+
    "\1\0\17\10\1\u01e7\30\10\34\0\3\10\1\0\24\10"+
    "\1\u01e8\23\10\34\0\3\10\1\0\11\10\1\374\36\10"+
    "\34\0\3\10\1\0\22\10\1\u01e9\25\10\34\0\3\10"+
    "\1\0\23\10\1\351\24\10\34\0\3\10\1\0\11\10"+
    "\1\u01ea\36\10\34\0\3\10\1\0\12\10\1\351\35\10"+
    "\34\0\3\10\1\0\20\10\1\u01eb\27\10\34\0\3\10"+
    "\1\0\14\10\1\u01ec\33\10\34\0\3\10\1\0\40\10"+
    "\1\u01ed\7\10\34\0\3\10\1\0\20\10\1\u01ee\27\10"+
    "\34\0\3\10\1\0\45\10\1\u01ef\2\10\34\0\3\10"+
    "\1\0\24\10\1\u01f0\23\10\34\0\3\10\1\0\23\10"+
    "\1\u01e2\24\10\64\0\1\u01f1\130\0\1\u010c\62\0\1\u01f2"+
    "\113\0\1\u0121\107\0\1\u01f3\130\0\1\u01f4\107\0\1\u01f5"+
    "\53\0\1\u0121\77\0\1\u01f6\106\0\1\u01f7\133\0\1\u01f8"+
    "\74\0\1\u01f9\115\0\1\u01fa\101\0\1\u0132\121\0\1\u0121"+
    "\75\0\1\u01fb\110\0\1\u0121\115\0\1\u01fc\103\0\1\u01fd"+
    "\133\0\1\u01fe\67\0\1\u01ff\134\0\1\u0200\66\0\1\u0201"+
    "\106\0\1\u01f6\60\0\3\10\1\0\11\10\1\u0202\36\10"+
    "\34\0\3\10\1\0\16\10\1\u0203\31\10\34\0\3\10"+
    "\1\0\17\10\1\u0204\30\10\34\0\1\10\1\u0205\1\10"+
    "\1\0\50\10\34\0\3\10\1\0\27\10\1\u0206\20\10"+
    "\34\0\3\10\1\0\27\10\1\u0207\20\10\34\0\1\10"+
    "\1\u0208\1\10\1\0\50\10\34\0\3\10\1\0\27\10"+
    "\1\u0209\20\10\34\0\1\10\1\u020a\1\10\1\0\50\10"+
    "\34\0\3\10\1\0\17\10\1\u01f0\30\10\34\0\3\10"+
    "\1\0\20\10\1\u020b\27\10\34\0\3\10\1\0\14\10"+
    "\1\u020c\33\10\34\0\3\10\1\0\20\10\1\u01a3\27\10"+
    "\34\0\3\10\1\0\11\10\1\u020d\36\10\34\0\3\10"+
    "\1\0\22\10\1\u020e\25\10\34\0\3\10\1\0\24\10"+
    "\1\u020f\23\10\34\0\3\10\1\0\13\10\1\u014b\34\10"+
    "\34\0\3\10\1\0\12\10\1\u01a3\35\10\56\0\1\u0210"+
    "\110\0\1\u0211\65\0\1\u0212\131\0\1\u0201\110\0\1\u0213"+
    "\103\0\1\u0214\113\0\1\u01c4\113\0\1\u0215\76\0\1\u017b"+
    "\106\0\1\u01c4\71\0\3\10\1\0\24\10\1\u0216\23\10"+
    "\34\0\3\10\1\0\1\351\47\10\34\0\3\10\1\0"+
    "\11\10\1\u0217\36\10\34\0\3\10\1\0\33\10\1\u0218"+
    "\14\10\34\0\3\10\1\0\7\10\1\u0219\40\10\34\0"+
    "\3\10\1\0\32\10\1\u021a\1\u0218\2\10\1\u021b\11\10"+
    "\34\0\3\10\1\0\1\10\1\u021c\46\10\34\0\3\10"+
    "\1\0\25\10\1\u021d\1\u021e\1\10\1\u021f\1\u0220\3\10"+
    "\1\u0221\12\10\34\0\3\10\1\0\44\10\1\u0222\3\10"+
    "\34\0\3\10\1\0\25\10\1\u0223\1\u0224\1\10\1\u0225"+
    "\1\u0226\3\10\1\u0227\1\10\1\u0228\10\10\40\0\1\u0121"+
    "\120\0\1\u0229\124\0\1\u022a\55\0\3\10\1\0\25\10"+
    "\1\u022b\1\u022c\1\10\1\u022d\1\u022e\3\10\1\u0227\12\10"+
    "\34\0\3\10\1\0\24\10\1\u022f\23\10\34\0\3\10"+
    "\1\0\11\10\1\u0206\36\10\34\0\3\10\1\0\11\10"+
    "\1\u0230\36\10\34\0\3\10\1\0\37\10\1\u0206\10\10"+
    "\34\0\3\10\1\0\1\10\1\u0231\46\10\34\0\3\10"+
    "\1\0\27\10\1\u0232\20\10\34\0\3\10\1\0\27\10"+
    "\1\u0233\20\10\34\0\1\10\1\u0234\1\10\1\0\50\10"+
    "\34\0\3\10\1\0\27\10\1\u0235\20\10\34\0\1\10"+
    "\1\u0236\1\10\1\0\50\10\34\0\3\10\1\0\45\10"+
    "\1\u0237\2\10\34\0\3\10\1\0\27\10\1\u0238\20\10"+
    "\34\0\3\10\1\0\27\10\1\u0239\20\10\34\0\1\10"+
    "\1\u023a\1\10\1\0\50\10\34\0\3\10\1\0\27\10"+
    "\1\u023b\20\10\34\0\1\10\1\u023c\1\10\1\0\50\10"+
    "\34\0\3\10\1\0\40\10\1\u023d\7\10\67\0\1\u023e"+
    "\54\0\3\10\1\0\27\10\1\u023f\20\10\34\0\3\10"+
    "\1\0\27\10\1\u0240\20\10\34\0\1\10\1\u0241\1\10"+
    "\1\0\50\10\34\0\3\10\1\0\27\10\1\u0242\20\10"+
    "\34\0\3\10\1\0\24\10\1\u0243\23\10\34\0\3\10"+
    "\1\0\12\10\1\u0244\35\10\34\0\3\10\1\0\11\10"+
    "\1\u0245\36\10\34\0\3\10\1\0\33\10\1\u0246\14\10"+
    "\34\0\3\10\1\0\7\10\1\u0247\40\10\34\0\3\10"+
    "\1\0\32\10\1\u0248\1\u0246\2\10\1\u0249\11\10\34\0"+
    "\3\10\1\0\1\10\1\u024a\46\10\34\0\3\10\1\0"+
    "\23\10\1\u024b\24\10\34\0\3\10\1\0\33\10\1\u024c"+
    "\3\10\1\u024d\10\10\34\0\3\10\1\0\32\10\1\u024e"+
    "\15\10\34\0\3\10\1\0\7\10\1\u024f\40\10\34\0"+
    "\3\10\1\0\32\10\1\u0250\1\u024c\2\10\1\u0251\1\u024d"+
    "\10\10\34\0\3\10\1\0\1\10\1\u0252\46\10\34\0"+
    "\3\10\1\0\17\10\1\u0253\30\10\72\0\1\u0254\51\0"+
    "\3\10\1\0\33\10\1\u0255\14\10\34\0\3\10\1\0"+
    "\7\10\1\u0256\40\10\34\0\3\10\1\0\32\10\1\u0257"+
    "\1\u0255\2\10\1\u0251\11\10\34\0\3\10\1\0\17\10"+
    "\1\u0258\30\10\34\0\3\10\1\0\20\10\1\u0207\27\10"+
    "\34\0\3\10\1\0\24\10\1\u0207\23\10\34\0\3\10"+
    "\1\0\24\10\1\u0259\23\10\34\0\3\10\1\0\11\10"+
    "\1\u0232\36\10\34\0\3\10\1\0\11\10\1\u025a\36\10"+
    "\34\0\3\10\1\0\37\10\1\u0232\10\10\34\0\3\10"+
    "\1\0\1\10\1\u025b\46\10\34\0\1\10\1\u025c\1\10"+
    "\1\0\50\10\34\0\3\10\1\0\24\10\1\u025d\23\10"+
    "\34\0\3\10\1\0\40\10\1\u025e\7\10\34\0\3\10"+
    "\1\0\11\10\1\u025f\36\10\34\0\3\10\1\0\11\10"+
    "\1\u0238\36\10\34\0\3\10\1\0\11\10\1\u0260\36\10"+
    "\34\0\3\10\1\0\37\10\1\u023f\10\10\34\0\3\10"+
    "\1\0\1\10\1\u0261\46\10\34\0\3\10\1\0\14\10"+
    "\1\u0262\33\10\51\0\1\u0263\72\0\3\10\1\0\24\10"+
    "\1\u0264\23\10\34\0\3\10\1\0\11\10\1\u023f\36\10"+
    "\34\0\3\10\1\0\11\10\1\u0265\36\10\34\0\3\10"+
    "\1\0\34\10\1\u0207\13\10\34\0\3\10\1\0\24\10"+
    "\1\u0266\23\10\34\0\3\10\1\0\12\10\1\u0267\35\10"+
    "\34\0\3\10\1\0\11\10\1\u0268\36\10\34\0\3\10"+
    "\1\0\20\10\1\u0269\27\10\34\0\3\10\1\0\24\10"+
    "\1\u026a\23\10\34\0\3\10\1\0\17\10\1\u026b\30\10"+
    "\34\0\3\10\1\0\12\10\1\u0151\35\10\34\0\3\10"+
    "\1\0\12\10\1\u026c\35\10\34\0\3\10\1\0\11\10"+
    "\1\u026d\36\10\34\0\3\10\1\0\41\10\1\u026e\6\10"+
    "\52\0\1\u0180\71\0\3\10\1\0\24\10\1\u026f\23\10"+
    "\34\0\3\10\1\0\12\10\1\u0270\35\10\34\0\3\10"+
    "\1\0\17\10\1\u0271\30\10\34\0\3\10\1\0\20\10"+
    "\1\u0233\27\10\34\0\3\10\1\0\24\10\1\u0233\23\10"+
    "\34\0\3\10\1\0\36\10\1\u0272\11\10\34\0\3\10"+
    "\1\0\17\10\1\u0273\30\10\34\0\3\10\1\0\14\10"+
    "\1\u0274\33\10\34\0\3\10\1\0\20\10\1\u0275\27\10"+
    "\34\0\3\10\1\0\24\10\1\u0240\23\10\34\0\3\10"+
    "\1\0\42\10\1\u0233\5\10\34\0\3\10\1\0\17\10"+
    "\1\u0276\30\10\34\0\3\10\1\0\20\10\1\u0240\27\10"+
    "\34\0\3\10\1\0\34\10\1\u0233\13\10\34\0\3\10"+
    "\1\0\37\10\1\u0233\10\10\34\0\3\10\1\0\34\10"+
    "\1\u0275\13\10\34\0\3\10\1\0\41\10\1\u0277\6\10"+
    "\34\0\3\10\1\0\37\10\1\u024d\10\10\34\0\3\10"+
    "\1\0\34\10\1\u0240\13\10\34\0\3\10\1\0\42\10"+
    "\1\u0240\5\10\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\31\1\12\11\17\1\1\11\23\1\2\11"+
    "\1\0\66\1\10\11\1\1\1\11\1\1\7\11\24\0"+
    "\1\11\1\1\2\0\1\1\25\0\6\1\1\0\1\11"+
    "\1\0\66\1\2\11\12\0\1\11\13\0\1\1\6\0"+
    "\1\11\21\0\1\1\4\0\62\1\1\11\13\0\3\11"+
    "\1\0\1\11\14\0\1\11\16\0\43\1\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\16\0\1\11\1\0\32\1\1\0\2\11\1\1\4\0"+
    "\1\11\2\0\3\11\1\0\1\11\1\0\16\1\1\11"+
    "\2\0\2\11\1\0\23\1\1\11\1\0\23\1\1\0"+
    "\25\1\1\0\16\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[631];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GlslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 87: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 88: break;
          case 3: 
            { return GlslTypes.SLASH;
            } 
            // fall through
          case 89: break;
          case 4: 
            { return GlslTypes.INTEGER_CONSTANT;
            } 
            // fall through
          case 90: break;
          case 5: 
            { return GlslTypes.IDENTIFIER;
            } 
            // fall through
          case 91: break;
          case 6: 
            { return GlslTypes.DOT;
            } 
            // fall through
          case 92: break;
          case 7: 
            { return GlslTypes.SEMICOLON;
            } 
            // fall through
          case 93: break;
          case 8: 
            { return GlslTypes.COLON;
            } 
            // fall through
          case 94: break;
          case 9: 
            { return GlslTypes.C_BRACKET_L;
            } 
            // fall through
          case 95: break;
          case 10: 
            { return GlslTypes.C_BRACKET_R;
            } 
            // fall through
          case 96: break;
          case 11: 
            { return GlslTypes.S_BRACKET_L;
            } 
            // fall through
          case 97: break;
          case 12: 
            { return GlslTypes.S_BRACKET_R;
            } 
            // fall through
          case 98: break;
          case 13: 
            { return GlslTypes.PAREN_L;
            } 
            // fall through
          case 99: break;
          case 14: 
            { return GlslTypes.PAREN_R;
            } 
            // fall through
          case 100: break;
          case 15: 
            { return GlslTypes.COMMA;
            } 
            // fall through
          case 101: break;
          case 16: 
            { return GlslTypes.HASHTAG;
            } 
            // fall through
          case 102: break;
          case 17: 
            { return GlslTypes.EQUAL;
            } 
            // fall through
          case 103: break;
          case 18: 
            { return GlslTypes.STAR;
            } 
            // fall through
          case 104: break;
          case 19: 
            { return GlslTypes.PLUS;
            } 
            // fall through
          case 105: break;
          case 20: 
            { return GlslTypes.DASH;
            } 
            // fall through
          case 106: break;
          case 21: 
            { return GlslTypes.PERCENT;
            } 
            // fall through
          case 107: break;
          case 22: 
            { return GlslTypes.ANGLE_L;
            } 
            // fall through
          case 108: break;
          case 23: 
            { return GlslTypes.ANGLE_R;
            } 
            // fall through
          case 109: break;
          case 24: 
            { return GlslTypes.AMPERSAND;
            } 
            // fall through
          case 110: break;
          case 25: 
            { return GlslTypes.CARET;
            } 
            // fall through
          case 111: break;
          case 26: 
            { return GlslTypes.VERTICAL_BAR;
            } 
            // fall through
          case 112: break;
          case 27: 
            { return GlslTypes.EXCLAMATION;
            } 
            // fall through
          case 113: break;
          case 28: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 114: break;
          case 29: 
            { return GlslTypes.COMMENT;
            } 
            // fall through
          case 115: break;
          case 30: 
            { return GlslTypes.DIV_ASSIGN;
            } 
            // fall through
          case 116: break;
          case 31: 
            { return GlslTypes.FLOAT_CONSTANT;
            } 
            // fall through
          case 117: break;
          case 32: 
            { return GlslTypes.IF;
            } 
            // fall through
          case 118: break;
          case 33: 
            { return GlslTypes.IN;
            } 
            // fall through
          case 119: break;
          case 34: 
            { return GlslTypes.DO;
            } 
            // fall through
          case 120: break;
          case 35: 
            { return GlslTypes.EQ_OP;
            } 
            // fall through
          case 121: break;
          case 36: 
            { return GlslTypes.MUL_ASSIGN;
            } 
            // fall through
          case 122: break;
          case 37: 
            { return GlslTypes.ADD_ASSIGN;
            } 
            // fall through
          case 123: break;
          case 38: 
            { return GlslTypes.INCREMENT;
            } 
            // fall through
          case 124: break;
          case 39: 
            { return GlslTypes.SUB_ASSIGN;
            } 
            // fall through
          case 125: break;
          case 40: 
            { return GlslTypes.DECREMENT;
            } 
            // fall through
          case 126: break;
          case 41: 
            { return GlslTypes.MOD_ASSIGN;
            } 
            // fall through
          case 127: break;
          case 42: 
            { return GlslTypes.LE_OP;
            } 
            // fall through
          case 128: break;
          case 43: 
            { return GlslTypes.LEFT_OP;
            } 
            // fall through
          case 129: break;
          case 44: 
            { return GlslTypes.GE_OP;
            } 
            // fall through
          case 130: break;
          case 45: 
            { return GlslTypes.RIGHT_OP;
            } 
            // fall through
          case 131: break;
          case 46: 
            { return GlslTypes.AND_ASSIGN;
            } 
            // fall through
          case 132: break;
          case 47: 
            { return GlslTypes.AND_OP;
            } 
            // fall through
          case 133: break;
          case 48: 
            { return GlslTypes.XOR_ASSIGN;
            } 
            // fall through
          case 134: break;
          case 49: 
            { return GlslTypes.XOR_OP;
            } 
            // fall through
          case 135: break;
          case 50: 
            { return GlslTypes.OR_ASSIGN;
            } 
            // fall through
          case 136: break;
          case 51: 
            { return GlslTypes.OR_OP;
            } 
            // fall through
          case 137: break;
          case 52: 
            { return GlslTypes.NE_OP;
            } 
            // fall through
          case 138: break;
          case 53: 
            { return GlslTypes.FOR;
            } 
            // fall through
          case 139: break;
          case 54: 
            { return GlslTypes.INT;
            } 
            // fall through
          case 140: break;
          case 55: 
            { return GlslTypes.RESERVED_FUTURE_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 56: 
            { return GlslTypes.OUT;
            } 
            // fall through
          case 142: break;
          case 57: 
            { return GlslTypes.LEFT_ASSIGN;
            } 
            // fall through
          case 143: break;
          case 58: 
            { return GlslTypes.RIGHT_ASSIGN;
            } 
            // fall through
          case 144: break;
          case 59: 
            { return GlslTypes.UINT;
            } 
            // fall through
          case 145: break;
          case 60: 
            { return GlslTypes.BOOL;
            } 
            // fall through
          case 146: break;
          case 61: 
            { return GlslTypes.NATIVE_VECTOR;
            } 
            // fall through
          case 147: break;
          case 62: 
            { return GlslTypes.VOID;
            } 
            // fall through
          case 148: break;
          case 63: 
            { return GlslTypes.ELSE;
            } 
            // fall through
          case 149: break;
          case 64: 
            { return GlslTypes.CASE;
            } 
            // fall through
          case 150: break;
          case 65: 
            { return GlslTypes.NATIVE_MATRIX;
            } 
            // fall through
          case 151: break;
          case 66: 
            { return GlslTypes.TRUE;
            } 
            // fall through
          case 152: break;
          case 67: 
            { return GlslTypes.FLOAT;
            } 
            // fall through
          case 153: break;
          case 68: 
            { return GlslTypes.FALSE;
            } 
            // fall through
          case 154: break;
          case 69: 
            { return GlslTypes.BREAK;
            } 
            // fall through
          case 155: break;
          case 70: 
            { return GlslTypes.CONST;
            } 
            // fall through
          case 156: break;
          case 71: 
            { return GlslTypes.INOUT;
            } 
            // fall through
          case 157: break;
          case 72: 
            { return GlslTypes.WHILE;
            } 
            // fall through
          case 158: break;
          case 73: 
            { return GlslTypes.LAYOUT;
            } 
            // fall through
          case 159: break;
          case 74: 
            { return GlslTypes.BUFFER;
            } 
            // fall through
          case 160: break;
          case 75: 
            { return GlslTypes.DOUBLE;
            } 
            // fall through
          case 161: break;
          case 76: 
            { return GlslTypes.STRUCT;
            } 
            // fall through
          case 162: break;
          case 77: 
            { return GlslTypes.SHARED;
            } 
            // fall through
          case 163: break;
          case 78: 
            { return GlslTypes.SWITCH;
            } 
            // fall through
          case 164: break;
          case 79: 
            { return GlslTypes.RETURN;
            } 
            // fall through
          case 165: break;
          case 80: 
            { return GlslTypes.UNIFORM;
            } 
            // fall through
          case 166: break;
          case 81: 
            { return GlslTypes.NATIVE_IMAGES;
            } 
            // fall through
          case 167: break;
          case 82: 
            { return GlslTypes.DEFAULT;
            } 
            // fall through
          case 168: break;
          case 83: 
            { return GlslTypes.DISCARD;
            } 
            // fall through
          case 169: break;
          case 84: 
            { return GlslTypes.NATIVE_VULKAN_TEXTURE;
            } 
            // fall through
          case 170: break;
          case 85: 
            { return GlslTypes.CONTINUE;
            } 
            // fall through
          case 171: break;
          case 86: 
            { return GlslTypes.NATIVE_SAMPLER;
            } 
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
