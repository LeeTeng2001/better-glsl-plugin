/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package glsl.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import glsl.language.psi.GlslTypes;  // contain token we'll use


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>glsl.flex</tt>
 */
class GlslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int MACRO_KEYWORD = 4;
  public static final int MACRO_SPACE_FIRST = 6;
  public static final int MACRO_DEFINE = 8;
  public static final int TO_LINE_END = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17552 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\2\0\1\56\1\57\1\60\13\24\1\61\1\47"+
    "\1\62\1\63\1\56\1\64\1\30\1\65\1\66\3\24\3\0\1\67\12\24\1\70\1\0\1\71\1\30"+
    "\1\56\1\72\3\24\1\55\1\73\1\23\2\24\1\70\1\74\1\75\1\76\2\30\3\24\1\77\1\24"+
    "\1\51\6\30\2\24\1\33\1\100\2\30\1\101\5\0\1\102\6\24\1\103\2\0\1\104\1\24"+
    "\1\105\1\56\1\43\1\24\1\106\1\107\1\110\2\24\1\111\1\112\1\113\1\114\1\115"+
    "\1\65\1\116\1\105\1\56\1\117\1\120\1\121\1\122\1\110\2\24\1\111\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\56\1\132\1\30\1\121\1\40\1\37\2\24\1\111"+
    "\1\133\1\113\1\47\1\134\1\135\1\30\1\105\1\56\1\44\1\136\1\121\1\107\1\110"+
    "\2\24\1\111\1\133\1\113\1\114\1\126\1\137\1\116\1\105\1\56\1\44\1\30\1\140"+
    "\1\141\1\142\1\143\1\120\1\141\1\24\1\144\1\145\1\146\1\147\1\30\1\131\1\56"+
    "\1\30\1\44\1\150\1\33\1\111\2\24\1\111\1\24\1\151\1\152\1\146\1\153\1\51\1"+
    "\105\1\56\2\30\1\106\1\33\1\111\2\24\1\111\1\154\1\113\1\152\1\146\1\153\1"+
    "\35\1\105\1\56\1\155\1\30\1\150\1\33\1\111\4\24\1\156\1\152\1\157\1\160\1"+
    "\45\1\105\1\56\1\30\1\42\1\161\1\24\1\25\1\42\2\24\1\37\1\162\1\25\1\163\1"+
    "\164\1\0\1\131\1\56\1\165\1\30\1\43\5\24\1\166\1\167\1\170\1\171\1\56\1\172"+
    "\4\30\1\173\1\174\1\175\1\43\1\176\1\177\1\166\1\200\1\201\1\52\1\56\1\202"+
    "\4\30\1\135\2\30\1\203\1\56\1\172\1\204\1\205\1\24\1\43\3\24\1\31\1\46\1\0"+
    "\1\152\1\206\1\0\1\46\3\0\1\207\1\210\7\30\5\24\1\55\1\0\1\211\1\56\1\172"+
    "\1\70\1\212\1\213\1\214\1\215\1\24\1\216\1\217\1\56\1\220\4\24\1\40\1\22\5"+
    "\24\1\221\51\24\1\142\1\25\1\142\5\24\1\142\4\24\1\142\1\25\1\142\1\24\1\25"+
    "\7\24\1\142\10\24\1\222\4\30\2\24\2\30\12\24\2\100\1\43\114\24\1\107\2\24"+
    "\1\43\2\24\1\51\11\24\1\141\1\24\1\135\1\24\1\33\1\223\1\30\2\24\1\223\1\30"+
    "\2\24\1\224\1\30\1\24\1\33\1\225\1\30\6\24\1\226\3\0\1\227\1\230\1\56\1\172"+
    "\3\30\1\231\1\56\1\172\13\24\1\30\1\232\4\24\1\233\10\24\1\100\1\30\3\24\1"+
    "\25\1\0\1\2\1\0\1\2\1\131\1\56\3\24\1\100\1\31\1\30\5\24\1\117\3\24\1\27\1"+
    "\56\1\172\4\30\2\24\1\170\1\2\6\24\1\206\1\171\3\0\1\114\1\56\1\172\1\56\1"+
    "\172\1\45\1\30\1\0\1\52\10\30\1\234\5\24\1\226\1\0\1\234\1\117\1\56\1\172"+
    "\1\30\1\235\1\2\1\30\1\236\3\24\1\104\1\214\1\56\1\72\4\24\1\70\1\0\1\2\1"+
    "\30\4\24\1\226\2\0\1\30\1\56\1\237\1\56\1\72\3\24\1\100\1\24\1\135\10\30\1"+
    "\240\2\0\1\241\1\242\1\203\30\24\7\0\1\243\42\24\2\100\4\24\2\100\1\24\1\244"+
    "\3\24\1\100\6\24\1\33\1\201\1\245\1\31\1\246\1\117\1\24\1\31\1\245\1\31\1"+
    "\30\1\235\3\30\1\247\1\30\1\45\1\135\1\30\1\250\1\30\1\152\1\0\1\44\1\45\2"+
    "\30\1\24\1\31\4\24\2\30\1\0\1\207\1\251\1\0\1\252\1\30\1\253\1\42\1\162\1"+
    "\254\1\32\1\255\1\24\1\256\1\257\1\260\2\30\5\24\1\135\116\30\5\24\1\25\5"+
    "\24\1\25\20\24\1\31\1\261\1\262\1\30\4\24\1\40\1\22\7\24\1\45\1\30\1\65\2"+
    "\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1\257\3\30\1\43\1\216\1\254\1\31\1"+
    "\43\11\24\1\25\1\263\1\43\12\24\1\221\1\257\4\24\1\25\1\43\12\24\1\25\2\30"+
    "\3\24\1\51\6\30\170\24\1\100\11\30\75\24\1\51\2\30\21\24\1\31\10\30\5\24\1"+
    "\100\41\24\1\31\2\24\1\56\1\264\2\30\5\24\1\170\1\101\1\265\3\24\1\70\12\24"+
    "\1\203\3\30\1\45\1\24\1\42\14\24\1\110\3\24\1\25\1\24\7\30\1\45\1\24\1\266"+
    "\1\267\2\24\1\55\2\30\1\135\6\24\1\117\1\30\1\270\5\24\1\226\1\0\1\52\1\30"+
    "\1\56\1\172\2\0\1\270\1\271\1\56\1\72\2\24\1\70\1\52\2\24\1\170\1\0\1\2\1"+
    "\30\3\24\1\31\1\102\5\24\1\55\1\0\1\252\1\45\1\56\1\172\1\272\1\24\1\56\1"+
    "\273\5\24\1\104\1\171\1\30\1\267\1\274\1\56\1\172\2\24\1\25\1\275\6\24\1\213"+
    "\1\276\1\233\2\30\1\277\1\24\1\55\1\300\1\30\3\301\1\30\2\25\5\24\1\221\1"+
    "\100\1\30\16\24\1\55\1\302\1\56\1\172\64\24\1\117\1\30\2\24\1\25\1\303\5\24"+
    "\1\117\40\30\55\24\1\100\15\24\1\27\4\30\1\25\1\30\1\303\1\304\1\24\1\111"+
    "\1\25\1\201\1\305\15\24\1\27\3\30\1\303\54\24\1\100\2\30\10\24\1\42\6\24\5"+
    "\30\1\24\1\31\2\0\2\30\2\0\1\120\2\30\1\257\3\30\1\44\1\33\20\24\1\306\1\250"+
    "\1\30\1\56\1\172\1\43\2\24\1\122\1\43\2\24\1\51\1\307\12\24\1\25\3\42\1\310"+
    "\1\311\2\30\1\312\1\24\1\154\2\24\1\25\2\24\1\313\1\24\1\100\1\24\1\100\4"+
    "\30\17\24\1\51\10\30\6\24\1\31\20\30\1\314\20\30\3\24\1\31\6\24\1\135\1\30"+
    "\1\252\3\30\4\24\1\30\1\257\3\24\1\51\4\24\1\70\1\315\3\24\1\100\4\24\1\117"+
    "\1\24\1\254\5\30\23\24\1\100\1\56\1\172\4\24\1\117\4\24\1\117\5\24\1\30\6"+
    "\24\1\117\23\30\46\24\1\25\1\30\2\24\1\100\1\30\1\24\23\30\1\100\1\111\4\24"+
    "\1\40\1\316\2\24\1\100\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24\1\317\1\30"+
    "\2\24\1\100\1\30\3\24\1\27\10\30\7\24\1\307\10\30\1\320\1\101\1\154\1\43\2"+
    "\24\1\117\1\125\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1\321\3\30\6"+
    "\24\1\100\1\30\2\24\1\100\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11\24\1\135"+
    "\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\236\6\24\1\0\1\171\3\30\1\131\1\56"+
    "\1\30\1\65\1\236\5\24\1\0\1\322\2\30\3\24\1\135\1\56\1\172\1\236\3\24\1\170"+
    "\1\0\1\323\1\56\2\30\4\24\1\324\1\30\1\236\5\24\1\55\1\0\1\325\1\326\1\56"+
    "\1\327\4\30\2\24\1\37\2\24\1\226\1\0\1\210\10\30\1\25\1\255\1\24\1\40\1\24"+
    "\1\135\5\24\1\170\1\0\1\315\1\56\1\172\1\150\1\107\1\110\2\24\1\111\1\133"+
    "\1\113\1\114\1\126\1\147\1\257\1\330\2\207\21\30\6\24\1\206\1\0\1\211\1\51"+
    "\1\56\1\172\4\30\6\24\2\0\1\331\1\30\1\56\1\172\24\30\5\24\1\170\1\52\1\0"+
    "\1\252\2\30\1\274\4\30\6\24\2\0\1\332\1\30\1\56\1\172\4\30\5\24\1\55\1\0\1"+
    "\30\1\56\1\172\6\30\3\24\1\333\1\0\1\2\1\56\1\172\54\30\10\24\1\56\1\172\1"+
    "\30\1\45\40\30\1\104\1\236\4\24\1\55\1\334\1\65\1\30\1\104\1\102\4\24\1\246"+
    "\1\216\1\0\1\203\4\30\7\24\1\135\40\30\1\24\1\111\3\24\1\170\1\171\1\0\1\135"+
    "\1\30\1\56\1\172\2\30\1\42\3\24\1\335\2\0\1\46\1\171\11\30\1\25\1\37\4\24"+
    "\1\336\1\337\1\217\1\30\1\0\1\203\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\117\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\135\3\24\1\25\1\56"+
    "\1\172\14\30\3\24\1\100\1\207\1\30\6\24\1\171\1\30\1\117\1\30\1\56\1\172\1"+
    "\303\2\24\1\257\2\24\56\30\10\24\1\31\1\30\1\104\4\0\1\171\1\30\1\65\1\236"+
    "\1\24\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61"+
    "\24\1\117\40\30\15\24\1\51\1\24\1\31\1\24\1\135\1\24\1\340\1\2\127\30\1\341"+
    "\1\342\2\0\1\343\1\2\3\30\1\344\22\30\1\326\67\30\12\24\1\33\10\24\1\33\1"+
    "\345\1\346\1\24\1\347\1\154\7\24\1\40\1\350\2\33\3\24\1\351\1\201\1\42\1\111"+
    "\51\24\1\100\3\24\1\111\2\24\1\221\3\24\1\221\2\24\1\33\3\24\1\33\2\24\1\25"+
    "\3\24\1\25\3\24\1\111\3\24\1\111\2\24\1\221\1\352\6\56\6\0\1\171\1\235\5\0"+
    "\1\207\1\314\1\30\1\353\2\30\1\235\1\46\1\0\52\30\1\171\2\0\1\354\1\355\1"+
    "\315\72\30\30\24\1\31\1\30\1\171\5\30\10\24\1\226\1\315\1\56\1\172\24\30\1"+
    "\154\3\24\1\173\1\43\1\221\1\356\1\253\1\357\1\173\1\244\1\173\2\221\1\130"+
    "\1\24\1\37\1\24\1\117\1\360\1\37\1\24\1\117\50\30\32\24\1\25\5\30\106\24\1"+
    "\31\1\30\33\24\1\100\120\24\1\27\1\30\146\24\1\135\3\30\3\24\1\100\74\30\1"+
    "\127\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1928 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\21\1\4\1\2\1\1\1\5\1\3\6\21\4\0\1\7\1\110\1\0\1\75\1\20\1\102\1\105\1"+
    "\0\1\72\1\73\1\77\1\100\1\74\1\101\1\13\1\6\1\10\1\41\1\45\1\42\1\31\5\10"+
    "\1\65\1\64\1\103\1\76\1\104\2\0\1\47\1\51\1\44\1\43\1\20\1\16\2\20\1\60\2"+
    "\20\1\17\1\52\4\20\1\46\1\53\1\20\1\12\5\20\1\70\1\0\1\71\1\106\1\20\1\0\1"+
    "\33\1\23\1\26\1\30\1\25\1\15\1\57\1\54\1\27\1\20\1\62\1\14\1\32\1\61\1\55"+
    "\1\37\1\20\1\40\1\36\1\34\1\11\1\24\1\56\1\35\1\50\1\63\1\66\1\107\1\67\1"+
    "\0\6\21\1\22\2\21\2\0\4\20\4\0\1\20\2\0\1\21\7\0\1\20\4\0\1\20\5\0\17\20\1"+
    "\0\2\20\4\0\4\20\16\0\5\20\7\0\1\20\1\0\1\20\1\0\5\20\1\0\2\20\2\0\4\20\1"+
    "\0\1\20\6\0\1\20\1\0\3\20\1\0\1\20\1\0\4\20\1\0\13\20\1\0\3\20\1\0\5\21\2"+
    "\0\6\20\1\0\7\20\1\0\1\20\15\0\1\20\1\0\15\21\1\0\1\21\1\0\2\21\1\0\2\21\1"+
    "\0\1\21\3\20\5\0\6\21\5\0\1\20\4\0\3\21\1\0\1\21\3\0\3\20\5\21\12\10\4\0\2"+
    "\20\1\21\13\20\1\0\1\20\7\21\2\20\2\21\1\0\4\21\2\20\2\10\3\20\2\0\1\20\7"+
    "\0\1\21\1\20\1\21\6\20\3\21\2\0\11\20\3\21\1\20\6\0\2\10\6\20\4\21\2\20\2"+
    "\0\2\21\1\20\11\21\1\20\3\21\1\20\5\21\2\0\1\20\3\21\4\0\6\20\6\0\10\21\6"+
    "\20\3\21\1\20\2\21\1\20\7\21\2\20\2\21\2\0\2\10\1\20\3\21\1\0\10\20\2\0\2"+
    "\20\2\0\6\20\1\0\7\20\1\0\1\20\3\0\4\20\2\0\1\21\1\20\7\21\2\0\2\21\2\0\3"+
    "\21\1\20\5\0\2\20\1\0\5\20\7\0\2\20\4\0\3\21\1\0\6\20\4\0\2\20\1\0\2\20\1"+
    "\0\2\20\1\0\2\20\2\0\1\21\1\0\5\21\4\0\2\21\2\0\3\21\3\0\1\21\7\0\4\20\1\0"+
    "\1\20\7\0\2\10\2\21\3\20\1\21\2\0\1\20\1\0\2\20\1\0\3\20\2\21\1\0\3\21\2\0"+
    "\1\20\10\0\1\20\6\21\6\0\2\21\2\0\1\21\1\20\1\0\6\20\3\0\3\20\1\0\4\20\3\0"+
    "\2\20\1\0\1\20\1\0\4\20\4\0\5\21\3\0\3\21\1\0\4\21\2\0\1\20\6\0\5\21\1\0\5"+
    "\20\3\0\1\20\7\21\1\0\2\21\5\0\2\21\1\0\4\20\1\0\3\20\1\0\2\20\5\0\3\20\2"+
    "\21\1\20\3\21\1\0\4\21\1\20\5\0\3\20\1\21\2\0\2\21\1\0\7\20\1\0\1\20\4\0\1"+
    "\21\4\0\6\21\1\0\1\21\3\0\2\21\4\0\1\20\1\21\2\20\7\21\4\0\10\20\10\21\1\0"+
    "\2\10\7\0\2\20\1\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20\6\0\4\20\1\0\3\20\1\0\1"+
    "\20\1\0\1\20\2\0\2\20\1\0\3\20\2\21\1\0\2\21\1\20\2\0\5\20\1\0\1\20\1\0\2"+
    "\10\2\0\4\20\2\21\13\0\1\21\1\0\1\21\1\0\1\21\4\0\2\21\5\20\10\21\11\0\1\21"+
    "\1\0\7\21\1\20\2\21\4\20\3\21\1\20\3\21\2\20\7\21\3\20\4\21\5\20\14\21\1\20"+
    "\1\21\2\10\4\21\2\0\3\20\1\0\7\20\2\0\3\21\2\20\3\21\3\0\2\20\2\21\4\0\1\20"+
    "\1\0\2\21\4\0\4\20\10\21\3\0\1\20\3\0\2\20\1\21\5\0\4\21\1\0\5\20\2\21\2\20"+
    "\1\21\1\20\5\0\5\21\3\20\3\0\10\21\5\20\2\10\3\0\3\20\3\21\1\0\5\21\4\20\1"+
    "\21\4\20\3\21\2\20\3\21\1\0\5\21\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\2\0\3"+
    "\20\1\0\6\20\2\0\2\20\2\1\5\21\5\0\1\20\4\0\1\21\3\0\4\21\11\0\1\20\4\0\1"+
    "\20\1\0\5\20\2\0\1\20\1\0\4\20\1\0\3\20\2\0\4\20\5\0\5\20\4\0\1\20\4\0\4\20"+
    "\3\21\2\20\5\0\2\21\2\0\3\20\2\10\2\20\4\0\6\21\1\0\3\20\1\21\3\20\1\21\4"+
    "\20\1\21\4\20\2\21\6\20\3\0\1\20\1\0\1\20\2\0\5\20\1\21\2\20\2\10\5\20\1\0"+
    "\4\20\2\21\4\0\1\20\3\21\2\20\1\21\5\20\2\21\3\0\3\20\4\0\3\20\2\21\2\0\6"+
    "\20\1\0\3\21\1\0\2\21\5\0\5\20\5\0\1\20\1\21\3\20\1\0\2\20\1\0\7\20\2\0\1"+
    "\21\6\0\2\20\2\0\3\20\3\0\2\20\3\0\2\20\2\0\3\21\4\0\3\20\1\0\2\20\1\0\1\20"+
    "\5\0\1\21\2\0\3\21\5\0\1\20\3\0\1\20\2\0\4\20\1\0\2\20\2\0\1\20\3\21\1\0\2"+
    "\21\1\0\5\20\2\21\1\0\3\21\2\0\1\21\2\0\5\21\1\0\2\10\3\20\1\21\2\0\1\20\1"+
    "\0\1\21\4\20\5\0\3\21\3\0\2\10\1\20\1\0\1\20\3\0\2\20\2\21\2\0\6\21\2\20\1"+
    "\0\1\20\1\21\3\0\1\20\3\0\2\20\3\0\5\21\1\20\4\21\3\0\6\21\1\20\6\21\3\0\1"+
    "\21\1\0\2\21\1\0\1\21\2\20\3\0\2\21\6\0\5\21\3\0\6\21\2\0\3\21\2\0\4\21\4"+
    "\0\1\20\2\0\2\20\2\0\4\20\1\0\4\20\1\0\1\20\1\0\6\20\2\0\5\20\1\0\4\20\1\0"+
    "\4\20\2\0\2\10\4\0\1\21\3\0\1\21\2\0\7\21\1\0\2\21\1\0\2\21\1\0\1\20\1\0\1"+
    "\20\5\0\1\20\1\0\1\20\1\0\3\20\1\0\3\20\1\0\3\20");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\2\5\1\6\23\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\34\1\3\1\1"+
    "\1\6\22\1\1\35\10\36\1\37\1\40\1\35\1\41"+
    "\1\42\1\43\1\4\1\0\5\5\1\44\22\5\1\45"+
    "\3\5\1\46\2\5\1\47\26\5\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\24\0"+
    "\1\45\1\46\2\0\1\47\25\0\7\36\1\72\3\36"+
    "\1\0\6\5\1\0\1\44\1\0\7\5\1\73\15\5"+
    "\1\74\7\5\1\75\23\5\1\76\4\5\1\77\1\100"+
    "\12\0\1\73\13\0\1\74\6\0\1\75\21\0\1\76"+
    "\4\0\15\36\1\101\14\5\1\102\1\103\1\104\1\105"+
    "\1\5\1\106\13\5\1\107\3\5\1\110\17\5\1\101"+
    "\13\0\1\102\1\104\1\105\1\0\1\106\14\0\1\110"+
    "\16\0\1\36\1\111\1\36\1\112\1\113\10\36\4\5"+
    "\1\114\1\5\1\115\1\5\1\116\2\5\1\117\3\5"+
    "\1\120\21\5\1\121\1\5\3\0\1\114\1\0\1\115"+
    "\1\0\1\116\2\0\1\117\2\0\1\120\16\0\1\121"+
    "\1\0\1\122\2\36\1\123\1\124\1\125\4\36\2\5"+
    "\1\126\1\127\1\75\11\5\1\130\1\107\4\5\1\131"+
    "\1\132\1\133\1\5\1\134\1\5\1\0\1\126\1\127"+
    "\1\75\4\0\1\130\2\0\1\131\1\132\1\133\1\0"+
    "\1\134\1\0\2\36\1\135\1\36\1\136\1\137\1\5"+
    "\1\140\2\5\2\141\1\5\1\141\1\5\1\142\1\143"+
    "\2\5\1\144\1\140\2\0\1\142\1\143\1\0\1\145"+
    "\1\36\1\146\1\5\1\147\21\5\1\147\1\0\1\36"+
    "\7\5\2\144\1\5\1\144\2\5\2\150\1\5\1\150"+
    "\2\5\1\0\1\151\2\150\1\5\1\150\21\5\1\0"+
    "\16\5\1\0\5\5\1\144\13\5\1\150\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[707];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7"+
    "\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d"+
    "\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u01ff\0\u0c43\0\u0c8c"+
    "\0\u0cd5\0\u01b6\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b"+
    "\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3"+
    "\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u01b6\0\u1240\0\u1289\0\u12d2"+
    "\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a"+
    "\0\u01b6\0\u1563\0\u01b6\0\u01b6\0\u036c\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u0323\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15"+
    "\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d"+
    "\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5"+
    "\0\u23ee\0\u2437\0\u2480\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u01b6\0\u24c9\0\u01b6\0\u2512\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u255b\0\u25a4\0\u25ed"+
    "\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835"+
    "\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d"+
    "\0\u2ac6\0\u01b6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c"+
    "\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4"+
    "\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c"+
    "\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354"+
    "\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a\0\u151a\0\u3553"+
    "\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709\0\u01b6\0\u3752"+
    "\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951\0\u0323"+
    "\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99"+
    "\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1"+
    "\0\u3e2a\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u0323\0\u3f97\0\u3fe0"+
    "\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228"+
    "\0\u4271\0\u42ba\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470"+
    "\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626\0\u01b6\0\u01b6"+
    "\0\u466f\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e"+
    "\0\u48b7\0\u4900\0\u01b6\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d"+
    "\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u4bda\0\u4c23\0\u4c6c\0\u4cb5"+
    "\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u01b6\0\u4e6b\0\u4eb4"+
    "\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3\0\u50fc"+
    "\0\u5145\0\u518e\0\u51d7\0\u5220\0\u5269\0\u52b2\0\u52fb\0\u5344"+
    "\0\u538d\0\u53d6\0\u541f\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u558c"+
    "\0\u55d5\0\u561e\0\u5667\0\u56b0\0\u56f9\0\u5742\0\u578b\0\u57d4"+
    "\0\u581d\0\u0323\0\u5866\0\u58af\0\u58f8\0\u5941\0\u598a\0\u59d3"+
    "\0\u5a1c\0\u5a65\0\u5aae\0\u5af7\0\u5b40\0\u5b89\0\u0323\0\u0323"+
    "\0\u0323\0\u0323\0\u5bd2\0\u0323\0\u5c1b\0\u5c64\0\u5cad\0\u5cf6"+
    "\0\u5d3f\0\u5d88\0\u5dd1\0\u5e1a\0\u5e63\0\u5eac\0\u5ef5\0\u5f3e"+
    "\0\u5f87\0\u5fd0\0\u6019\0\u0323\0\u6062\0\u60ab\0\u60f4\0\u613d"+
    "\0\u6186\0\u61cf\0\u6218\0\u6261\0\u62aa\0\u62f3\0\u633c\0\u6385"+
    "\0\u63ce\0\u6417\0\u6460\0\u01b6\0\u64a9\0\u64f2\0\u653b\0\u6584"+
    "\0\u65cd\0\u6616\0\u665f\0\u66a8\0\u66f1\0\u673a\0\u6783\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u67cc\0\u01b6\0\u6815\0\u685e\0\u68a7\0\u68f0"+
    "\0\u6939\0\u6982\0\u69cb\0\u6a14\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38"+
    "\0\u01b6\0\u6b81\0\u6bca\0\u6c13\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37"+
    "\0\u6d80\0\u6dc9\0\u6e12\0\u6e5b\0\u6ea4\0\u6eed\0\u6f36\0\u6f7f"+
    "\0\u1289\0\u6fc8\0\u1289\0\u1289\0\u7011\0\u705a\0\u70a3\0\u70ec"+
    "\0\u7135\0\u717e\0\u71c7\0\u7210\0\u7259\0\u72a2\0\u72eb\0\u7334"+
    "\0\u0323\0\u737d\0\u0323\0\u73c6\0\u0323\0\u740f\0\u7458\0\u0323"+
    "\0\u74a1\0\u74ea\0\u7533\0\u0323\0\u757c\0\u75c5\0\u760e\0\u7657"+
    "\0\u76a0\0\u76e9\0\u7732\0\u777b\0\u77c4\0\u780d\0\u7856\0\u789f"+
    "\0\u78e8\0\u7931\0\u797a\0\u79c3\0\u7a0c\0\u0323\0\u7a55\0\u7a9e"+
    "\0\u7ae7\0\u7b30\0\u01b6\0\u7b79\0\u01b6\0\u7bc2\0\u01b6\0\u7c0b"+
    "\0\u7c54\0\u01b6\0\u7c9d\0\u7ce6\0\u01b6\0\u7d2f\0\u7d78\0\u7dc1"+
    "\0\u7e0a\0\u7e53\0\u7e9c\0\u7ee5\0\u7f2e\0\u7f77\0\u7fc0\0\u8009"+
    "\0\u8052\0\u809b\0\u80e4\0\u01b6\0\u812d\0\u1289\0\u8176\0\u81bf"+
    "\0\u1289\0\u1289\0\u1289\0\u8208\0\u8251\0\u829a\0\u82e3\0\u832c"+
    "\0\u8375\0\u0323\0\u0323\0\u83be\0\u8407\0\u8450\0\u8499\0\u84e2"+
    "\0\u852b\0\u8574\0\u85bd\0\u8606\0\u864f\0\u0323\0\u0323\0\u8698"+
    "\0\u86e1\0\u872a\0\u8773\0\u0323\0\u0323\0\u0323\0\u87bc\0\u0323"+
    "\0\u8805\0\u884e\0\u01b6\0\u01b6\0\u8897\0\u88e0\0\u8929\0\u8972"+
    "\0\u89bb\0\u01b6\0\u8a04\0\u8a4d\0\u01b6\0\u01b6\0\u01b6\0\u8a96"+
    "\0\u01b6\0\u8adf\0\u8b28\0\u8b71\0\u1289\0\u8bba\0\u1289\0\u1289"+
    "\0\u8c03\0\u0323\0\u8c4c\0\u8c95\0\u8cde\0\u0323\0\u8d27\0\u8d70"+
    "\0\u8db9\0\u0323\0\u0323\0\u8e02\0\u8e4b\0\u8e94\0\u01b6\0\u8edd"+
    "\0\u8f26\0\u01b6\0\u01b6\0\u8f6f\0\u1289\0\u8fb8\0\u1289\0\u9001"+
    "\0\u0323\0\u904a\0\u9093\0\u90dc\0\u9125\0\u916e\0\u91b7\0\u9200"+
    "\0\u9249\0\u9292\0\u92db\0\u9324\0\u936d\0\u93b6\0\u93ff\0\u9448"+
    "\0\u9491\0\u94da\0\u01b6\0\u9523\0\u956c\0\u95b5\0\u95fe\0\u9647"+
    "\0\u9690\0\u96d9\0\u9722\0\u976b\0\u97b4\0\u0323\0\u97fd\0\u9846"+
    "\0\u988f\0\u98d8\0\u9921\0\u996a\0\u99b3\0\u99fc\0\u9a45\0\u9a8e"+
    "\0\u9ad7\0\u1289\0\u9b20\0\u0323\0\u9b69\0\u9bb2\0\u9bfb\0\u9c44"+
    "\0\u9c8d\0\u9cd6\0\u9d1f\0\u9d68\0\u9db1\0\u9dfa\0\u9e43\0\u9e8c"+
    "\0\u9ed5\0\u9f1e\0\u9f67\0\u9fb0\0\u9ff9\0\ua042\0\ua08b\0\ua0d4"+
    "\0\ua11d\0\ua166\0\ua1af\0\ua1f8\0\ua241\0\ua28a\0\ua2d3\0\ua31c"+
    "\0\ua365\0\ua3ae\0\ua3f7\0\ua440\0\ua489\0\ua4d2\0\ua51b\0\ua564"+
    "\0\ua5ad\0\ua5f6\0\ua63f\0\ua688\0\ua6d1\0\ua71a\0\ua763\0\ua7ac"+
    "\0\ua7f5\0\ua83e\0\ua887\0\ua8d0\0\ua919\0\ua962\0\ua9ab\0\ua9f4"+
    "\0\uaa3d\0\uaa86\0\uaacf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[707];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\5\10\1\11\1\10\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\3\14\1\7\1\10\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\12\1\26\1\27\1\30\1\14"+
    "\1\31\1\32\1\33\2\12\2\14\1\12\6\14\1\34"+
    "\1\35\1\36\1\37\1\14\1\40\2\14\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\7\1\10\1\66\1\10\1\67"+
    "\1\66\1\70\1\67\1\7\1\71\1\7\1\72\1\73"+
    "\1\74\4\7\1\10\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\2\7\1\103\1\104\1\7\1\105\1\106\1\107"+
    "\13\7\1\110\1\111\1\112\1\113\1\7\1\114\2\7"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\11\115\1\116\1\117"+
    "\1\115\1\120\4\117\2\115\1\117\1\121\1\122\1\117"+
    "\1\123\1\124\1\115\5\117\1\125\1\117\2\115\2\117"+
    "\1\115\16\117\34\115\1\126\112\115\2\127\1\115\5\127"+
    "\2\115\6\127\1\115\7\127\2\115\2\127\1\115\16\127"+
    "\25\115\2\130\2\131\105\130\112\0\5\10\1\0\1\10"+
    "\12\0\1\10\74\0\1\132\67\0\1\133\22\0\1\12"+
    "\2\134\1\135\15\0\1\12\7\0\2\12\2\0\1\12"+
    "\53\0\3\14\1\0\10\14\1\136\2\14\1\137\4\14"+
    "\1\140\1\14\1\141\22\14\1\142\2\14\35\0\3\14"+
    "\1\0\50\14\35\0\1\143\20\0\1\143\7\0\2\143"+
    "\2\0\1\143\53\0\3\14\1\0\17\14\1\144\21\14"+
    "\1\145\6\14\35\0\3\14\1\0\1\146\7\14\1\147"+
    "\2\14\1\150\3\14\1\151\21\14\1\152\6\14\35\0"+
    "\1\14\1\153\1\14\1\0\10\14\1\136\13\14\1\154"+
    "\14\14\1\155\6\14\35\0\3\14\1\0\11\14\1\156"+
    "\27\14\1\157\6\14\35\0\3\14\1\0\1\160\20\14"+
    "\1\161\23\14\1\162\2\14\35\0\3\14\1\0\1\163"+
    "\16\14\1\164\21\14\1\165\6\14\35\0\3\14\1\0"+
    "\1\14\1\166\6\14\1\136\2\14\1\167\2\14\1\170"+
    "\1\14\1\140\1\14\1\171\22\14\1\172\2\14\35\0"+
    "\3\14\1\0\10\14\1\136\1\173\1\14\1\174\2\14"+
    "\1\26\22\14\1\175\6\14\35\0\3\14\1\0\17\14"+
    "\1\176\30\14\35\0\3\14\1\0\12\14\1\177\7\14"+
    "\1\200\25\14\35\0\3\14\1\0\11\14\1\201\12\14"+
    "\1\202\7\14\1\203\3\14\1\204\7\14\35\0\1\14"+
    "\1\205\1\14\1\0\13\14\1\206\3\14\1\207\1\210"+
    "\17\14\1\211\1\14\1\212\5\14\35\0\1\14\1\213"+
    "\1\14\1\0\17\14\1\214\30\14\35\0\3\14\1\0"+
    "\11\14\1\215\36\14\35\0\3\14\1\0\10\14\1\147"+
    "\6\14\1\216\30\14\35\0\1\14\1\217\1\14\1\0"+
    "\50\14\35\0\3\14\1\0\40\14\1\220\7\14\35\0"+
    "\3\14\1\0\41\14\1\221\6\14\35\0\3\14\1\0"+
    "\17\14\1\222\21\14\1\223\6\14\123\0\1\224\110\0"+
    "\1\225\110\0\1\226\1\0\1\227\106\0\1\230\2\0"+
    "\1\231\105\0\1\232\110\0\1\233\4\0\1\234\103\0"+
    "\1\235\5\0\1\236\102\0\1\237\6\0\1\240\101\0"+
    "\1\241\7\0\1\242\100\0\1\243\10\0\1\244\77\0"+
    "\1\245\13\0\1\10\1\67\1\10\2\67\1\0\1\67"+
    "\12\0\1\10\164\0\1\133\41\0\1\246\6\0\1\247"+
    "\22\0\1\250\62\0\1\251\21\0\1\252\47\0\1\253"+
    "\7\0\1\254\2\0\1\255\3\0\1\256\21\0\1\257"+
    "\44\0\1\260\26\0\1\261\14\0\1\262\110\0\1\263"+
    "\47\0\1\264\20\0\1\265\23\0\1\266\43\0\1\267"+
    "\16\0\1\270\21\0\1\271\50\0\1\272\43\0\1\273"+
    "\54\0\1\274\1\0\1\275\25\0\1\276\61\0\1\277"+
    "\7\0\1\300\77\0\1\301\12\0\1\302\7\0\1\303"+
    "\3\0\1\304\45\0\1\305\15\0\1\306\3\0\1\307"+
    "\1\310\17\0\1\311\1\0\1\312\43\0\1\313\21\0"+
    "\1\314\102\0\1\315\107\0\1\254\6\0\1\316\66\0"+
    "\1\317\153\0\1\320\111\0\1\321\66\0\1\322\21\0"+
    "\1\323\43\0\3\117\1\0\45\117\1\324\2\117\35\0"+
    "\3\117\1\0\50\117\35\0\3\117\1\0\13\117\1\325"+
    "\34\117\35\0\3\117\1\0\11\117\1\326\36\117\35\0"+
    "\3\117\1\0\1\327\20\117\1\330\2\117\1\331\20\117"+
    "\1\332\2\117\35\0\3\117\1\0\1\117\1\333\43\117"+
    "\1\334\2\117\35\0\3\117\1\0\11\117\1\335\36\117"+
    "\35\0\3\117\1\0\24\117\1\336\23\117\34\0\1\126"+
    "\111\0\3\127\1\0\50\127\25\0\2\337\2\131\105\337"+
    "\2\132\2\0\105\132\10\0\3\14\1\0\11\14\1\156"+
    "\36\14\35\0\3\14\1\0\16\14\1\170\26\14\1\340"+
    "\2\14\35\0\3\14\1\0\11\14\1\341\36\14\35\0"+
    "\1\14\1\342\1\14\1\0\13\14\1\145\3\14\1\343"+
    "\30\14\35\0\3\14\1\0\13\14\1\344\6\14\1\345"+
    "\25\14\35\0\1\143\3\0\1\346\2\347\1\350\11\0"+
    "\1\143\7\0\2\143\2\0\1\143\53\0\3\14\1\0"+
    "\34\14\1\351\13\14\35\0\3\14\1\0\45\14\1\352"+
    "\2\14\35\0\3\14\1\0\41\14\1\353\6\14\35\0"+
    "\3\14\1\0\11\14\1\354\36\14\35\0\3\14\1\0"+
    "\1\355\20\14\1\356\26\14\35\0\3\14\1\0\1\357"+
    "\47\14\35\0\3\14\1\0\24\14\1\360\23\14\35\0"+
    "\3\14\1\0\1\14\1\361\46\14\35\0\3\14\1\0"+
    "\11\14\1\362\36\14\35\0\3\14\1\0\41\14\1\363"+
    "\6\14\35\0\3\14\1\0\12\14\1\364\35\14\35\0"+
    "\3\14\1\0\13\14\1\365\34\14\35\0\3\14\1\0"+
    "\22\14\1\366\25\14\35\0\3\14\1\0\20\14\1\367"+
    "\27\14\35\0\1\14\1\200\1\14\1\0\50\14\35\0"+
    "\3\14\1\0\17\14\1\370\30\14\35\0\3\14\1\0"+
    "\22\14\1\371\25\14\35\0\3\14\1\0\16\14\1\372"+
    "\26\14\1\373\2\14\35\0\3\14\1\0\16\14\1\170"+
    "\31\14\35\0\3\14\1\0\17\14\1\374\30\14\35\0"+
    "\1\14\1\342\1\14\1\0\17\14\1\343\30\14\35\0"+
    "\3\14\1\0\1\375\17\14\1\376\2\14\1\377\15\14"+
    "\1\u0100\6\14\35\0\3\14\1\0\1\14\1\u0101\46\14"+
    "\35\0\3\14\1\0\22\14\1\u0102\25\14\35\0\1\14"+
    "\1\u0103\1\14\1\0\50\14\35\0\3\14\1\0\20\14"+
    "\1\u0104\27\14\35\0\3\14\1\0\20\14\1\u0105\27\14"+
    "\35\0\3\14\1\0\16\14\1\u0106\31\14\35\0\3\14"+
    "\1\0\16\14\1\u0107\2\14\1\u0108\26\14\35\0\1\14"+
    "\1\u0109\1\14\1\0\50\14\35\0\3\14\1\0\23\14"+
    "\1\u010a\24\14\35\0\3\14\1\0\13\14\1\u010b\34\14"+
    "\35\0\3\14\1\0\7\14\1\u010c\13\14\1\u010d\24\14"+
    "\35\0\3\14\1\0\47\14\1\u010e\35\0\3\14\1\0"+
    "\16\14\1\u010f\31\14\35\0\3\14\1\0\17\14\1\u0110"+
    "\4\14\1\u0111\23\14\35\0\3\14\1\0\17\14\1\u0112"+
    "\21\14\1\u0113\6\14\35\0\3\14\1\0\13\14\1\u0114"+
    "\34\14\35\0\3\14\1\0\7\14\1\u0115\40\14\35\0"+
    "\3\14\1\0\24\14\1\u0116\23\14\35\0\3\14\1\0"+
    "\20\14\1\u0117\1\14\1\u0118\25\14\35\0\3\14\1\0"+
    "\1\u0119\47\14\35\0\3\14\1\0\20\14\1\u011a\27\14"+
    "\35\0\3\14\1\0\13\14\1\u011b\34\14\35\0\3\14"+
    "\1\0\20\14\1\u011c\27\14\35\0\3\14\1\0\16\14"+
    "\1\u011d\31\14\35\0\3\14\1\0\13\14\1\u011e\34\14"+
    "\123\0\1\u011f\110\0\1\u0120\73\0\1\u0121\56\0\1\252"+
    "\110\0\1\u0122\6\0\1\u0123\122\0\1\u0124\121\0\1\u0125"+
    "\104\0\1\u0126\60\0\1\u0127\77\0\1\u0128\20\0\1\u0129"+
    "\67\0\1\u012a\134\0\1\u012b\65\0\1\u012c\120\0\1\u012d"+
    "\140\0\1\u012e\62\0\1\u012f\117\0\1\u0130\106\0\1\u0131"+
    "\65\0\1\300\132\0\1\u0132\113\0\1\u0133\104\0\1\u0134"+
    "\26\0\1\u0135\43\0\1\u0136\17\0\1\u0137\2\0\1\u0138"+
    "\15\0\1\u0139\50\0\1\u013a\131\0\1\u013b\63\0\1\u013c"+
    "\133\0\1\u013d\106\0\1\u013e\110\0\1\u013f\67\0\1\u0140"+
    "\136\0\1\u0141\100\0\1\u0142\120\0\1\u0143\134\0\1\u0144"+
    "\57\0\1\u0145\111\0\1\u0146\4\0\1\u0147\103\0\1\u0148"+
    "\21\0\1\u0149\62\0\1\u014a\104\0\1\u014b\125\0\1\u014c"+
    "\104\0\1\u014d\1\0\1\u014e\66\0\1\u014f\130\0\1\u0150"+
    "\103\0\1\u0151\115\0\1\u0152\106\0\1\u0153\105\0\1\u0154"+
    "\71\0\3\117\1\0\14\117\1\u0155\33\117\35\0\3\117"+
    "\1\0\45\117\1\u0156\2\117\35\0\3\117\1\0\24\117"+
    "\1\u0157\23\117\35\0\3\117\1\0\13\117\1\u0158\6\117"+
    "\1\u0159\25\117\35\0\3\117\1\0\20\117\1\u015a\27\117"+
    "\35\0\3\117\1\0\24\117\1\u015b\23\117\35\0\3\117"+
    "\1\0\14\117\1\u015c\33\117\35\0\3\117\1\0\14\117"+
    "\1\u015d\30\117\1\u015e\2\117\35\0\3\117\1\0\12\117"+
    "\1\u015f\35\117\35\0\3\117\1\0\1\117\1\u0160\46\117"+
    "\35\0\3\117\1\0\17\117\1\u0161\30\117\35\0\3\14"+
    "\1\0\20\14\1\u0162\27\14\35\0\3\14\1\0\21\14"+
    "\1\u0108\26\14\35\0\3\14\1\0\7\14\1\u010c\40\14"+
    "\35\0\3\14\1\0\16\14\1\u0163\31\14\35\0\3\14"+
    "\1\0\1\14\1\u0164\37\14\1\u0165\6\14\35\0\3\14"+
    "\1\0\13\14\1\u0166\34\14\42\0\1\347\111\0\1\347"+
    "\102\0\3\14\1\0\41\14\1\u0167\6\14\35\0\3\14"+
    "\1\0\43\14\1\u0106\4\14\35\0\3\14\1\0\17\14"+
    "\1\u0168\30\14\35\0\3\14\1\0\12\14\1\u0169\35\14"+
    "\35\0\3\14\1\0\20\14\1\u016a\27\14\35\0\3\14"+
    "\1\0\11\14\1\u016b\36\14\35\0\3\14\1\0\22\14"+
    "\1\u016c\25\14\35\0\3\14\1\0\1\14\1\u016d\46\14"+
    "\35\0\3\14\1\0\17\14\1\u016e\30\14\35\0\3\14"+
    "\1\0\1\u016f\47\14\35\0\3\14\1\0\15\14\1\u0170"+
    "\10\14\1\u0170\2\14\1\u0170\16\14\35\0\3\14\1\0"+
    "\14\14\1\u0171\33\14\35\0\3\14\1\0\11\14\1\u0172"+
    "\36\14\35\0\3\14\1\0\11\14\1\u0173\36\14\35\0"+
    "\3\14\1\0\22\14\1\u010b\25\14\35\0\3\14\1\0"+
    "\11\14\1\u0174\6\14\1\u0106\27\14\35\0\3\14\1\0"+
    "\16\14\1\u0175\31\14\35\0\3\14\1\0\20\14\1\u0176"+
    "\1\14\1\u0177\25\14\35\0\3\14\1\0\43\14\1\u0178"+
    "\4\14\35\0\3\14\1\0\13\14\1\u0179\34\14\35\0"+
    "\3\14\1\0\11\14\1\u017a\36\14\35\0\1\14\1\u017b"+
    "\1\14\1\0\50\14\35\0\1\14\1\u017c\1\14\1\0"+
    "\50\14\35\0\3\14\1\0\17\14\1\u017d\30\14\35\0"+
    "\3\14\1\0\12\14\1\u017e\35\14\35\0\3\14\1\0"+
    "\7\14\1\u017f\40\14\35\0\3\14\1\0\15\14\1\u0180"+
    "\10\14\1\u0180\2\14\1\u0180\16\14\35\0\3\14\1\0"+
    "\13\14\1\u0181\34\14\35\0\3\14\1\0\23\14\1\u0182"+
    "\24\14\35\0\3\14\1\0\20\14\1\u0183\27\14\35\0"+
    "\3\14\1\0\11\14\1\u0184\36\14\35\0\3\14\1\0"+
    "\11\14\1\u0185\36\14\35\0\3\14\1\0\22\14\1\u0106"+
    "\25\14\35\0\3\14\1\0\23\14\1\u0186\24\14\35\0"+
    "\3\14\1\0\11\14\1\u0187\36\14\35\0\3\14\1\0"+
    "\11\14\1\u0188\36\14\35\0\3\14\1\0\23\14\1\u0189"+
    "\24\14\35\0\3\14\1\0\20\14\1\u018a\27\14\35\0"+
    "\1\14\1\u018b\1\14\1\0\50\14\35\0\3\14\1\0"+
    "\24\14\1\u018c\23\14\35\0\3\14\1\0\24\14\1\u017b"+
    "\23\14\35\0\3\14\1\0\20\14\1\u018d\27\14\35\0"+
    "\3\14\1\0\1\u018a\47\14\35\0\3\14\1\0\20\14"+
    "\1\u018e\27\14\35\0\1\14\1\u018f\1\14\1\0\50\14"+
    "\35\0\3\14\1\0\41\14\1\u0190\6\14\35\0\3\14"+
    "\1\0\1\14\1\u0106\46\14\35\0\3\14\1\0\23\14"+
    "\1\377\24\14\35\0\3\14\1\0\1\u0191\47\14\35\0"+
    "\3\14\1\0\41\14\1\u0106\6\14\35\0\3\14\1\0"+
    "\11\14\1\u0192\36\14\35\0\3\14\1\0\45\14\1\u0193"+
    "\2\14\61\0\1\u0194\71\0\1\u0195\37\0\1\u0196\62\0"+
    "\1\u0197\136\0\1\u0198\112\0\1\u013e\64\0\1\u0199\103\0"+
    "\1\u019a\116\0\1\u019b\101\0\1\u019c\121\0\1\u019d\67\0"+
    "\1\u019e\126\0\1\u019f\71\0\1\u01a0\124\0\1\u01a1\105\0"+
    "\1\u01a2\110\0\1\u01a3\121\0\1\u0142\77\0\1\u01a4\6\0"+
    "\1\u013e\106\0\1\u01a5\112\0\1\u01a6\1\0\1\u01a7\101\0"+
    "\1\u01a8\106\0\1\u01a9\74\0\1\u01aa\110\0\1\u01ab\132\0"+
    "\1\u01ac\103\0\1\u01ad\105\0\1\u01ae\114\0\1\u01af\120\0"+
    "\1\u01b0\76\0\1\u01b1\110\0\1\u01b2\121\0\1\u013e\77\0"+
    "\1\u01b3\110\0\1\u01b4\122\0\1\u01b5\105\0\1\u01b6\65\0"+
    "\1\u01b7\137\0\1\u01b8\110\0\1\u01aa\104\0\1\u01b9\70\0"+
    "\1\u01b6\130\0\1\u01ba\65\0\1\u01bb\154\0\1\u01bc\50\0"+
    "\1\u013e\132\0\1\u0138\65\0\1\u01bd\151\0\1\u013e\60\0"+
    "\1\u01be\144\0\1\u01bf\37\0\3\117\1\0\11\117\1\u01c0"+
    "\36\117\35\0\3\117\1\0\11\117\1\u01c1\36\117\35\0"+
    "\3\117\1\0\22\117\1\u01c2\25\117\35\0\3\117\1\0"+
    "\1\117\1\u01c3\46\117\35\0\3\117\1\0\11\117\1\u01c4"+
    "\36\117\35\0\3\117\1\0\11\117\1\u01c5\36\117\35\0"+
    "\3\117\1\0\41\117\1\u01c6\6\117\35\0\3\117\1\0"+
    "\13\117\1\u01c7\34\117\35\0\3\117\1\0\11\117\1\u01c8"+
    "\36\117\35\0\3\117\1\0\14\117\1\u01c9\33\117\35\0"+
    "\3\117\1\0\1\u01ca\47\117\35\0\3\117\1\0\13\117"+
    "\1\u01cb\34\117\35\0\3\117\1\0\43\117\1\u01cc\4\117"+
    "\35\0\3\14\1\0\23\14\1\u01cd\24\14\35\0\3\14"+
    "\1\0\41\14\1\u01ce\6\14\35\0\3\14\1\0\45\14"+
    "\1\u0106\2\14\35\0\3\14\1\0\43\14\1\u01cf\4\14"+
    "\35\0\1\14\1\u01d0\1\14\1\0\50\14\35\0\3\14"+
    "\1\0\20\14\1\u01d1\27\14\35\0\3\14\1\0\15\14"+
    "\1\u0106\10\14\1\u0106\2\14\1\u0106\16\14\35\0\3\14"+
    "\1\0\11\14\1\u01d2\36\14\35\0\3\14\1\0\14\14"+
    "\1\u0106\33\14\35\0\3\14\1\0\11\14\1\u01d3\36\14"+
    "\35\0\3\14\1\0\11\14\1\u01d4\36\14\35\0\3\14"+
    "\1\0\46\14\1\u01d5\1\14\35\0\3\14\1\0\24\14"+
    "\1\u01d6\23\14\35\0\3\14\1\0\41\14\1\u0165\6\14"+
    "\35\0\3\14\1\0\13\14\1\u01d7\34\14\35\0\3\14"+
    "\1\0\20\14\1\u01d8\27\14\35\0\3\14\1\0\11\14"+
    "\1\u01d9\36\14\35\0\3\14\1\0\45\14\1\u01da\2\14"+
    "\35\0\3\14\1\0\24\14\1\u01db\23\14\35\0\3\14"+
    "\1\0\20\14\1\u0106\27\14\35\0\3\14\1\0\20\14"+
    "\1\u01dc\27\14\35\0\1\14\1\u01dd\1\14\1\0\50\14"+
    "\35\0\3\14\1\0\17\14\1\u01de\30\14\35\0\3\14"+
    "\1\0\1\u01df\47\14\35\0\3\14\1\0\21\14\1\u01e0"+
    "\26\14\35\0\3\14\1\0\10\14\1\u01da\37\14\35\0"+
    "\3\14\1\0\1\u01e1\47\14\35\0\1\14\1\u01e2\1\14"+
    "\1\0\50\14\35\0\3\14\1\0\14\14\1\u01e3\33\14"+
    "\35\0\3\14\1\0\17\14\1\u01e4\30\14\35\0\3\14"+
    "\1\0\24\14\1\u01e5\23\14\35\0\3\14\1\0\41\14"+
    "\1\u0119\6\14\35\0\3\14\1\0\1\u01e6\47\14\35\0"+
    "\3\14\1\0\13\14\1\u01e7\34\14\35\0\3\14\1\0"+
    "\12\14\1\u01e8\35\14\35\0\3\14\1\0\11\14\1\u01e9"+
    "\36\14\35\0\3\14\1\0\12\14\1\u01ea\35\14\35\0"+
    "\3\14\1\0\13\14\1\u01eb\34\14\35\0\3\14\1\0"+
    "\24\14\1\u01ec\23\14\35\0\1\14\1\u01ed\1\14\1\0"+
    "\50\14\35\0\3\14\1\0\11\14\1\u01ee\36\14\35\0"+
    "\3\14\1\0\22\14\1\u01ef\25\14\35\0\3\14\1\0"+
    "\1\375\47\14\102\0\1\u01f0\114\0\1\u013e\106\0\1\u01f1"+
    "\42\0\1\u01f2\133\0\1\u01f3\105\0\1\u013e\10\0\1\u013e"+
    "\2\0\1\u013e\70\0\1\u01f4\113\0\1\u013e\105\0\1\u01f5"+
    "\110\0\1\u01f6\145\0\1\u01f7\66\0\1\u01f8\125\0\1\u0196"+
    "\62\0\1\u01f9\115\0\1\u01fa\135\0\1\u01fb\67\0\1\u01fc"+
    "\104\0\1\u013e\110\0\1\u01fd\65\0\1\u01fe\132\0\1\u01ff"+
    "\71\0\1\u0200\120\0\1\u01fb\100\0\1\u0201\124\0\1\u0202"+
    "\120\0\1\u0203\125\0\1\u014f\47\0\1\u0204\123\0\1\u0205"+
    "\107\0\1\u0206\107\0\1\u0207\111\0\1\u0208\111\0\1\u0209"+
    "\121\0\1\u020a\61\0\1\u020b\124\0\1\u020c\121\0\1\u020d"+
    "\66\0\1\u0136\104\0\3\117\1\0\1\117\1\u020e\46\117"+
    "\35\0\3\117\1\0\13\117\1\u020f\34\117\35\0\3\117"+
    "\1\0\45\117\1\u0210\2\117\35\0\3\117\1\0\24\117"+
    "\1\u0211\23\117\35\0\3\117\1\0\1\117\1\u0212\46\117"+
    "\35\0\3\117\1\0\1\117\1\u0213\46\117\35\0\3\117"+
    "\1\0\11\117\1\u0214\36\117\35\0\1\117\1\u0215\1\117"+
    "\1\0\50\117\35\0\3\117\1\0\45\117\1\u0216\2\117"+
    "\35\0\3\117\1\0\16\117\1\u0217\31\117\35\0\3\14"+
    "\1\0\1\u0218\47\14\35\0\3\14\1\0\24\14\1\u0219"+
    "\23\14\35\0\3\14\1\0\45\14\1\356\2\14\35\0"+
    "\3\14\1\0\20\14\1\u021a\27\14\35\0\3\14\1\0"+
    "\24\14\1\u0106\23\14\35\0\3\14\1\0\24\14\1\u021b"+
    "\23\14\35\0\3\14\1\0\45\14\1\u021c\2\14\35\0"+
    "\3\14\1\0\45\14\1\u021d\2\14\35\0\3\14\1\0"+
    "\25\14\1\u021e\1\u021f\1\14\1\u0220\1\u0221\3\14\1\u0222"+
    "\12\14\35\0\3\14\1\0\11\14\1\u0106\36\14\35\0"+
    "\3\14\1\0\1\14\1\u0223\46\14\35\0\3\14\1\0"+
    "\1\u0224\47\14\35\0\3\14\1\0\24\14\1\u0225\23\14"+
    "\35\0\3\14\1\0\11\14\1\u0226\36\14\35\0\3\14"+
    "\1\0\15\14\1\u0227\10\14\1\u0227\2\14\1\u0227\16\14"+
    "\35\0\3\14\1\0\17\14\1\u0228\30\14\35\0\3\14"+
    "\1\0\24\14\1\u0229\23\14\35\0\3\14\1\0\11\14"+
    "\1\u0119\36\14\35\0\3\14\1\0\22\14\1\u022a\25\14"+
    "\35\0\3\14\1\0\23\14\1\u0106\24\14\35\0\3\14"+
    "\1\0\11\14\1\u022b\36\14\35\0\3\14\1\0\12\14"+
    "\1\u0106\35\14\35\0\3\14\1\0\20\14\1\u022c\27\14"+
    "\35\0\3\14\1\0\14\14\1\u022d\33\14\35\0\3\14"+
    "\1\0\40\14\1\u022e\7\14\35\0\3\14\1\0\20\14"+
    "\1\u022f\27\14\35\0\3\14\1\0\45\14\1\u0230\2\14"+
    "\35\0\3\14\1\0\24\14\1\u0231\23\14\35\0\3\14"+
    "\1\0\23\14\1\u0223\24\14\65\0\1\u0232\131\0\1\u0129"+
    "\63\0\1\u0233\114\0\1\u013e\110\0\1\u0234\131\0\1\u0235"+
    "\110\0\1\u0236\54\0\1\u013e\100\0\1\u0237\107\0\1\u0238"+
    "\134\0\1\u0239\75\0\1\u023a\116\0\1\u023b\102\0\1\u014f"+
    "\122\0\1\u013e\76\0\1\u023c\111\0\1\u013e\116\0\1\u023d"+
    "\104\0\1\u023e\134\0\1\u023f\70\0\1\u0240\135\0\1\u0241"+
    "\67\0\1\u0242\107\0\1\u0237\61\0\3\117\1\0\41\117"+
    "\1\u0243\6\117\35\0\3\117\1\0\22\117\1\u0244\25\117"+
    "\35\0\3\117\1\0\1\117\1\u0245\46\117\35\0\3\117"+
    "\1\0\14\117\1\u0246\33\117\35\0\3\117\1\0\11\117"+
    "\1\u0247\36\117\35\0\3\117\1\0\17\117\1\u0248\30\117"+
    "\35\0\3\14\1\0\11\14\1\u0249\36\14\35\0\3\14"+
    "\1\0\16\14\1\u024a\31\14\35\0\3\14\1\0\17\14"+
    "\1\u024b\30\14\35\0\1\14\1\u024c\1\14\1\0\50\14"+
    "\35\0\3\14\1\0\27\14\1\u024d\20\14\35\0\3\14"+
    "\1\0\27\14\1\u024e\20\14\35\0\1\14\1\u024f\1\14"+
    "\1\0\50\14\35\0\3\14\1\0\27\14\1\u0250\20\14"+
    "\35\0\1\14\1\u0251\1\14\1\0\50\14\35\0\3\14"+
    "\1\0\17\14\1\u0231\30\14\35\0\3\14\1\0\20\14"+
    "\1\u0252\27\14\35\0\3\14\1\0\14\14\1\u0253\33\14"+
    "\35\0\3\14\1\0\20\14\1\u01da\27\14\35\0\3\14"+
    "\1\0\11\14\1\u0254\36\14\35\0\3\14\1\0\22\14"+
    "\1\u0255\25\14\35\0\3\14\1\0\24\14\1\u0256\23\14"+
    "\35\0\3\14\1\0\13\14\1\u0175\34\14\35\0\3\14"+
    "\1\0\12\14\1\u01da\35\14\57\0\1\u0257\111\0\1\u0258"+
    "\66\0\1\u0259\132\0\1\u0242\111\0\1\u025a\104\0\1\u025b"+
    "\114\0\1\u01fb\114\0\1\u025c\77\0\1\u01a5\107\0\1\u01fb"+
    "\72\0\3\117\1\0\45\117\1\u025d\2\117\35\0\3\117"+
    "\1\0\13\117\1\u025e\34\117\35\0\3\117\1\0\11\117"+
    "\1\u025f\36\117\35\0\3\14\1\0\24\14\1\u0260\23\14"+
    "\35\0\3\14\1\0\1\u0106\47\14\35\0\3\14\1\0"+
    "\11\14\1\u0261\36\14\35\0\3\14\1\0\33\14\1\u0262"+
    "\14\14\35\0\3\14\1\0\7\14\1\u0263\40\14\35\0"+
    "\3\14\1\0\32\14\1\u0264\1\u0262\2\14\1\u0265\11\14"+
    "\35\0\3\14\1\0\1\14\1\u0266\46\14\35\0\3\14"+
    "\1\0\25\14\1\u0267\1\u0268\1\14\1\u0269\1\u026a\3\14"+
    "\1\u026b\12\14\35\0\3\14\1\0\44\14\1\u026c\3\14"+
    "\35\0\3\14\1\0\25\14\1\u026d\1\u026e\1\14\1\u026f"+
    "\1\u0270\3\14\1\u0271\1\14\1\u0272\10\14\41\0\1\u013e"+
    "\121\0\1\u0273\125\0\1\u0274\56\0\3\117\1\0\41\117"+
    "\1\u0275\6\117\35\0\3\14\1\0\25\14\1\u0276\1\u0277"+
    "\1\14\1\u0278\1\u0279\3\14\1\u0271\12\14\35\0\3\14"+
    "\1\0\24\14\1\u027a\23\14\35\0\3\14\1\0\11\14"+
    "\1\u024d\36\14\35\0\3\14\1\0\11\14\1\u027b\36\14"+
    "\35\0\3\14\1\0\37\14\1\u024d\10\14\35\0\3\14"+
    "\1\0\1\14\1\u027c\46\14\35\0\3\14\1\0\27\14"+
    "\1\u027d\20\14\35\0\3\14\1\0\27\14\1\u027e\20\14"+
    "\35\0\1\14\1\u027f\1\14\1\0\50\14\35\0\3\14"+
    "\1\0\27\14\1\u0280\20\14\35\0\1\14\1\u0281\1\14"+
    "\1\0\50\14\35\0\3\14\1\0\45\14\1\u0282\2\14"+
    "\35\0\3\14\1\0\27\14\1\u0283\20\14\35\0\3\14"+
    "\1\0\27\14\1\u0284\20\14\35\0\1\14\1\u0285\1\14"+
    "\1\0\50\14\35\0\3\14\1\0\27\14\1\u0286\20\14"+
    "\35\0\1\14\1\u0287\1\14\1\0\50\14\35\0\3\14"+
    "\1\0\40\14\1\u0288\7\14\70\0\1\u0289\55\0\3\117"+
    "\1\0\45\117\1\u028a\2\117\35\0\3\14\1\0\27\14"+
    "\1\u028b\20\14\35\0\3\14\1\0\27\14\1\u028c\20\14"+
    "\35\0\1\14\1\u028d\1\14\1\0\50\14\35\0\3\14"+
    "\1\0\27\14\1\u028e\20\14\35\0\3\14\1\0\24\14"+
    "\1\u028f\23\14\35\0\3\14\1\0\12\14\1\u0290\35\14"+
    "\35\0\3\14\1\0\11\14\1\u0291\36\14\35\0\3\14"+
    "\1\0\33\14\1\u0292\14\14\35\0\3\14\1\0\7\14"+
    "\1\u0293\40\14\35\0\3\14\1\0\32\14\1\u0294\1\u0292"+
    "\2\14\1\u0295\11\14\35\0\3\14\1\0\1\14\1\u0296"+
    "\46\14\35\0\3\14\1\0\23\14\1\u0297\24\14\35\0"+
    "\3\14\1\0\33\14\1\u0298\3\14\1\u0299\10\14\35\0"+
    "\3\14\1\0\32\14\1\u029a\15\14\35\0\3\14\1\0"+
    "\7\14\1\u029b\40\14\35\0\3\14\1\0\32\14\1\u029c"+
    "\1\u0298\2\14\1\u029d\1\u0299\10\14\35\0\3\14\1\0"+
    "\1\14\1\u029e\46\14\35\0\3\14\1\0\17\14\1\u029f"+
    "\30\14\73\0\1\u02a0\52\0\3\14\1\0\33\14\1\u02a1"+
    "\14\14\35\0\3\14\1\0\7\14\1\u02a2\40\14\35\0"+
    "\3\14\1\0\32\14\1\u02a3\1\u02a1\2\14\1\u029d\11\14"+
    "\35\0\3\14\1\0\17\14\1\u02a4\30\14\35\0\3\14"+
    "\1\0\20\14\1\u024e\27\14\35\0\3\14\1\0\24\14"+
    "\1\u024e\23\14\35\0\3\14\1\0\24\14\1\u02a5\23\14"+
    "\35\0\3\14\1\0\11\14\1\u027d\36\14\35\0\3\14"+
    "\1\0\11\14\1\u02a6\36\14\35\0\3\14\1\0\37\14"+
    "\1\u027d\10\14\35\0\3\14\1\0\1\14\1\u02a7\46\14"+
    "\35\0\1\14\1\u02a8\1\14\1\0\50\14\35\0\3\14"+
    "\1\0\24\14\1\u02a9\23\14\35\0\3\14\1\0\40\14"+
    "\1\u02aa\7\14\35\0\3\14\1\0\11\14\1\u02ab\36\14"+
    "\35\0\3\14\1\0\11\14\1\u0283\36\14\35\0\3\14"+
    "\1\0\11\14\1\u02ac\36\14\35\0\3\14\1\0\37\14"+
    "\1\u028b\10\14\35\0\3\14\1\0\1\14\1\u02ad\46\14"+
    "\35\0\3\14\1\0\14\14\1\u02ae\33\14\52\0\1\u02af"+
    "\73\0\3\14\1\0\24\14\1\u02b0\23\14\35\0\3\14"+
    "\1\0\11\14\1\u028b\36\14\35\0\3\14\1\0\11\14"+
    "\1\u02b1\36\14\35\0\3\14\1\0\34\14\1\u024e\13\14"+
    "\35\0\3\14\1\0\24\14\1\u02b2\23\14\35\0\3\14"+
    "\1\0\12\14\1\u02b3\35\14\35\0\3\14\1\0\11\14"+
    "\1\u02b4\36\14\35\0\3\14\1\0\20\14\1\u02b5\27\14"+
    "\35\0\3\14\1\0\24\14\1\u02b6\23\14\35\0\3\14"+
    "\1\0\17\14\1\u02b7\30\14\35\0\3\14\1\0\12\14"+
    "\1\u017b\35\14\35\0\3\14\1\0\12\14\1\u02b8\35\14"+
    "\35\0\3\14\1\0\11\14\1\u02b9\36\14\35\0\3\14"+
    "\1\0\41\14\1\u02ba\6\14\53\0\1\u01aa\72\0\3\14"+
    "\1\0\24\14\1\u02bb\23\14\35\0\3\14\1\0\12\14"+
    "\1\u02bc\35\14\35\0\3\14\1\0\17\14\1\u02bd\30\14"+
    "\35\0\3\14\1\0\20\14\1\u027e\27\14\35\0\3\14"+
    "\1\0\24\14\1\u027e\23\14\35\0\3\14\1\0\36\14"+
    "\1\u02be\11\14\35\0\3\14\1\0\17\14\1\u02bf\30\14"+
    "\35\0\3\14\1\0\14\14\1\u02c0\33\14\35\0\3\14"+
    "\1\0\20\14\1\u02c1\27\14\35\0\3\14\1\0\24\14"+
    "\1\u028c\23\14\35\0\3\14\1\0\42\14\1\u027e\5\14"+
    "\35\0\3\14\1\0\17\14\1\u02c2\30\14\35\0\3\14"+
    "\1\0\20\14\1\u028c\27\14\35\0\3\14\1\0\34\14"+
    "\1\u027e\13\14\35\0\3\14\1\0\37\14\1\u027e\10\14"+
    "\35\0\3\14\1\0\34\14\1\u02c1\13\14\35\0\3\14"+
    "\1\0\41\14\1\u02c3\6\14\35\0\3\14\1\0\37\14"+
    "\1\u0299\10\14\35\0\3\14\1\0\34\14\1\u028c\13\14"+
    "\35\0\3\14\1\0\42\14\1\u028c\5\14\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\31\1\12\11\17\1\1\11\22\1\1\11"+
    "\13\1\1\11\1\1\2\11\1\0\66\1\10\11\1\1"+
    "\1\11\1\1\7\11\24\0\1\11\1\1\2\0\1\1"+
    "\25\0\13\1\1\0\6\1\1\0\1\11\1\0\66\1"+
    "\2\11\12\0\1\11\13\0\1\1\6\0\1\11\21\0"+
    "\1\1\4\0\77\1\1\11\13\0\3\11\1\0\1\11"+
    "\14\0\1\11\16\0\60\1\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\16\0\1\11"+
    "\1\0\44\1\1\0\2\11\1\1\4\0\1\11\2\0"+
    "\3\11\1\0\1\11\1\0\24\1\1\11\2\0\2\11"+
    "\1\0\26\1\1\11\1\0\24\1\1\0\26\1\1\0"+
    "\16\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[707];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GlslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 106: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 107: break;
          case 3: 
            { return GlslTypes.SLASH;
            } 
            // fall through
          case 108: break;
          case 4: 
            { return GlslTypes.INTEGER_CONSTANT;
            } 
            // fall through
          case 109: break;
          case 5: 
            { return GlslTypes.IDENTIFIER;
            } 
            // fall through
          case 110: break;
          case 6: 
            { return GlslTypes.DOT;
            } 
            // fall through
          case 111: break;
          case 7: 
            { return GlslTypes.SEMICOLON;
            } 
            // fall through
          case 112: break;
          case 8: 
            { return GlslTypes.COLON;
            } 
            // fall through
          case 113: break;
          case 9: 
            { return GlslTypes.C_BRACKET_L;
            } 
            // fall through
          case 114: break;
          case 10: 
            { return GlslTypes.C_BRACKET_R;
            } 
            // fall through
          case 115: break;
          case 11: 
            { return GlslTypes.S_BRACKET_L;
            } 
            // fall through
          case 116: break;
          case 12: 
            { return GlslTypes.S_BRACKET_R;
            } 
            // fall through
          case 117: break;
          case 13: 
            { return GlslTypes.PAREN_L;
            } 
            // fall through
          case 118: break;
          case 14: 
            { return GlslTypes.PAREN_R;
            } 
            // fall through
          case 119: break;
          case 15: 
            { return GlslTypes.COMMA;
            } 
            // fall through
          case 120: break;
          case 16: 
            { yybegin(MACRO_KEYWORD); return GlslTypes.HASHTAG;
            } 
            // fall through
          case 121: break;
          case 17: 
            { return GlslTypes.EQUAL;
            } 
            // fall through
          case 122: break;
          case 18: 
            { return GlslTypes.STAR;
            } 
            // fall through
          case 123: break;
          case 19: 
            { return GlslTypes.PLUS;
            } 
            // fall through
          case 124: break;
          case 20: 
            { return GlslTypes.DASH;
            } 
            // fall through
          case 125: break;
          case 21: 
            { return GlslTypes.PERCENT;
            } 
            // fall through
          case 126: break;
          case 22: 
            { return GlslTypes.ANGLE_L;
            } 
            // fall through
          case 127: break;
          case 23: 
            { return GlslTypes.ANGLE_R;
            } 
            // fall through
          case 128: break;
          case 24: 
            { return GlslTypes.AMPERSAND;
            } 
            // fall through
          case 129: break;
          case 25: 
            { return GlslTypes.CARET;
            } 
            // fall through
          case 130: break;
          case 26: 
            { return GlslTypes.VERTICAL_BAR;
            } 
            // fall through
          case 131: break;
          case 27: 
            { return GlslTypes.EXCLAMATION;
            } 
            // fall through
          case 132: break;
          case 28: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 133: break;
          case 29: 
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 134: break;
          case 30: 
            { yybegin(YYINITIAL); return GlslTypes.IDENTIFIER;
            } 
            // fall through
          case 135: break;
          case 31: 
            { yybegin(MACRO_DEFINE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 136: break;
          case 32: 
            { yybegin(TO_LINE_END); return GlslTypes.IDENTIFIER;
            } 
            // fall through
          case 137: break;
          case 33: 
            { yybegin(YYINITIAL); return GlslTypes.MACRO_TO_END;
            } 
            // fall through
          case 138: break;
          case 34: 
            { return GlslTypes.COMMENT;
            } 
            // fall through
          case 139: break;
          case 35: 
            { return GlslTypes.DIV_ASSIGN;
            } 
            // fall through
          case 140: break;
          case 36: 
            { return GlslTypes.FLOAT_CONSTANT;
            } 
            // fall through
          case 141: break;
          case 37: 
            { return GlslTypes.IF;
            } 
            // fall through
          case 142: break;
          case 38: 
            { return GlslTypes.IN;
            } 
            // fall through
          case 143: break;
          case 39: 
            { return GlslTypes.DO;
            } 
            // fall through
          case 144: break;
          case 40: 
            { return GlslTypes.EQ_OP;
            } 
            // fall through
          case 145: break;
          case 41: 
            { return GlslTypes.MUL_ASSIGN;
            } 
            // fall through
          case 146: break;
          case 42: 
            { return GlslTypes.ADD_ASSIGN;
            } 
            // fall through
          case 147: break;
          case 43: 
            { return GlslTypes.INCREMENT;
            } 
            // fall through
          case 148: break;
          case 44: 
            { return GlslTypes.SUB_ASSIGN;
            } 
            // fall through
          case 149: break;
          case 45: 
            { return GlslTypes.DECREMENT;
            } 
            // fall through
          case 150: break;
          case 46: 
            { return GlslTypes.MOD_ASSIGN;
            } 
            // fall through
          case 151: break;
          case 47: 
            { return GlslTypes.LE_OP;
            } 
            // fall through
          case 152: break;
          case 48: 
            { return GlslTypes.LEFT_OP;
            } 
            // fall through
          case 153: break;
          case 49: 
            { return GlslTypes.GE_OP;
            } 
            // fall through
          case 154: break;
          case 50: 
            { return GlslTypes.RIGHT_OP;
            } 
            // fall through
          case 155: break;
          case 51: 
            { return GlslTypes.AND_ASSIGN;
            } 
            // fall through
          case 156: break;
          case 52: 
            { return GlslTypes.AND_OP;
            } 
            // fall through
          case 157: break;
          case 53: 
            { return GlslTypes.XOR_ASSIGN;
            } 
            // fall through
          case 158: break;
          case 54: 
            { return GlslTypes.XOR_OP;
            } 
            // fall through
          case 159: break;
          case 55: 
            { return GlslTypes.OR_ASSIGN;
            } 
            // fall through
          case 160: break;
          case 56: 
            { return GlslTypes.OR_OP;
            } 
            // fall through
          case 161: break;
          case 57: 
            { return GlslTypes.NE_OP;
            } 
            // fall through
          case 162: break;
          case 58: 
            { yybegin(TO_LINE_END); return GlslTypes.IF;
            } 
            // fall through
          case 163: break;
          case 59: 
            { return GlslTypes.FOR;
            } 
            // fall through
          case 164: break;
          case 60: 
            { return GlslTypes.INT;
            } 
            // fall through
          case 165: break;
          case 61: 
            { return GlslTypes.RESERVED_FUTURE_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 62: 
            { return GlslTypes.OUT;
            } 
            // fall through
          case 167: break;
          case 63: 
            { return GlslTypes.LEFT_ASSIGN;
            } 
            // fall through
          case 168: break;
          case 64: 
            { return GlslTypes.RIGHT_ASSIGN;
            } 
            // fall through
          case 169: break;
          case 65: 
            { return GlslTypes.UINT;
            } 
            // fall through
          case 170: break;
          case 66: 
            { return GlslTypes.BOOL;
            } 
            // fall through
          case 171: break;
          case 67: 
            { return GlslTypes.NATIVE_VECTOR;
            } 
            // fall through
          case 172: break;
          case 68: 
            { return GlslTypes.VOID;
            } 
            // fall through
          case 173: break;
          case 69: 
            { return GlslTypes.ELSE;
            } 
            // fall through
          case 174: break;
          case 70: 
            { return GlslTypes.CASE;
            } 
            // fall through
          case 175: break;
          case 71: 
            { return GlslTypes.NATIVE_MATRIX;
            } 
            // fall through
          case 176: break;
          case 72: 
            { return GlslTypes.TRUE;
            } 
            // fall through
          case 177: break;
          case 73: 
            { yybegin(TO_LINE_END); return GlslTypes.LINE;
            } 
            // fall through
          case 178: break;
          case 74: 
            { yybegin(TO_LINE_END); return GlslTypes.ELIF;
            } 
            // fall through
          case 179: break;
          case 75: 
            { yybegin(TO_LINE_END); return GlslTypes.ELSE;
            } 
            // fall through
          case 180: break;
          case 76: 
            { return GlslTypes.FLOAT;
            } 
            // fall through
          case 181: break;
          case 77: 
            { return GlslTypes.FALSE;
            } 
            // fall through
          case 182: break;
          case 78: 
            { return GlslTypes.BREAK;
            } 
            // fall through
          case 183: break;
          case 79: 
            { return GlslTypes.CONST;
            } 
            // fall through
          case 184: break;
          case 80: 
            { return GlslTypes.INOUT;
            } 
            // fall through
          case 185: break;
          case 81: 
            { return GlslTypes.WHILE;
            } 
            // fall through
          case 186: break;
          case 82: 
            { yybegin(TO_LINE_END); return GlslTypes.UNDEF;
            } 
            // fall through
          case 187: break;
          case 83: 
            { yybegin(TO_LINE_END); return GlslTypes.ERROR;
            } 
            // fall through
          case 188: break;
          case 84: 
            { yybegin(TO_LINE_END); return GlslTypes.ENDIF;
            } 
            // fall through
          case 189: break;
          case 85: 
            { yybegin(TO_LINE_END); return GlslTypes.IFDEF;
            } 
            // fall through
          case 190: break;
          case 86: 
            { return GlslTypes.LAYOUT;
            } 
            // fall through
          case 191: break;
          case 87: 
            { return GlslTypes.BUFFER;
            } 
            // fall through
          case 192: break;
          case 88: 
            { return GlslTypes.DOUBLE;
            } 
            // fall through
          case 193: break;
          case 89: 
            { return GlslTypes.STRUCT;
            } 
            // fall through
          case 194: break;
          case 90: 
            { return GlslTypes.SHARED;
            } 
            // fall through
          case 195: break;
          case 91: 
            { return GlslTypes.SWITCH;
            } 
            // fall through
          case 196: break;
          case 92: 
            { return GlslTypes.RETURN;
            } 
            // fall through
          case 197: break;
          case 93: 
            { yybegin(TO_LINE_END); return GlslTypes.IFNDEF;
            } 
            // fall through
          case 198: break;
          case 94: 
            { yybegin(MACRO_SPACE_FIRST); return GlslTypes.DEFINE;
            } 
            // fall through
          case 199: break;
          case 95: 
            { yybegin(TO_LINE_END); return GlslTypes.PRAGMA;
            } 
            // fall through
          case 200: break;
          case 96: 
            { return GlslTypes.UNIFORM;
            } 
            // fall through
          case 201: break;
          case 97: 
            { return GlslTypes.NATIVE_IMAGES;
            } 
            // fall through
          case 202: break;
          case 98: 
            { return GlslTypes.DEFAULT;
            } 
            // fall through
          case 203: break;
          case 99: 
            { return GlslTypes.DISCARD;
            } 
            // fall through
          case 204: break;
          case 100: 
            { return GlslTypes.NATIVE_VULKAN_TEXTURE;
            } 
            // fall through
          case 205: break;
          case 101: 
            { yybegin(TO_LINE_END); return GlslTypes.VERSION;
            } 
            // fall through
          case 206: break;
          case 102: 
            { yybegin(TO_LINE_END); return GlslTypes.INCLUDE;
            } 
            // fall through
          case 207: break;
          case 103: 
            { return GlslTypes.CONTINUE;
            } 
            // fall through
          case 208: break;
          case 104: 
            { return GlslTypes.NATIVE_SAMPLER;
            } 
            // fall through
          case 209: break;
          case 105: 
            { yybegin(TO_LINE_END); return GlslTypes.EXTENSION;
            } 
            // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
