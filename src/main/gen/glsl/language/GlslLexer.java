/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package glsl.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import glsl.language.psi.GlslTypes;  // contain token we'll use


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>glsl.flex</tt>
 */
class GlslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17504 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\10\1\35\11\10\1\36\21\10\1\37\1\40\24"+
    "\10\1\7\3\10\1\23\1\41\1\7\4\10\1\42\1\43\4\0\1\44\1\45\1\26\3\10\2\46\1\26"+
    "\1\47\1\50\1\0\1\51\5\10\1\52\2\0\1\53\1\54\1\55\13\10\1\56\1\44\1\57\1\60"+
    "\1\53\1\61\1\26\1\62\1\63\3\10\3\0\1\64\12\10\1\65\1\0\1\66\1\26\1\53\1\67"+
    "\3\10\1\52\1\70\1\22\2\10\1\65\1\71\1\72\1\73\2\26\3\10\1\74\1\10\1\46\6\26"+
    "\2\10\1\31\1\75\2\26\1\76\5\0\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\53\1"+
    "\7\1\10\1\103\1\104\1\105\2\10\1\106\1\107\1\110\1\111\1\112\1\62\1\113\1"+
    "\102\1\53\1\114\1\115\1\116\1\117\1\105\2\10\1\106\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\53\1\127\1\26\1\116\1\36\1\35\2\10\1\106\1\130\1\110"+
    "\1\44\1\131\1\132\1\26\1\102\1\53\1\41\1\133\1\116\1\104\1\105\2\10\1\106"+
    "\1\130\1\110\1\111\1\123\1\134\1\113\1\102\1\53\1\41\1\26\1\135\1\136\1\137"+
    "\1\140\1\115\1\136\1\10\1\141\1\142\1\143\1\144\1\26\1\126\1\53\1\26\1\41"+
    "\1\145\1\31\1\106\2\10\1\106\1\10\1\146\1\147\1\143\1\150\1\46\1\102\1\53"+
    "\2\26\1\103\1\31\1\106\2\10\1\106\1\151\1\110\1\147\1\143\1\150\1\33\1\102"+
    "\1\53\1\152\1\26\1\145\1\31\1\106\4\10\1\153\1\147\1\154\1\155\1\42\1\102"+
    "\1\53\1\26\1\40\1\156\1\10\1\23\1\40\2\10\1\35\1\157\1\23\1\160\1\161\1\0"+
    "\1\126\1\53\1\162\1\26\1\7\5\10\1\163\1\164\1\165\1\166\1\53\1\167\4\26\1"+
    "\170\1\171\1\172\1\7\1\173\1\174\1\163\1\175\1\176\1\47\1\53\1\177\4\26\1"+
    "\132\2\26\1\200\1\53\1\167\1\201\1\202\1\10\1\7\3\10\1\27\1\43\1\0\1\147\1"+
    "\203\1\0\1\43\3\0\1\204\1\205\7\26\5\10\1\52\1\0\1\206\1\53\1\167\1\65\1\207"+
    "\1\210\1\211\1\212\1\10\1\213\1\214\1\53\1\215\4\10\1\36\1\21\5\10\1\216\51"+
    "\10\1\137\1\23\1\137\5\10\1\137\4\10\1\137\1\23\1\137\1\10\1\23\7\10\1\137"+
    "\10\10\1\217\4\26\2\10\2\26\12\10\2\75\1\7\114\10\1\104\2\10\1\7\2\10\1\46"+
    "\11\10\1\136\1\10\1\132\1\10\1\31\1\220\1\26\2\10\1\220\1\26\2\10\1\221\1"+
    "\26\1\10\1\31\1\222\1\26\6\10\1\223\3\0\1\224\1\225\1\53\1\167\3\26\1\226"+
    "\1\53\1\167\13\10\1\26\1\227\4\10\1\230\10\10\1\75\1\26\3\10\1\23\1\0\1\2"+
    "\1\0\1\2\1\126\1\53\3\10\1\75\1\27\1\26\5\10\1\114\3\10\1\25\1\53\1\167\4"+
    "\26\2\10\1\165\1\2\6\10\1\203\1\166\3\0\1\111\1\53\1\167\1\53\1\167\1\42\1"+
    "\26\1\0\1\47\10\26\1\231\5\10\1\223\1\0\1\231\1\114\1\53\1\167\1\26\1\232"+
    "\1\2\1\26\1\233\3\10\1\101\1\211\1\53\1\67\4\10\1\65\1\0\1\2\1\26\4\10\1\223"+
    "\2\0\1\26\1\53\1\234\1\53\1\67\3\10\1\75\1\10\1\132\10\26\1\235\2\0\1\236"+
    "\1\237\1\200\30\10\7\0\1\240\42\10\2\75\4\10\2\75\1\10\1\241\3\10\1\75\6\10"+
    "\1\31\1\176\1\242\1\27\1\243\1\114\1\10\1\27\1\242\1\27\1\26\1\232\3\26\1"+
    "\244\1\26\1\42\1\132\1\26\1\245\1\26\1\147\1\0\1\41\1\42\2\26\1\10\1\27\4"+
    "\10\2\26\1\0\1\204\1\246\1\0\1\247\1\26\1\250\1\40\1\157\1\251\1\30\1\252"+
    "\1\10\1\253\1\254\1\255\2\26\5\10\1\132\116\26\5\10\1\23\5\10\1\23\20\10\1"+
    "\27\1\256\1\257\1\26\4\10\1\36\1\21\7\10\1\42\1\26\1\62\2\10\1\23\1\26\10"+
    "\23\4\0\5\26\1\42\72\26\1\254\3\26\1\7\1\213\1\251\1\27\1\7\11\10\1\23\1\260"+
    "\1\7\12\10\1\216\1\254\4\10\1\23\1\7\12\10\1\23\2\26\3\10\1\46\6\26\170\10"+
    "\1\75\11\26\75\10\1\46\2\26\21\10\1\27\10\26\5\10\1\75\41\10\1\27\2\10\1\53"+
    "\1\261\2\26\5\10\1\165\1\76\1\262\3\10\1\65\12\10\1\200\3\26\1\42\1\10\1\40"+
    "\14\10\1\105\3\10\1\23\1\10\7\26\1\42\1\10\1\263\1\264\2\10\1\52\2\26\1\132"+
    "\6\10\1\114\1\26\1\265\5\10\1\223\1\0\1\47\1\26\1\53\1\167\2\0\1\265\1\266"+
    "\1\53\1\67\2\10\1\65\1\47\2\10\1\165\1\0\1\2\1\26\3\10\1\27\1\77\5\10\1\52"+
    "\1\0\1\247\1\42\1\53\1\167\1\267\1\10\1\53\1\270\5\10\1\101\1\166\1\26\1\264"+
    "\1\271\1\53\1\167\2\10\1\23\1\272\6\10\1\210\1\273\1\230\2\26\1\274\1\10\1"+
    "\52\1\275\1\26\3\276\1\26\2\23\5\10\1\216\1\75\1\26\16\10\1\52\1\277\1\53"+
    "\1\167\64\10\1\114\1\26\2\10\1\23\1\300\5\10\1\114\40\26\55\10\1\75\15\10"+
    "\1\25\4\26\1\23\1\26\1\300\1\301\1\10\1\106\1\23\1\176\1\302\15\10\1\25\3"+
    "\26\1\300\54\10\1\75\2\26\10\10\1\40\6\10\5\26\1\10\1\27\2\0\2\26\2\0\1\115"+
    "\2\26\1\254\3\26\1\41\1\31\20\10\1\303\1\245\1\26\1\53\1\167\1\7\2\10\1\117"+
    "\1\7\2\10\1\46\1\304\12\10\1\23\3\40\1\305\1\306\2\26\1\307\1\10\1\151\2\10"+
    "\1\23\2\10\1\310\1\10\1\75\1\10\1\75\4\26\17\10\1\46\10\26\6\10\1\27\20\26"+
    "\1\311\20\26\3\10\1\27\6\10\1\132\1\26\1\247\3\26\4\10\1\26\1\254\3\10\1\46"+
    "\4\10\1\65\1\312\3\10\1\75\4\10\1\114\1\10\1\251\5\26\23\10\1\75\1\53\1\167"+
    "\4\10\1\114\4\10\1\114\5\10\1\26\6\10\1\114\23\26\46\10\1\23\1\26\2\10\1\75"+
    "\1\26\1\10\23\26\1\75\1\106\4\10\1\36\1\313\2\10\1\75\1\26\2\10\1\23\1\26"+
    "\3\10\1\23\10\26\2\10\1\314\1\26\2\10\1\75\1\26\3\10\1\25\10\26\7\10\1\304"+
    "\10\26\1\315\1\76\1\151\1\7\2\10\1\114\1\122\4\26\3\10\1\27\3\10\1\27\4\26"+
    "\1\10\1\7\2\10\1\316\3\26\6\10\1\75\1\26\2\10\1\75\1\26\2\10\1\46\1\26\2\10"+
    "\1\25\15\26\11\10\1\132\6\26\6\10\1\46\1\26\6\10\1\46\41\26\1\233\6\10\1\0"+
    "\1\166\3\26\1\126\1\53\1\26\1\62\1\233\5\10\1\0\1\317\2\26\3\10\1\132\1\53"+
    "\1\167\1\233\3\10\1\165\1\0\1\320\1\53\2\26\4\10\1\321\1\26\1\233\5\10\1\52"+
    "\1\0\1\322\1\323\1\53\1\324\4\26\2\10\1\35\2\10\1\223\1\0\1\205\10\26\1\23"+
    "\1\252\1\10\1\36\1\10\1\132\5\10\1\165\1\0\1\312\1\53\1\167\1\145\1\104\1"+
    "\105\2\10\1\106\1\130\1\110\1\111\1\123\1\144\1\254\1\325\2\204\21\26\6\10"+
    "\1\203\1\0\1\206\1\46\1\53\1\167\4\26\6\10\2\0\1\326\1\26\1\53\1\167\24\26"+
    "\5\10\1\165\1\47\1\0\1\247\2\26\1\271\4\26\6\10\2\0\1\327\1\26\1\53\1\167"+
    "\4\26\5\10\1\52\1\0\1\26\1\53\1\167\6\26\3\10\1\330\1\0\1\2\1\53\1\167\54"+
    "\26\10\10\1\53\1\167\1\26\1\42\40\26\1\101\1\233\4\10\1\52\1\331\1\62\1\26"+
    "\1\101\1\77\4\10\1\243\1\213\1\0\1\200\4\26\7\10\1\132\40\26\1\10\1\106\3"+
    "\10\1\165\1\166\1\0\1\132\1\26\1\53\1\167\2\26\1\40\3\10\1\332\2\0\1\43\1"+
    "\166\11\26\1\23\1\35\4\10\1\333\1\334\1\214\1\26\1\0\1\200\24\26\63\10\1\25"+
    "\14\26\15\10\1\23\2\26\30\10\1\114\27\26\5\10\1\23\72\26\10\10\1\23\67\26"+
    "\7\10\1\132\3\10\1\23\1\53\1\167\14\26\3\10\1\75\1\204\1\26\6\10\1\166\1\26"+
    "\1\114\1\26\1\53\1\167\1\300\2\10\1\254\2\10\56\26\10\10\1\27\1\26\1\101\4"+
    "\0\1\166\1\26\1\62\1\233\1\10\10\26\1\25\3\26\75\10\1\27\2\26\36\10\1\46\41"+
    "\26\43\10\1\23\12\26\61\10\1\114\40\26\15\10\1\46\1\10\1\27\1\10\1\132\1\10"+
    "\1\335\1\2\127\26\1\336\1\337\2\0\1\340\1\2\3\26\1\341\22\26\1\323\67\26\12"+
    "\10\1\31\10\10\1\31\1\342\1\343\1\10\1\344\1\151\7\10\1\36\1\345\2\31\3\10"+
    "\1\346\1\176\1\40\1\106\51\10\1\75\3\10\1\106\2\10\1\216\3\10\1\216\2\10\1"+
    "\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\106\3\10\1\106\2\10\1\216\1\347\6"+
    "\53\6\0\1\166\1\232\5\0\1\204\1\311\1\26\1\350\2\26\1\232\1\43\1\0\52\26\1"+
    "\166\2\0\1\351\1\352\1\312\72\26\30\10\1\27\1\26\1\166\5\26\10\10\1\223\1"+
    "\312\1\53\1\167\24\26\1\151\3\10\1\170\1\7\1\216\1\353\1\250\1\354\1\170\1"+
    "\241\1\170\2\216\1\125\1\10\1\35\1\10\1\114\1\355\1\35\1\10\1\114\50\26\32"+
    "\10\1\23\5\26\106\10\1\27\1\26\33\10\1\75\120\10\1\25\1\26\146\10\1\132\3"+
    "\26\3\10\1\75\74\26\1\124\3\26\14\0\20\26\36\0\2\26");

  /* The ZZ_CMAP_A table has 1904 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\12\1\4\1\2\1\1\1\5\1\3\6\12\4\0\1\4\1\65\1\0\1\52\1\11\1\57\1\62\1\0\1"+
    "\47\1\50\1\54\1\55\1\51\1\56\1\10\1\6\2\7\3\23\5\7\1\42\1\41\1\60\1\53\1\61"+
    "\2\0\22\11\1\45\1\0\1\46\1\63\1\11\1\0\1\25\1\14\1\17\1\22\1\16\1\32\1\11"+
    "\1\37\1\20\1\11\1\40\1\33\1\24\1\31\1\30\2\11\1\35\1\34\1\26\1\21\1\15\1\36"+
    "\1\27\1\66\1\11\1\43\1\64\1\44\1\0\6\12\1\13\2\12\2\0\4\11\4\0\1\11\2\0\1"+
    "\12\7\0\1\11\4\0\1\11\5\0\7\11\1\0\2\11\4\0\4\11\16\0\5\11\7\0\1\11\1\0\1"+
    "\11\1\0\5\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\4\11"+
    "\1\0\13\11\1\0\3\11\1\0\5\12\2\0\6\11\1\0\1\11\15\0\1\11\1\0\15\12\1\0\1\12"+
    "\1\0\2\12\1\0\2\12\1\0\1\12\3\11\5\0\6\12\5\0\1\11\4\0\3\12\1\0\1\12\3\0\3"+
    "\11\5\12\12\7\4\0\2\11\1\12\13\11\1\0\1\11\7\12\2\11\2\12\1\0\4\12\2\11\2"+
    "\7\3\11\2\0\1\11\7\0\1\12\1\11\1\12\6\11\3\12\2\0\11\11\3\12\1\11\6\0\2\7"+
    "\6\11\4\12\2\11\2\0\2\12\1\11\11\12\1\11\3\12\1\11\5\12\2\0\1\11\3\12\4\0"+
    "\6\11\6\0\10\12\6\11\3\12\1\11\2\12\1\11\7\12\2\11\2\12\2\0\2\7\1\11\3\12"+
    "\1\0\10\11\2\0\2\11\2\0\6\11\1\0\7\11\1\0\1\11\3\0\4\11\2\0\1\12\1\11\7\12"+
    "\2\0\2\12\2\0\3\12\1\11\5\0\2\11\1\0\5\11\7\0\2\11\4\0\3\12\1\0\6\11\4\0\2"+
    "\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\12\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12"+
    "\7\0\4\11\1\0\1\11\7\0\2\7\2\12\3\11\1\12\2\0\1\11\1\0\2\11\1\0\3\11\2\12"+
    "\1\0\3\12\2\0\1\11\10\0\1\11\6\12\6\0\2\12\2\0\1\12\1\11\1\0\6\11\3\0\3\11"+
    "\1\0\4\11\3\0\2\11\1\0\1\11\1\0\4\11\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\11\6"+
    "\0\5\12\1\0\5\11\3\0\1\11\7\12\1\0\2\12\5\0\2\12\1\0\4\11\1\0\3\11\1\0\2\11"+
    "\5\0\3\11\2\12\1\11\3\12\1\0\4\12\1\11\5\0\3\11\1\12\2\0\2\12\1\0\7\11\1\0"+
    "\1\11\4\0\1\12\4\0\6\12\1\0\1\12\3\0\2\12\4\0\1\11\1\12\2\11\7\12\4\0\10\11"+
    "\10\12\1\0\2\7\7\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\3"+
    "\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\3\11\2\12\1\0\2\12\1\11\2\0\5\11\1\0\1"+
    "\11\1\0\2\7\2\0\4\11\2\12\13\0\1\12\1\0\1\12\1\0\1\12\4\0\2\12\5\11\10\12"+
    "\11\0\1\12\1\0\7\12\1\11\2\12\4\11\3\12\1\11\3\12\2\11\7\12\3\11\4\12\5\11"+
    "\14\12\1\11\1\12\2\7\4\12\2\0\3\11\1\0\7\11\2\0\3\12\2\11\3\12\3\0\2\11\2"+
    "\12\4\0\1\11\1\0\2\12\4\0\4\11\10\12\3\0\1\11\3\0\2\11\1\12\5\0\4\12\1\0\5"+
    "\11\2\12\2\11\1\12\1\11\5\0\5\12\3\11\3\0\10\12\5\11\2\7\3\0\3\11\3\12\1\0"+
    "\5\12\4\11\1\12\4\11\3\12\2\11\3\12\1\0\5\12\1\0\1\11\1\0\1\11\1\0\1\11\1"+
    "\0\1\11\2\0\3\11\1\0\6\11\2\0\2\11\2\1\5\12\5\0\1\11\4\0\1\12\3\0\4\12\11"+
    "\0\1\11\4\0\1\11\1\0\5\11\2\0\1\11\1\0\4\11\1\0\3\11\2\0\4\11\5\0\5\11\4\0"+
    "\1\11\4\0\4\11\3\12\2\11\5\0\2\12\2\0\3\11\2\7\2\11\4\0\6\12\1\0\3\11\1\12"+
    "\3\11\1\12\4\11\1\12\4\11\2\12\6\11\3\0\1\11\1\0\1\11\2\0\5\11\1\12\2\11\2"+
    "\7\5\11\1\0\4\11\2\12\4\0\1\11\3\12\2\11\1\12\5\11\2\12\3\0\3\11\4\0\3\11"+
    "\2\12\2\0\6\11\1\0\3\12\1\0\2\12\5\0\5\11\5\0\1\11\1\12\3\11\1\0\2\11\1\0"+
    "\7\11\2\0\1\12\6\0\2\11\2\0\3\11\3\0\2\11\3\0\2\11\2\0\3\12\4\0\3\11\1\0\2"+
    "\11\1\0\1\11\5\0\1\12\2\0\3\12\5\0\1\11\3\0\1\11\2\0\4\11\1\0\2\11\2\0\1\11"+
    "\3\12\1\0\2\12\1\0\5\11\2\12\1\0\3\12\2\0\1\12\2\0\5\12\1\0\2\7\3\11\1\12"+
    "\2\0\1\11\1\0\1\12\4\11\5\0\3\12\3\0\2\7\1\11\1\0\1\11\3\0\2\11\2\12\2\0\6"+
    "\12\2\11\1\0\1\11\1\12\3\0\1\11\3\0\2\11\3\0\5\12\1\11\4\12\3\0\6\12\1\11"+
    "\6\12\3\0\1\12\1\0\2\12\1\0\1\12\2\11\3\0\2\12\6\0\5\12\3\0\6\12\2\0\3\12"+
    "\2\0\4\12\4\0\1\11\2\0\2\11\2\0\4\11\1\0\4\11\1\0\1\11\1\0\6\11\2\0\5\11\1"+
    "\0\4\11\1\0\4\11\2\0\2\7\4\0\1\12\3\0\1\12\2\0\7\12\1\0\2\12\1\0\2\12\1\0"+
    "\1\11\1\0\1\11\5\0\1\11\1\0\1\11\1\0\3\11\1\0\3\11\1\0\3\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\20\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\34\1\3\1\5\16\1"+
    "\1\35\1\36\1\0\1\37\11\6\1\40\1\41\4\6"+
    "\1\42\14\6\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\7\0\1\40\1\41\4\0"+
    "\1\42\13\0\10\6\1\65\7\6\1\66\1\6\1\67"+
    "\7\6\1\70\1\71\7\0\1\65\6\0\1\66\1\0"+
    "\1\67\7\0\1\6\1\72\1\6\1\73\1\74\1\75"+
    "\1\76\2\6\1\77\4\6\1\100\1\101\10\6\1\0"+
    "\1\72\1\0\1\74\1\75\1\76\2\0\1\77\4\0"+
    "\1\101\10\0\1\6\1\102\1\6\1\103\5\6\1\104"+
    "\1\105\5\6\1\106\1\0\1\102\1\0\1\103\4\0"+
    "\1\104\1\105\5\0\1\106\1\107\4\6\1\110\1\100"+
    "\1\111\1\112\1\113\1\114\1\115\1\107\4\0\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\6\1\116\1\117"+
    "\1\120\1\0\1\116\1\117\1\120\2\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\245\0\u074e\0\u0785\0\156"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\156"+
    "\0\u014a\0\u014a\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0181\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\u10c2\0\156"+
    "\0\u10f9\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\156\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u0181\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923"+
    "\0\u195a\0\u0181\0\u1991\0\u0181\0\u19c8\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\156\0\156\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\156\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u1ddd\0\156\0\u1e14\0\156\0\u1e4b\0\u1e82"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u0181\0\u2003"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u203a\0\u2071\0\u0181\0\u20a8"+
    "\0\u20df\0\u2116\0\u214d\0\u2184\0\u0181\0\u21bb\0\u21f2\0\u2229"+
    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\156\0\u23aa"+
    "\0\156\0\156\0\156\0\u23e1\0\u2418\0\156\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\156\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u0181\0\u271a\0\u0181\0\u2751"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u0181\0\u0181\0\u2864\0\u289b"+
    "\0\u28d2\0\u2909\0\u2940\0\u0181\0\u2977\0\156\0\u29ae\0\156"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\156\0\156\0\u2ac1\0\u2af8"+
    "\0\u2b2f\0\u2b66\0\u2b9d\0\156\0\u0181\0\u2bd4\0\u2c0b\0\u2c42"+
    "\0\u2c79\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\156\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\u2d8c\0\u0181\0\u0181\0\u0181\0\u2dc3"+
    "\0\156\0\156\0\156\0\u0181\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\5\4\1\5\1\6\1\7\1\10\1\3\1\4"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\6"+
    "\1\20\1\10\1\21\1\10\1\22\1\10\1\23\1\24"+
    "\1\25\1\26\1\27\2\10\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\10\1\3\1\4\1\55\1\4\1\56\1\55"+
    "\1\57\1\3\1\60\2\3\1\4\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\3\3\1\70\1\3\1\71"+
    "\1\3\1\72\1\73\1\74\1\75\1\76\2\3\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\3\70\0\5\4\5\0"+
    "\1\4\61\0\1\77\44\0\1\100\22\0\1\6\1\101"+
    "\12\0\1\6\52\0\1\102\13\0\1\102\52\0\1\10"+
    "\1\0\30\10\25\0\1\10\7\0\1\10\1\0\4\10"+
    "\1\103\3\10\1\104\6\10\1\105\4\10\1\106\3\10"+
    "\25\0\1\10\7\0\1\10\1\0\5\10\1\107\11\10"+
    "\1\110\10\10\25\0\1\10\7\0\1\10\1\0\22\10"+
    "\1\111\5\10\25\0\1\10\7\0\1\10\1\0\14\10"+
    "\1\112\2\10\1\113\10\10\25\0\1\10\7\0\1\10"+
    "\1\0\4\10\1\103\13\10\1\114\1\115\6\10\25\0"+
    "\1\10\7\0\1\10\1\0\4\10\1\103\2\10\1\116"+
    "\10\10\1\117\7\10\25\0\1\10\7\0\1\10\1\0"+
    "\4\10\1\103\1\120\1\10\1\121\7\10\1\122\10\10"+
    "\25\0\1\10\7\0\1\10\1\0\14\10\1\123\13\10"+
    "\25\0\1\10\7\0\1\10\1\0\24\10\1\124\3\10"+
    "\25\0\1\10\7\0\1\10\1\0\10\10\1\125\17\10"+
    "\25\0\1\10\7\0\1\10\1\0\14\10\1\126\2\10"+
    "\1\127\2\10\1\130\5\10\25\0\1\10\7\0\1\10"+
    "\1\0\14\10\1\131\13\10\25\0\1\10\7\0\1\10"+
    "\1\0\15\10\1\132\7\10\1\133\1\134\1\10\25\0"+
    "\1\10\7\0\1\10\1\0\5\10\1\135\22\10\25\0"+
    "\1\10\7\0\1\10\1\0\26\10\1\136\1\10\25\0"+
    "\1\10\53\0\1\137\66\0\1\140\66\0\1\141\1\0"+
    "\1\142\64\0\1\143\2\0\1\144\63\0\1\145\66\0"+
    "\1\146\4\0\1\147\61\0\1\150\5\0\1\151\60\0"+
    "\1\152\6\0\1\153\57\0\1\154\7\0\1\155\56\0"+
    "\1\156\10\0\1\157\55\0\1\160\14\0\1\4\1\56"+
    "\1\4\2\56\5\0\1\4\126\0\1\100\34\0\1\161"+
    "\6\0\1\162\4\0\1\163\61\0\1\164\71\0\1\165"+
    "\60\0\1\166\2\0\1\167\67\0\1\170\1\171\54\0"+
    "\1\172\10\0\1\173\53\0\1\174\1\0\1\175\7\0"+
    "\1\176\73\0\1\177\52\0\1\200\72\0\1\201\2\0"+
    "\1\202\2\0\1\203\60\0\1\204\67\0\1\205\7\0"+
    "\1\206\1\207\45\0\1\210\107\0\1\211\27\0\2\77"+
    "\2\0\63\77\7\0\1\10\1\0\5\10\1\107\22\10"+
    "\25\0\1\10\7\0\1\10\1\0\21\10\1\212\6\10"+
    "\25\0\1\10\7\0\1\10\1\0\17\10\1\213\10\10"+
    "\25\0\1\10\7\0\1\10\1\0\5\10\1\214\22\10"+
    "\25\0\1\10\7\0\1\10\1\0\6\10\1\215\21\10"+
    "\25\0\1\10\7\0\1\10\1\0\7\10\1\216\20\10"+
    "\25\0\1\10\7\0\1\10\1\0\23\10\1\217\4\10"+
    "\25\0\1\10\7\0\1\10\1\0\23\10\1\220\4\10"+
    "\25\0\1\10\7\0\1\10\1\0\20\10\1\221\7\10"+
    "\25\0\1\10\7\0\1\10\1\0\15\10\1\222\12\10"+
    "\25\0\1\10\7\0\1\10\1\0\20\10\1\223\7\10"+
    "\25\0\1\10\7\0\1\10\1\0\7\10\1\224\20\10"+
    "\25\0\1\10\7\0\1\10\1\0\21\10\1\225\6\10"+
    "\25\0\1\10\7\0\1\10\1\0\23\10\1\226\4\10"+
    "\25\0\1\10\7\0\1\10\1\0\10\10\1\227\17\10"+
    "\25\0\1\10\7\0\1\10\1\0\15\10\1\230\12\10"+
    "\25\0\1\10\7\0\1\10\1\0\10\10\1\231\17\10"+
    "\25\0\1\10\7\0\1\10\1\0\15\10\1\232\12\10"+
    "\25\0\1\10\7\0\1\10\1\0\22\10\1\233\5\10"+
    "\25\0\1\10\7\0\1\10\1\0\24\10\1\234\3\10"+
    "\25\0\1\10\7\0\1\10\1\0\17\10\1\235\10\10"+
    "\25\0\1\10\7\0\1\10\1\0\30\10\25\0\1\236"+
    "\7\0\1\10\1\0\24\10\1\237\3\10\25\0\1\10"+
    "\7\0\1\10\1\0\7\10\1\240\20\10\25\0\1\10"+
    "\7\0\1\10\1\0\14\10\1\241\13\10\25\0\1\10"+
    "\7\0\1\10\1\0\15\10\1\242\12\10\25\0\1\10"+
    "\7\0\1\10\1\0\7\10\1\243\20\10\25\0\1\10"+
    "\53\0\1\244\66\0\1\245\45\0\1\246\64\0\1\247"+
    "\54\0\1\250\70\0\1\251\102\0\1\252\66\0\1\253"+
    "\63\0\1\254\63\0\1\255\71\0\1\256\55\0\1\257"+
    "\100\0\1\260\70\0\1\261\53\0\1\262\66\0\1\263"+
    "\73\0\1\264\73\0\1\265\70\0\1\266\61\0\1\267"+
    "\124\0\1\270\35\0\1\271\51\0\1\272\73\0\1\273"+
    "\67\0\1\274\60\0\1\275\55\0\1\10\1\0\21\10"+
    "\1\276\6\10\25\0\1\10\7\0\1\10\1\0\22\10"+
    "\1\277\5\10\25\0\1\10\7\0\1\10\1\0\14\10"+
    "\1\300\13\10\25\0\1\10\7\0\1\10\1\0\12\10"+
    "\1\301\15\10\25\0\1\10\7\0\1\10\1\0\11\10"+
    "\1\302\16\10\25\0\1\10\7\0\1\10\1\0\5\10"+
    "\1\303\22\10\25\0\1\10\7\0\1\10\1\0\5\10"+
    "\1\304\22\10\25\0\1\10\7\0\1\10\1\0\15\10"+
    "\1\305\5\10\1\306\4\10\25\0\1\10\7\0\1\10"+
    "\1\0\15\10\1\307\12\10\25\0\1\10\7\0\1\10"+
    "\1\0\21\10\1\310\6\10\25\0\1\10\7\0\1\10"+
    "\1\0\14\10\1\311\13\10\25\0\1\10\7\0\1\10"+
    "\1\0\6\10\1\312\21\10\25\0\1\10\7\0\1\10"+
    "\1\0\3\10\1\313\24\10\25\0\1\10\7\0\1\10"+
    "\1\0\12\10\1\314\15\10\25\0\1\10\7\0\1\10"+
    "\1\0\5\10\1\315\22\10\25\0\1\10\7\0\1\10"+
    "\1\0\23\10\1\316\4\10\25\0\1\10\7\0\1\10"+
    "\1\0\14\10\1\317\13\10\25\0\1\10\7\0\1\10"+
    "\1\0\17\10\1\320\10\10\25\0\1\10\7\0\1\10"+
    "\1\0\10\10\1\321\17\10\25\0\1\10\7\0\1\10"+
    "\1\0\15\10\1\322\12\10\25\0\1\10\7\0\1\10"+
    "\1\0\24\10\1\323\3\10\25\0\1\10\7\0\1\10"+
    "\1\0\10\10\1\324\17\10\25\0\1\10\7\0\1\10"+
    "\1\0\22\10\1\325\5\10\25\0\1\10\32\0\1\326"+
    "\67\0\1\327\60\0\1\330\63\0\1\331\62\0\1\332"+
    "\66\0\1\333\76\0\1\334\5\0\1\335\60\0\1\336"+
    "\72\0\1\337\61\0\1\340\60\0\1\341\63\0\1\342"+
    "\70\0\1\343\104\0\1\344\57\0\1\345\71\0\1\346"+
    "\57\0\1\347\73\0\1\350\75\0\1\351\52\0\1\352"+
    "\100\0\1\353\42\0\1\10\1\0\5\10\1\354\22\10"+
    "\25\0\1\10\7\0\1\10\1\0\27\10\1\355\25\0"+
    "\1\10\7\0\1\10\1\0\7\10\1\356\20\10\25\0"+
    "\1\10\7\0\1\10\1\0\15\10\1\357\12\10\25\0"+
    "\1\10\7\0\1\10\1\0\17\10\1\360\10\10\25\0"+
    "\1\10\7\0\1\10\1\0\10\10\1\361\17\10\25\0"+
    "\1\10\7\0\1\10\1\0\14\10\1\362\13\10\25\0"+
    "\1\10\7\0\1\10\1\0\22\10\1\363\5\10\25\0"+
    "\1\10\7\0\1\10\1\0\16\10\1\364\11\10\25\0"+
    "\1\10\7\0\1\10\1\0\5\10\1\365\22\10\25\0"+
    "\1\10\7\0\1\10\1\0\15\10\1\366\12\10\25\0"+
    "\1\10\7\0\1\10\1\0\10\10\1\367\17\10\25\0"+
    "\1\10\7\0\1\10\1\0\6\10\1\370\21\10\25\0"+
    "\1\10\7\0\1\10\1\0\6\10\1\371\21\10\25\0"+
    "\1\10\7\0\1\10\1\0\5\10\1\372\22\10\25\0"+
    "\1\10\7\0\1\10\1\0\24\10\1\373\3\10\25\0"+
    "\1\10\7\0\1\10\1\0\5\10\1\374\22\10\25\0"+
    "\1\10\16\0\1\375\110\0\1\376\46\0\1\377\74\0"+
    "\1\u0100\70\0\1\u0101\57\0\1\u0102\72\0\1\u0103\74\0"+
    "\1\u0104\51\0\1\u0105\76\0\1\u0106\61\0\1\u0107\64\0"+
    "\1\u0108\66\0\1\u0109\65\0\1\u010a\105\0\1\u010b\47\0"+
    "\1\u010c\57\0\1\10\1\0\24\10\1\u010d\3\10\25\0"+
    "\1\10\7\0\1\10\1\0\20\10\1\u010e\7\10\25\0"+
    "\1\10\7\0\1\10\1\0\24\10\1\u010f\3\10\25\0"+
    "\1\10\7\0\1\10\1\0\22\10\1\u0110\5\10\25\0"+
    "\1\10\7\0\1\10\1\0\24\10\1\u0111\3\10\25\0"+
    "\1\10\7\0\1\10\1\0\5\10\1\u0112\22\10\25\0"+
    "\1\10\7\0\1\10\1\0\12\10\1\u0113\15\10\25\0"+
    "\1\10\7\0\1\10\1\0\15\10\1\u0114\12\10\25\0"+
    "\1\10\7\0\1\10\1\0\15\10\1\u0115\12\10\25\0"+
    "\1\10\7\0\1\10\1\0\26\10\1\u0116\1\10\25\0"+
    "\1\10\7\0\1\10\1\0\11\10\1\u0117\16\10\25\0"+
    "\1\10\7\0\1\10\1\0\20\10\1\u0118\7\10\25\0"+
    "\1\10\35\0\1\u0119\62\0\1\u011a\72\0\1\u011b\64\0"+
    "\1\u011c\70\0\1\u011d\47\0\1\u011e\76\0\1\u011f\66\0"+
    "\1\u0120\77\0\1\u0121\51\0\1\u0122\75\0\1\u0123\44\0"+
    "\1\10\1\0\10\10\1\u0124\17\10\25\0\1\10\7\0"+
    "\1\10\1\0\13\10\1\u0125\14\10\25\0\1\10\7\0"+
    "\1\10\1\0\15\10\1\u0126\12\10\25\0\1\10\7\0"+
    "\1\10\1\0\11\10\1\u0127\16\10\25\0\1\10\21\0"+
    "\1\u0128\71\0\1\u0129\70\0\1\u012a\62\0\1\u012b\53\0"+
    "\1\10\1\0\5\10\1\u012c\22\10\25\0\1\10\16\0"+
    "\1\u012d\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11770];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\24\1\12\11\16\1\1\11\17\1\1\11"+
    "\1\0\35\1\10\11\1\1\1\11\1\1\7\11\7\0"+
    "\1\1\1\11\4\0\1\1\13\0\32\1\2\11\7\0"+
    "\1\11\6\0\1\11\1\0\1\11\7\0\30\1\1\0"+
    "\1\11\1\0\3\11\2\0\1\11\4\0\1\11\10\0"+
    "\21\1\1\0\1\11\1\0\1\11\4\0\2\11\5\0"+
    "\1\11\14\1\1\11\4\0\6\11\4\1\1\0\3\11"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GlslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 82: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 3: 
            { return GlslTypes.SLASH;
            } 
            // fall through
          case 84: break;
          case 4: 
            { return GlslTypes.INTEGER_CONSTANT;
            } 
            // fall through
          case 85: break;
          case 5: 
            { return GlslTypes.DOT;
            } 
            // fall through
          case 86: break;
          case 6: 
            { return GlslTypes.IDENTIFIER;
            } 
            // fall through
          case 87: break;
          case 7: 
            { return GlslTypes.SEMICOLON;
            } 
            // fall through
          case 88: break;
          case 8: 
            { return GlslTypes.COLON;
            } 
            // fall through
          case 89: break;
          case 9: 
            { return GlslTypes.C_BRACKET_L;
            } 
            // fall through
          case 90: break;
          case 10: 
            { return GlslTypes.C_BRACKET_R;
            } 
            // fall through
          case 91: break;
          case 11: 
            { return GlslTypes.S_BRACKET_L;
            } 
            // fall through
          case 92: break;
          case 12: 
            { return GlslTypes.S_BRACKET_R;
            } 
            // fall through
          case 93: break;
          case 13: 
            { return GlslTypes.PAREN_L;
            } 
            // fall through
          case 94: break;
          case 14: 
            { return GlslTypes.PAREN_R;
            } 
            // fall through
          case 95: break;
          case 15: 
            { return GlslTypes.COMMA;
            } 
            // fall through
          case 96: break;
          case 16: 
            { return GlslTypes.HASHTAG;
            } 
            // fall through
          case 97: break;
          case 17: 
            { return GlslTypes.EQUAL;
            } 
            // fall through
          case 98: break;
          case 18: 
            { return GlslTypes.STAR;
            } 
            // fall through
          case 99: break;
          case 19: 
            { return GlslTypes.PLUS;
            } 
            // fall through
          case 100: break;
          case 20: 
            { return GlslTypes.DASH;
            } 
            // fall through
          case 101: break;
          case 21: 
            { return GlslTypes.PERCENT;
            } 
            // fall through
          case 102: break;
          case 22: 
            { return GlslTypes.ANGLE_L;
            } 
            // fall through
          case 103: break;
          case 23: 
            { return GlslTypes.ANGLE_R;
            } 
            // fall through
          case 104: break;
          case 24: 
            { return GlslTypes.AMPERSAND;
            } 
            // fall through
          case 105: break;
          case 25: 
            { return GlslTypes.CARET;
            } 
            // fall through
          case 106: break;
          case 26: 
            { return GlslTypes.VERTICAL_BAR;
            } 
            // fall through
          case 107: break;
          case 27: 
            { return GlslTypes.EXCLAMATION;
            } 
            // fall through
          case 108: break;
          case 28: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 109: break;
          case 29: 
            { return GlslTypes.COMMENT;
            } 
            // fall through
          case 110: break;
          case 30: 
            { return GlslTypes.DIV_ASSIGN;
            } 
            // fall through
          case 111: break;
          case 31: 
            { return GlslTypes.FLOAT_CONSTANT;
            } 
            // fall through
          case 112: break;
          case 32: 
            { return GlslTypes.IN;
            } 
            // fall through
          case 113: break;
          case 33: 
            { return GlslTypes.IF;
            } 
            // fall through
          case 114: break;
          case 34: 
            { return GlslTypes.DO;
            } 
            // fall through
          case 115: break;
          case 35: 
            { return GlslTypes.EQ_OP;
            } 
            // fall through
          case 116: break;
          case 36: 
            { return GlslTypes.MUL_ASSIGN;
            } 
            // fall through
          case 117: break;
          case 37: 
            { return GlslTypes.ADD_ASSIGN;
            } 
            // fall through
          case 118: break;
          case 38: 
            { return GlslTypes.INCREMENT;
            } 
            // fall through
          case 119: break;
          case 39: 
            { return GlslTypes.SUB_ASSIGN;
            } 
            // fall through
          case 120: break;
          case 40: 
            { return GlslTypes.DECREMENT;
            } 
            // fall through
          case 121: break;
          case 41: 
            { return GlslTypes.MOD_ASSIGN;
            } 
            // fall through
          case 122: break;
          case 42: 
            { return GlslTypes.LE_OP;
            } 
            // fall through
          case 123: break;
          case 43: 
            { return GlslTypes.LEFT_OP;
            } 
            // fall through
          case 124: break;
          case 44: 
            { return GlslTypes.GE_OP;
            } 
            // fall through
          case 125: break;
          case 45: 
            { return GlslTypes.RIGHT_OP;
            } 
            // fall through
          case 126: break;
          case 46: 
            { return GlslTypes.AND_ASSIGN;
            } 
            // fall through
          case 127: break;
          case 47: 
            { return GlslTypes.AND_OP;
            } 
            // fall through
          case 128: break;
          case 48: 
            { return GlslTypes.XOR_ASSIGN;
            } 
            // fall through
          case 129: break;
          case 49: 
            { return GlslTypes.XOR_OP;
            } 
            // fall through
          case 130: break;
          case 50: 
            { return GlslTypes.OR_ASSIGN;
            } 
            // fall through
          case 131: break;
          case 51: 
            { return GlslTypes.OR_OP;
            } 
            // fall through
          case 132: break;
          case 52: 
            { return GlslTypes.NE_OP;
            } 
            // fall through
          case 133: break;
          case 53: 
            { return GlslTypes.INT;
            } 
            // fall through
          case 134: break;
          case 54: 
            { return GlslTypes.OUT;
            } 
            // fall through
          case 135: break;
          case 55: 
            { return GlslTypes.FOR;
            } 
            // fall through
          case 136: break;
          case 56: 
            { return GlslTypes.LEFT_ASSIGN;
            } 
            // fall through
          case 137: break;
          case 57: 
            { return GlslTypes.RIGHT_ASSIGN;
            } 
            // fall through
          case 138: break;
          case 58: 
            { return GlslTypes.BOOL;
            } 
            // fall through
          case 139: break;
          case 59: 
            { return GlslTypes.NATIVE_VECTOR;
            } 
            // fall through
          case 140: break;
          case 60: 
            { return GlslTypes.VOID;
            } 
            // fall through
          case 141: break;
          case 61: 
            { return GlslTypes.ELSE;
            } 
            // fall through
          case 142: break;
          case 62: 
            { return GlslTypes.CASE;
            } 
            // fall through
          case 143: break;
          case 63: 
            { return GlslTypes.UINT;
            } 
            // fall through
          case 144: break;
          case 64: 
            { return GlslTypes.NATIVE_MATRIX;
            } 
            // fall through
          case 145: break;
          case 65: 
            { return GlslTypes.TRUE;
            } 
            // fall through
          case 146: break;
          case 66: 
            { return GlslTypes.BREAK;
            } 
            // fall through
          case 147: break;
          case 67: 
            { return GlslTypes.CONST;
            } 
            // fall through
          case 148: break;
          case 68: 
            { return GlslTypes.FALSE;
            } 
            // fall through
          case 149: break;
          case 69: 
            { return GlslTypes.FLOAT;
            } 
            // fall through
          case 150: break;
          case 70: 
            { return GlslTypes.WHILE;
            } 
            // fall through
          case 151: break;
          case 71: 
            { return GlslTypes.BUFFER;
            } 
            // fall through
          case 152: break;
          case 72: 
            { return GlslTypes.DOUBLE;
            } 
            // fall through
          case 153: break;
          case 73: 
            { return GlslTypes.LAYOUT;
            } 
            // fall through
          case 154: break;
          case 74: 
            { return GlslTypes.STRUCT;
            } 
            // fall through
          case 155: break;
          case 75: 
            { return GlslTypes.SWITCH;
            } 
            // fall through
          case 156: break;
          case 76: 
            { return GlslTypes.SHARED;
            } 
            // fall through
          case 157: break;
          case 77: 
            { return GlslTypes.RETURN;
            } 
            // fall through
          case 158: break;
          case 78: 
            { return GlslTypes.UNIFORM;
            } 
            // fall through
          case 159: break;
          case 79: 
            { return GlslTypes.DEFAULT;
            } 
            // fall through
          case 160: break;
          case 80: 
            { return GlslTypes.DISCARD;
            } 
            // fall through
          case 161: break;
          case 81: 
            { return GlslTypes.CONTINUE;
            } 
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
