/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package glsl.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import glsl.language.psi.GlslTypes;  // contain token we'll use


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>glsl.flex</tt>
 */
class GlslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17552 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\2\0\1\56\1\57\1\60\13\24\1\61\1\47"+
    "\1\62\1\63\1\56\1\64\1\30\1\65\1\66\3\24\3\0\1\67\12\24\1\70\1\0\1\71\1\30"+
    "\1\56\1\72\3\24\1\55\1\73\1\23\2\24\1\70\1\74\1\75\1\76\2\30\3\24\1\77\1\24"+
    "\1\51\6\30\2\24\1\33\1\100\2\30\1\101\5\0\1\102\6\24\1\103\2\0\1\104\1\24"+
    "\1\105\1\56\1\43\1\24\1\106\1\107\1\110\2\24\1\111\1\112\1\113\1\114\1\115"+
    "\1\65\1\116\1\105\1\56\1\117\1\120\1\121\1\122\1\110\2\24\1\111\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\56\1\132\1\30\1\121\1\40\1\37\2\24\1\111"+
    "\1\133\1\113\1\47\1\134\1\135\1\30\1\105\1\56\1\44\1\136\1\121\1\107\1\110"+
    "\2\24\1\111\1\133\1\113\1\114\1\126\1\137\1\116\1\105\1\56\1\44\1\30\1\140"+
    "\1\141\1\142\1\143\1\120\1\141\1\24\1\144\1\145\1\146\1\147\1\30\1\131\1\56"+
    "\1\30\1\44\1\150\1\33\1\111\2\24\1\111\1\24\1\151\1\152\1\146\1\153\1\51\1"+
    "\105\1\56\2\30\1\106\1\33\1\111\2\24\1\111\1\154\1\113\1\152\1\146\1\153\1"+
    "\35\1\105\1\56\1\155\1\30\1\150\1\33\1\111\4\24\1\156\1\152\1\157\1\160\1"+
    "\45\1\105\1\56\1\30\1\42\1\161\1\24\1\25\1\42\2\24\1\37\1\162\1\25\1\163\1"+
    "\164\1\0\1\131\1\56\1\165\1\30\1\43\5\24\1\166\1\167\1\170\1\171\1\56\1\172"+
    "\4\30\1\173\1\174\1\175\1\43\1\176\1\177\1\166\1\200\1\201\1\52\1\56\1\202"+
    "\4\30\1\135\2\30\1\203\1\56\1\172\1\204\1\205\1\24\1\43\3\24\1\31\1\46\1\0"+
    "\1\152\1\206\1\0\1\46\3\0\1\207\1\210\7\30\5\24\1\55\1\0\1\211\1\56\1\172"+
    "\1\70\1\212\1\213\1\214\1\215\1\24\1\216\1\217\1\56\1\220\4\24\1\40\1\22\5"+
    "\24\1\221\51\24\1\142\1\25\1\142\5\24\1\142\4\24\1\142\1\25\1\142\1\24\1\25"+
    "\7\24\1\142\10\24\1\222\4\30\2\24\2\30\12\24\2\100\1\43\114\24\1\107\2\24"+
    "\1\43\2\24\1\51\11\24\1\141\1\24\1\135\1\24\1\33\1\223\1\30\2\24\1\223\1\30"+
    "\2\24\1\224\1\30\1\24\1\33\1\225\1\30\6\24\1\226\3\0\1\227\1\230\1\56\1\172"+
    "\3\30\1\231\1\56\1\172\13\24\1\30\1\232\4\24\1\233\10\24\1\100\1\30\3\24\1"+
    "\25\1\0\1\2\1\0\1\2\1\131\1\56\3\24\1\100\1\31\1\30\5\24\1\117\3\24\1\27\1"+
    "\56\1\172\4\30\2\24\1\170\1\2\6\24\1\206\1\171\3\0\1\114\1\56\1\172\1\56\1"+
    "\172\1\45\1\30\1\0\1\52\10\30\1\234\5\24\1\226\1\0\1\234\1\117\1\56\1\172"+
    "\1\30\1\235\1\2\1\30\1\236\3\24\1\104\1\214\1\56\1\72\4\24\1\70\1\0\1\2\1"+
    "\30\4\24\1\226\2\0\1\30\1\56\1\237\1\56\1\72\3\24\1\100\1\24\1\135\10\30\1"+
    "\240\2\0\1\241\1\242\1\203\30\24\7\0\1\243\42\24\2\100\4\24\2\100\1\24\1\244"+
    "\3\24\1\100\6\24\1\33\1\201\1\245\1\31\1\246\1\117\1\24\1\31\1\245\1\31\1"+
    "\30\1\235\3\30\1\247\1\30\1\45\1\135\1\30\1\250\1\30\1\152\1\0\1\44\1\45\2"+
    "\30\1\24\1\31\4\24\2\30\1\0\1\207\1\251\1\0\1\252\1\30\1\253\1\42\1\162\1"+
    "\254\1\32\1\255\1\24\1\256\1\257\1\260\2\30\5\24\1\135\116\30\5\24\1\25\5"+
    "\24\1\25\20\24\1\31\1\261\1\262\1\30\4\24\1\40\1\22\7\24\1\45\1\30\1\65\2"+
    "\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1\257\3\30\1\43\1\216\1\254\1\31\1"+
    "\43\11\24\1\25\1\263\1\43\12\24\1\221\1\257\4\24\1\25\1\43\12\24\1\25\2\30"+
    "\3\24\1\51\6\30\170\24\1\100\11\30\75\24\1\51\2\30\21\24\1\31\10\30\5\24\1"+
    "\100\41\24\1\31\2\24\1\56\1\264\2\30\5\24\1\170\1\101\1\265\3\24\1\70\12\24"+
    "\1\203\3\30\1\45\1\24\1\42\14\24\1\110\3\24\1\25\1\24\7\30\1\45\1\24\1\266"+
    "\1\267\2\24\1\55\2\30\1\135\6\24\1\117\1\30\1\270\5\24\1\226\1\0\1\52\1\30"+
    "\1\56\1\172\2\0\1\270\1\271\1\56\1\72\2\24\1\70\1\52\2\24\1\170\1\0\1\2\1"+
    "\30\3\24\1\31\1\102\5\24\1\55\1\0\1\252\1\45\1\56\1\172\1\272\1\24\1\56\1"+
    "\273\5\24\1\104\1\171\1\30\1\267\1\274\1\56\1\172\2\24\1\25\1\275\6\24\1\213"+
    "\1\276\1\233\2\30\1\277\1\24\1\55\1\300\1\30\3\301\1\30\2\25\5\24\1\221\1"+
    "\100\1\30\16\24\1\55\1\302\1\56\1\172\64\24\1\117\1\30\2\24\1\25\1\303\5\24"+
    "\1\117\40\30\55\24\1\100\15\24\1\27\4\30\1\25\1\30\1\303\1\304\1\24\1\111"+
    "\1\25\1\201\1\305\15\24\1\27\3\30\1\303\54\24\1\100\2\30\10\24\1\42\6\24\5"+
    "\30\1\24\1\31\2\0\2\30\2\0\1\120\2\30\1\257\3\30\1\44\1\33\20\24\1\306\1\250"+
    "\1\30\1\56\1\172\1\43\2\24\1\122\1\43\2\24\1\51\1\307\12\24\1\25\3\42\1\310"+
    "\1\311\2\30\1\312\1\24\1\154\2\24\1\25\2\24\1\313\1\24\1\100\1\24\1\100\4"+
    "\30\17\24\1\51\10\30\6\24\1\31\20\30\1\314\20\30\3\24\1\31\6\24\1\135\1\30"+
    "\1\252\3\30\4\24\1\30\1\257\3\24\1\51\4\24\1\70\1\315\3\24\1\100\4\24\1\117"+
    "\1\24\1\254\5\30\23\24\1\100\1\56\1\172\4\24\1\117\4\24\1\117\5\24\1\30\6"+
    "\24\1\117\23\30\46\24\1\25\1\30\2\24\1\100\1\30\1\24\23\30\1\100\1\111\4\24"+
    "\1\40\1\316\2\24\1\100\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24\1\317\1\30"+
    "\2\24\1\100\1\30\3\24\1\27\10\30\7\24\1\307\10\30\1\320\1\101\1\154\1\43\2"+
    "\24\1\117\1\125\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1\321\3\30\6"+
    "\24\1\100\1\30\2\24\1\100\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11\24\1\135"+
    "\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\236\6\24\1\0\1\171\3\30\1\131\1\56"+
    "\1\30\1\65\1\236\5\24\1\0\1\322\2\30\3\24\1\135\1\56\1\172\1\236\3\24\1\170"+
    "\1\0\1\323\1\56\2\30\4\24\1\324\1\30\1\236\5\24\1\55\1\0\1\325\1\326\1\56"+
    "\1\327\4\30\2\24\1\37\2\24\1\226\1\0\1\210\10\30\1\25\1\255\1\24\1\40\1\24"+
    "\1\135\5\24\1\170\1\0\1\315\1\56\1\172\1\150\1\107\1\110\2\24\1\111\1\133"+
    "\1\113\1\114\1\126\1\147\1\257\1\330\2\207\21\30\6\24\1\206\1\0\1\211\1\51"+
    "\1\56\1\172\4\30\6\24\2\0\1\331\1\30\1\56\1\172\24\30\5\24\1\170\1\52\1\0"+
    "\1\252\2\30\1\274\4\30\6\24\2\0\1\332\1\30\1\56\1\172\4\30\5\24\1\55\1\0\1"+
    "\30\1\56\1\172\6\30\3\24\1\333\1\0\1\2\1\56\1\172\54\30\10\24\1\56\1\172\1"+
    "\30\1\45\40\30\1\104\1\236\4\24\1\55\1\334\1\65\1\30\1\104\1\102\4\24\1\246"+
    "\1\216\1\0\1\203\4\30\7\24\1\135\40\30\1\24\1\111\3\24\1\170\1\171\1\0\1\135"+
    "\1\30\1\56\1\172\2\30\1\42\3\24\1\335\2\0\1\46\1\171\11\30\1\25\1\37\4\24"+
    "\1\336\1\337\1\217\1\30\1\0\1\203\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\117\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\135\3\24\1\25\1\56"+
    "\1\172\14\30\3\24\1\100\1\207\1\30\6\24\1\171\1\30\1\117\1\30\1\56\1\172\1"+
    "\303\2\24\1\257\2\24\56\30\10\24\1\31\1\30\1\104\4\0\1\171\1\30\1\65\1\236"+
    "\1\24\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61"+
    "\24\1\117\40\30\15\24\1\51\1\24\1\31\1\24\1\135\1\24\1\340\1\2\127\30\1\341"+
    "\1\342\2\0\1\343\1\2\3\30\1\344\22\30\1\326\67\30\12\24\1\33\10\24\1\33\1"+
    "\345\1\346\1\24\1\347\1\154\7\24\1\40\1\350\2\33\3\24\1\351\1\201\1\42\1\111"+
    "\51\24\1\100\3\24\1\111\2\24\1\221\3\24\1\221\2\24\1\33\3\24\1\33\2\24\1\25"+
    "\3\24\1\25\3\24\1\111\3\24\1\111\2\24\1\221\1\352\6\56\6\0\1\171\1\235\5\0"+
    "\1\207\1\314\1\30\1\353\2\30\1\235\1\46\1\0\52\30\1\171\2\0\1\354\1\355\1"+
    "\315\72\30\30\24\1\31\1\30\1\171\5\30\10\24\1\226\1\315\1\56\1\172\24\30\1"+
    "\154\3\24\1\173\1\43\1\221\1\356\1\253\1\357\1\173\1\244\1\173\2\221\1\130"+
    "\1\24\1\37\1\24\1\117\1\360\1\37\1\24\1\117\50\30\32\24\1\25\5\30\106\24\1"+
    "\31\1\30\33\24\1\100\120\24\1\27\1\30\146\24\1\135\3\30\3\24\1\100\74\30\1"+
    "\127\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1928 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\4\1\2\1\1\1\5\1\3\6\20\4\0\1\4\1\70\1\0\1\55\1\17\1\62\1\65\1\0\1"+
    "\52\1\53\1\57\1\60\1\54\1\61\1\12\1\6\2\7\3\30\5\7\1\45\1\44\1\63\1\56\1\64"+
    "\2\0\5\17\1\15\5\17\1\16\10\17\1\11\5\17\1\50\1\0\1\51\1\66\1\17\1\0\1\32"+
    "\1\22\1\25\1\27\1\24\1\14\1\17\1\42\1\26\1\17\1\43\1\13\1\31\1\36\1\35\2\17"+
    "\1\40\1\37\1\33\1\10\1\23\1\41\1\34\1\71\1\17\1\46\1\67\1\47\1\0\6\20\1\21"+
    "\2\20\2\0\4\17\4\0\1\17\2\0\1\20\7\0\1\17\4\0\1\17\5\0\17\17\1\0\2\17\4\0"+
    "\4\17\16\0\5\17\7\0\1\17\1\0\1\17\1\0\5\17\1\0\2\17\2\0\4\17\1\0\1\17\6\0"+
    "\1\17\1\0\3\17\1\0\1\17\1\0\4\17\1\0\13\17\1\0\3\17\1\0\5\20\2\0\6\17\1\0"+
    "\7\17\1\0\1\17\15\0\1\17\1\0\15\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0\1\20\3\17"+
    "\5\0\6\20\5\0\1\17\4\0\3\20\1\0\1\20\3\0\3\17\5\20\12\7\4\0\2\17\1\20\13\17"+
    "\1\0\1\17\7\20\2\17\2\20\1\0\4\20\2\17\2\7\3\17\2\0\1\17\7\0\1\20\1\17\1\20"+
    "\6\17\3\20\2\0\11\17\3\20\1\17\6\0\2\7\6\17\4\20\2\17\2\0\2\20\1\17\11\20"+
    "\1\17\3\20\1\17\5\20\2\0\1\17\3\20\4\0\6\17\6\0\10\20\6\17\3\20\1\17\2\20"+
    "\1\17\7\20\2\17\2\20\2\0\2\7\1\17\3\20\1\0\10\17\2\0\2\17\2\0\6\17\1\0\7\17"+
    "\1\0\1\17\3\0\4\17\2\0\1\20\1\17\7\20\2\0\2\20\2\0\3\20\1\17\5\0\2\17\1\0"+
    "\5\17\7\0\2\17\4\0\3\20\1\0\6\17\4\0\2\17\1\0\2\17\1\0\2\17\1\0\2\17\2\0\1"+
    "\20\1\0\5\20\4\0\2\20\2\0\3\20\3\0\1\20\7\0\4\17\1\0\1\17\7\0\2\7\2\20\3\17"+
    "\1\20\2\0\1\17\1\0\2\17\1\0\3\17\2\20\1\0\3\20\2\0\1\17\10\0\1\17\6\20\6\0"+
    "\2\20\2\0\1\20\1\17\1\0\6\17\3\0\3\17\1\0\4\17\3\0\2\17\1\0\1\17\1\0\4\17"+
    "\4\0\5\20\3\0\3\20\1\0\4\20\2\0\1\17\6\0\5\20\1\0\5\17\3\0\1\17\7\20\1\0\2"+
    "\20\5\0\2\20\1\0\4\17\1\0\3\17\1\0\2\17\5\0\3\17\2\20\1\17\3\20\1\0\4\20\1"+
    "\17\5\0\3\17\1\20\2\0\2\20\1\0\7\17\1\0\1\17\4\0\1\20\4\0\6\20\1\0\1\20\3"+
    "\0\2\20\4\0\1\17\1\20\2\17\7\20\4\0\10\17\10\20\1\0\2\7\7\0\2\17\1\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\1\17\6\0\4\17\1\0\3\17\1\0\1\17\1\0\1\17\2\0\2\17\1"+
    "\0\3\17\2\20\1\0\2\20\1\17\2\0\5\17\1\0\1\17\1\0\2\7\2\0\4\17\2\20\13\0\1"+
    "\20\1\0\1\20\1\0\1\20\4\0\2\20\5\17\10\20\11\0\1\20\1\0\7\20\1\17\2\20\4\17"+
    "\3\20\1\17\3\20\2\17\7\20\3\17\4\20\5\17\14\20\1\17\1\20\2\7\4\20\2\0\3\17"+
    "\1\0\7\17\2\0\3\20\2\17\3\20\3\0\2\17\2\20\4\0\1\17\1\0\2\20\4\0\4\17\10\20"+
    "\3\0\1\17\3\0\2\17\1\20\5\0\4\20\1\0\5\17\2\20\2\17\1\20\1\17\5\0\5\20\3\17"+
    "\3\0\10\20\5\17\2\7\3\0\3\17\3\20\1\0\5\20\4\17\1\20\4\17\3\20\2\17\3\20\1"+
    "\0\5\20\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17\2\0\3\17\1\0\6\17\2\0\2\17\2\1"+
    "\5\20\5\0\1\17\4\0\1\20\3\0\4\20\11\0\1\17\4\0\1\17\1\0\5\17\2\0\1\17\1\0"+
    "\4\17\1\0\3\17\2\0\4\17\5\0\5\17\4\0\1\17\4\0\4\17\3\20\2\17\5\0\2\20\2\0"+
    "\3\17\2\7\2\17\4\0\6\20\1\0\3\17\1\20\3\17\1\20\4\17\1\20\4\17\2\20\6\17\3"+
    "\0\1\17\1\0\1\17\2\0\5\17\1\20\2\17\2\7\5\17\1\0\4\17\2\20\4\0\1\17\3\20\2"+
    "\17\1\20\5\17\2\20\3\0\3\17\4\0\3\17\2\20\2\0\6\17\1\0\3\20\1\0\2\20\5\0\5"+
    "\17\5\0\1\17\1\20\3\17\1\0\2\17\1\0\7\17\2\0\1\20\6\0\2\17\2\0\3\17\3\0\2"+
    "\17\3\0\2\17\2\0\3\20\4\0\3\17\1\0\2\17\1\0\1\17\5\0\1\20\2\0\3\20\5\0\1\17"+
    "\3\0\1\17\2\0\4\17\1\0\2\17\2\0\1\17\3\20\1\0\2\20\1\0\5\17\2\20\1\0\3\20"+
    "\2\0\1\20\2\0\5\20\1\0\2\7\3\17\1\20\2\0\1\17\1\0\1\20\4\17\5\0\3\20\3\0\2"+
    "\7\1\17\1\0\1\17\3\0\2\17\2\20\2\0\6\20\2\17\1\0\1\17\1\20\3\0\1\17\3\0\2"+
    "\17\3\0\5\20\1\17\4\20\3\0\6\20\1\17\6\20\3\0\1\20\1\0\2\20\1\0\1\20\2\17"+
    "\3\0\2\20\6\0\5\20\3\0\6\20\2\0\3\20\2\0\4\20\4\0\1\17\2\0\2\17\2\0\4\17\1"+
    "\0\4\17\1\0\1\17\1\0\6\17\2\0\5\17\1\0\4\17\1\0\4\17\2\0\2\7\4\0\1\20\3\0"+
    "\1\20\2\0\7\20\1\0\2\20\1\0\2\20\1\0\1\17\1\0\1\17\5\0\1\17\1\0\1\17\1\0\3"+
    "\17\1\0\3\17\1\0\3\17");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\5\1\6\16\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\34\1\3\1\1"+
    "\1\6\15\1\1\35\1\36\1\4\1\0\3\5\1\37"+
    "\14\5\1\40\1\41\2\5\1\42\10\5\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\15\0\1\40\1\41\2\0\1\42\7\0\2\5\1\0"+
    "\1\37\1\0\3\5\1\65\10\5\1\66\5\5\1\67"+
    "\5\5\1\70\1\71\5\0\1\65\7\0\1\66\4\0"+
    "\1\67\5\0\1\72\5\5\1\73\1\5\1\74\1\75"+
    "\1\76\1\77\5\5\1\100\1\101\5\5\1\72\5\0"+
    "\1\73\1\0\1\75\1\76\1\77\5\0\1\101\5\0"+
    "\2\5\1\102\1\103\1\5\1\104\1\5\1\105\10\5"+
    "\1\106\2\0\1\102\1\103\1\0\1\104\1\0\1\105"+
    "\7\0\1\106\1\5\1\107\1\110\3\5\1\111\1\100"+
    "\1\112\1\113\1\114\1\115\1\0\1\107\1\110\3\0"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\5\1\117"+
    "\1\120\1\116\1\0\1\117\1\120\2\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\164"+
    "\0\164\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\256\0\u07b4\0\u07ee\0\u0828"+
    "\0\164\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\164"+
    "\0\164\0\u01d0\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0196\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\u11e6"+
    "\0\164\0\u1220\0\164\0\164\0\164\0\164\0\164\0\164"+
    "\0\164\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\164\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\164\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u0196\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u1abc\0\u1af6\0\u0196\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde"+
    "\0\u1c18\0\u0196\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\164"+
    "\0\164\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\164\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\164\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\164\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u0196\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u0196"+
    "\0\u2358\0\u0196\0\u0196\0\u0196\0\u0196\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\u24b4\0\u0196\0\u24ee\0\u2528\0\u2562\0\u259c"+
    "\0\u25d6\0\164\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\164"+
    "\0\u2732\0\164\0\164\0\164\0\u276c\0\u27a6\0\u27e0\0\u281a"+
    "\0\u2854\0\164\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0"+
    "\0\u29ea\0\u0196\0\u0196\0\u2a24\0\u0196\0\u2a5e\0\u0196\0\u2a98"+
    "\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u0196"+
    "\0\u2c68\0\u2ca2\0\164\0\164\0\u2cdc\0\164\0\u2d16\0\164"+
    "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\164"+
    "\0\u2ee6\0\u0196\0\u0196\0\u2f20\0\u2f5a\0\u2f94\0\u0196\0\u0196"+
    "\0\u0196\0\u0196\0\u0196\0\u0196\0\u2fce\0\164\0\164\0\u3008"+
    "\0\u3042\0\u307c\0\164\0\164\0\164\0\164\0\164\0\u0196"+
    "\0\u30b6\0\u0196\0\u0196\0\164\0\u30f0\0\164\0\164\0\u0196"+
    "\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\5\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\3\10\1\3\1\4\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\6\1\22\1\10\1\23\1\10\1\24"+
    "\1\10\1\25\1\26\1\27\2\10\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\10\1\3\1\4\1\55\1\4\1\56"+
    "\1\55\1\57\1\3\1\60\1\3\1\61\1\62\1\63"+
    "\4\3\1\4\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\3\3\1\72\1\3\1\73\1\3\1\74\1\75\1\76"+
    "\2\3\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\3\73\0"+
    "\5\4\13\0\1\4\56\0\1\77\47\0\1\100\22\0"+
    "\1\6\2\101\1\102\15\0\1\6\50\0\3\10\1\0"+
    "\10\10\1\103\2\10\1\104\7\10\1\105\5\10\25\0"+
    "\1\10\7\0\3\10\1\0\31\10\25\0\1\10\7\0"+
    "\1\106\20\0\1\106\50\0\3\10\1\0\17\10\1\107"+
    "\11\10\25\0\1\10\7\0\3\10\1\0\1\110\16\10"+
    "\1\111\2\10\1\112\6\10\25\0\1\10\7\0\1\10"+
    "\1\113\1\10\1\0\10\10\1\103\11\10\1\114\2\10"+
    "\1\115\3\10\25\0\1\10\7\0\3\10\1\0\11\10"+
    "\1\116\10\10\1\117\6\10\25\0\1\10\7\0\3\10"+
    "\1\0\1\120\30\10\25\0\1\10\7\0\3\10\1\0"+
    "\17\10\1\121\2\10\1\122\6\10\25\0\1\10\7\0"+
    "\3\10\1\0\1\10\1\123\6\10\1\103\12\10\1\124"+
    "\5\10\25\0\1\10\7\0\3\10\1\0\10\10\1\103"+
    "\1\125\1\10\1\126\2\10\1\22\3\10\1\127\6\10"+
    "\25\0\1\10\7\0\3\10\1\0\17\10\1\130\11\10"+
    "\25\0\1\10\7\0\3\10\1\0\25\10\1\131\3\10"+
    "\25\0\1\10\7\0\1\10\1\132\1\10\1\0\31\10"+
    "\25\0\1\10\7\0\3\10\1\0\20\10\1\133\5\10"+
    "\1\134\1\135\1\10\25\0\1\10\7\0\3\10\1\0"+
    "\11\10\1\136\17\10\25\0\1\10\7\0\3\10\1\0"+
    "\27\10\1\137\1\10\25\0\1\10\56\0\1\140\71\0"+
    "\1\141\71\0\1\142\1\0\1\143\67\0\1\144\2\0"+
    "\1\145\66\0\1\146\71\0\1\147\4\0\1\150\64\0"+
    "\1\151\5\0\1\152\63\0\1\153\6\0\1\154\62\0"+
    "\1\155\7\0\1\156\61\0\1\157\10\0\1\160\60\0"+
    "\1\161\14\0\1\4\1\56\1\4\2\56\13\0\1\4"+
    "\126\0\1\100\41\0\1\162\7\0\1\163\65\0\1\164"+
    "\52\0\1\165\16\0\1\166\2\0\1\167\44\0\1\170"+
    "\24\0\1\171\2\0\1\172\66\0\1\173\47\0\1\174"+
    "\110\0\1\175\2\0\1\176\50\0\1\177\21\0\1\200"+
    "\57\0\1\201\1\0\1\202\6\0\1\203\74\0\1\204"+
    "\41\0\1\205\114\0\1\206\5\0\1\207\1\210\53\0"+
    "\1\211\107\0\1\212\27\0\2\77\2\0\66\77\7\0"+
    "\3\10\1\0\11\10\1\116\17\10\25\0\1\10\7\0"+
    "\3\10\1\0\23\10\1\213\5\10\25\0\1\10\7\0"+
    "\3\10\1\0\13\10\1\214\15\10\25\0\1\10\7\0"+
    "\1\106\3\0\1\215\2\216\1\217\11\0\1\106\50\0"+
    "\3\10\1\0\31\10\25\0\1\220\7\0\3\10\1\0"+
    "\22\10\1\221\6\10\25\0\1\10\7\0\3\10\1\0"+
    "\1\222\30\10\25\0\1\10\7\0\3\10\1\0\25\10"+
    "\1\223\3\10\25\0\1\10\7\0\3\10\1\0\1\10"+
    "\1\224\27\10\25\0\1\10\7\0\3\10\1\0\22\10"+
    "\1\225\6\10\25\0\1\10\7\0\3\10\1\0\11\10"+
    "\1\226\17\10\25\0\1\10\7\0\3\10\1\0\12\10"+
    "\1\227\16\10\25\0\1\10\7\0\3\10\1\0\13\10"+
    "\1\230\15\10\25\0\1\10\7\0\3\10\1\0\24\10"+
    "\1\231\4\10\25\0\1\10\7\0\3\10\1\0\24\10"+
    "\1\232\4\10\25\0\1\10\7\0\3\10\1\0\23\10"+
    "\1\233\5\10\25\0\1\10\7\0\3\10\1\0\20\10"+
    "\1\234\10\10\25\0\1\10\7\0\3\10\1\0\1\10"+
    "\1\235\27\10\25\0\1\10\7\0\3\10\1\0\24\10"+
    "\1\236\4\10\25\0\1\10\7\0\1\10\1\237\1\10"+
    "\1\0\31\10\25\0\1\10\7\0\3\10\1\0\20\10"+
    "\1\240\10\10\25\0\1\10\7\0\1\10\1\241\1\10"+
    "\1\0\31\10\25\0\1\10\7\0\3\10\1\0\20\10"+
    "\1\242\10\10\25\0\1\10\7\0\3\10\1\0\25\10"+
    "\1\243\3\10\25\0\1\10\7\0\3\10\1\0\13\10"+
    "\1\244\15\10\25\0\1\10\7\0\3\10\1\0\17\10"+
    "\1\245\11\10\25\0\1\10\7\0\3\10\1\0\20\10"+
    "\1\246\10\10\25\0\1\10\7\0\3\10\1\0\13\10"+
    "\1\247\15\10\25\0\1\10\56\0\1\250\71\0\1\251"+
    "\51\0\1\252\61\0\1\253\134\0\1\254\35\0\1\255"+
    "\47\0\1\256\116\0\1\257\45\0\1\260\112\0\1\261"+
    "\60\0\1\262\73\0\1\263\102\0\1\264\71\0\1\265"+
    "\70\0\1\266\66\0\1\267\52\0\1\270\114\0\1\271"+
    "\42\0\1\272\71\0\1\273\114\0\1\274\76\0\1\275"+
    "\57\0\1\276\75\0\1\277\72\0\1\300\64\0\1\301"+
    "\52\0\3\10\1\0\20\10\1\302\10\10\25\0\1\10"+
    "\7\0\3\10\1\0\1\10\1\303\27\10\25\0\1\10"+
    "\14\0\1\216\72\0\1\216\63\0\3\10\1\0\22\10"+
    "\1\304\6\10\25\0\1\10\7\0\3\10\1\0\17\10"+
    "\1\305\11\10\25\0\1\10\7\0\3\10\1\0\24\10"+
    "\1\306\4\10\25\0\1\10\7\0\3\10\1\0\1\10"+
    "\1\307\27\10\25\0\1\10\7\0\3\10\1\0\1\310"+
    "\30\10\25\0\1\10\7\0\3\10\1\0\17\10\1\311"+
    "\11\10\25\0\1\10\7\0\3\10\1\0\15\10\1\312"+
    "\13\10\25\0\1\10\7\0\3\10\1\0\14\10\1\313"+
    "\14\10\25\0\1\10\7\0\3\10\1\0\11\10\1\314"+
    "\17\10\25\0\1\10\7\0\3\10\1\0\11\10\1\315"+
    "\17\10\25\0\1\10\7\0\3\10\1\0\20\10\1\316"+
    "\3\10\1\317\4\10\25\0\1\10\7\0\3\10\1\0"+
    "\17\10\1\320\11\10\25\0\1\10\7\0\3\10\1\0"+
    "\12\10\1\321\16\10\25\0\1\10\7\0\3\10\1\0"+
    "\7\10\1\322\21\10\25\0\1\10\7\0\3\10\1\0"+
    "\15\10\1\323\13\10\25\0\1\10\7\0\3\10\1\0"+
    "\11\10\1\324\17\10\25\0\1\10\7\0\1\10\1\325"+
    "\1\10\1\0\31\10\25\0\1\10\7\0\3\10\1\0"+
    "\20\10\1\326\10\10\25\0\1\10\7\0\3\10\1\0"+
    "\25\10\1\327\3\10\25\0\1\10\7\0\1\10\1\330"+
    "\1\10\1\0\31\10\25\0\1\10\7\0\3\10\1\0"+
    "\1\331\30\10\25\0\1\10\33\0\1\332\52\0\1\333"+
    "\112\0\1\334\66\0\1\335\76\0\1\336\46\0\1\337"+
    "\70\0\1\340\110\0\1\341\66\0\1\342\66\0\1\343"+
    "\71\0\1\344\100\0\1\345\3\0\1\346\64\0\1\347"+
    "\64\0\1\350\66\0\1\351\73\0\1\352\55\0\1\353"+
    "\114\0\1\354\76\0\1\355\41\0\1\356\74\0\1\357"+
    "\65\0\3\10\1\0\22\10\1\360\6\10\25\0\1\10"+
    "\7\0\1\10\1\361\1\10\1\0\31\10\25\0\1\10"+
    "\7\0\3\10\1\0\20\10\1\362\10\10\25\0\1\10"+
    "\7\0\3\10\1\0\11\10\1\363\17\10\25\0\1\10"+
    "\7\0\3\10\1\0\11\10\1\364\17\10\25\0\1\10"+
    "\7\0\3\10\1\0\30\10\1\365\25\0\1\10\7\0"+
    "\3\10\1\0\13\10\1\366\15\10\25\0\1\10\7\0"+
    "\3\10\1\0\20\10\1\367\10\10\25\0\1\10\7\0"+
    "\1\10\1\370\1\10\1\0\31\10\25\0\1\10\7\0"+
    "\3\10\1\0\17\10\1\371\11\10\25\0\1\10\7\0"+
    "\3\10\1\0\1\372\30\10\25\0\1\10\7\0\3\10"+
    "\1\0\21\10\1\373\7\10\25\0\1\10\7\0\3\10"+
    "\1\0\12\10\1\374\16\10\25\0\1\10\7\0\3\10"+
    "\1\0\12\10\1\375\16\10\25\0\1\10\7\0\3\10"+
    "\1\0\11\10\1\376\17\10\25\0\1\10\7\0\3\10"+
    "\1\0\25\10\1\377\3\10\25\0\1\10\7\0\3\10"+
    "\1\0\11\10\1\u0100\17\10\25\0\1\10\35\0\1\u0101"+
    "\44\0\1\u0102\114\0\1\u0103\62\0\1\u0104\71\0\1\u0105"+
    "\110\0\1\u0106\54\0\1\u0107\76\0\1\u0108\46\0\1\u0109"+
    "\113\0\1\u010a\52\0\1\u010b\103\0\1\u010c\71\0\1\u010d"+
    "\70\0\1\u010e\105\0\1\u010f\55\0\1\u0110\54\0\3\10"+
    "\1\0\25\10\1\u0111\3\10\25\0\1\10\7\0\3\10"+
    "\1\0\20\10\1\u0112\10\10\25\0\1\10\7\0\3\10"+
    "\1\0\25\10\1\u0113\3\10\25\0\1\10\7\0\3\10"+
    "\1\0\23\10\1\u0114\5\10\25\0\1\10\7\0\3\10"+
    "\1\0\1\u0115\30\10\25\0\1\10\7\0\3\10\1\0"+
    "\25\10\1\u0116\3\10\25\0\1\10\7\0\3\10\1\0"+
    "\11\10\1\u0117\17\10\25\0\1\10\7\0\3\10\1\0"+
    "\15\10\1\u0118\13\10\25\0\1\10\7\0\3\10\1\0"+
    "\20\10\1\u0119\10\10\25\0\1\10\7\0\3\10\1\0"+
    "\27\10\1\u011a\1\10\25\0\1\10\7\0\3\10\1\0"+
    "\14\10\1\u011b\14\10\25\0\1\10\7\0\3\10\1\0"+
    "\23\10\1\u011c\5\10\25\0\1\10\40\0\1\u011d\64\0"+
    "\1\u011e\76\0\1\u011f\67\0\1\u0120\46\0\1\u0121\116\0"+
    "\1\u0122\55\0\1\u0123\100\0\1\u0124\100\0\1\u0125\56\0"+
    "\1\u0126\100\0\1\u0127\42\0\3\10\1\0\16\10\1\u0128"+
    "\12\10\25\0\1\10\7\0\1\10\1\u0129\1\10\1\0"+
    "\31\10\25\0\1\10\7\0\3\10\1\0\20\10\1\u012a"+
    "\10\10\25\0\1\10\7\0\3\10\1\0\14\10\1\u012b"+
    "\14\10\25\0\1\10\31\0\1\u012c\50\0\1\u012d\114\0"+
    "\1\u012e\65\0\1\u012f\51\0\3\10\1\0\11\10\1\u0130"+
    "\17\10\25\0\1\10\24\0\1\u0131\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12586];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\24\1\12\11\17\1\1\11\16\1\2\11"+
    "\1\0\35\1\10\11\1\1\1\11\1\1\7\11\15\0"+
    "\1\11\1\1\2\0\1\1\7\0\2\1\1\0\1\11"+
    "\1\0\30\1\2\11\5\0\1\11\7\0\1\11\4\0"+
    "\1\11\5\0\30\1\1\11\5\0\1\11\1\0\3\11"+
    "\5\0\1\11\5\0\21\1\2\0\2\11\1\0\1\11"+
    "\1\0\1\11\7\0\1\11\14\1\1\0\2\11\3\0"+
    "\5\11\4\1\1\11\1\0\2\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GlslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 82: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 3: 
            { return GlslTypes.SLASH;
            } 
            // fall through
          case 84: break;
          case 4: 
            { return GlslTypes.INTEGER_CONSTANT;
            } 
            // fall through
          case 85: break;
          case 5: 
            { return GlslTypes.IDENTIFIER;
            } 
            // fall through
          case 86: break;
          case 6: 
            { return GlslTypes.DOT;
            } 
            // fall through
          case 87: break;
          case 7: 
            { return GlslTypes.SEMICOLON;
            } 
            // fall through
          case 88: break;
          case 8: 
            { return GlslTypes.COLON;
            } 
            // fall through
          case 89: break;
          case 9: 
            { return GlslTypes.C_BRACKET_L;
            } 
            // fall through
          case 90: break;
          case 10: 
            { return GlslTypes.C_BRACKET_R;
            } 
            // fall through
          case 91: break;
          case 11: 
            { return GlslTypes.S_BRACKET_L;
            } 
            // fall through
          case 92: break;
          case 12: 
            { return GlslTypes.S_BRACKET_R;
            } 
            // fall through
          case 93: break;
          case 13: 
            { return GlslTypes.PAREN_L;
            } 
            // fall through
          case 94: break;
          case 14: 
            { return GlslTypes.PAREN_R;
            } 
            // fall through
          case 95: break;
          case 15: 
            { return GlslTypes.COMMA;
            } 
            // fall through
          case 96: break;
          case 16: 
            { return GlslTypes.HASHTAG;
            } 
            // fall through
          case 97: break;
          case 17: 
            { return GlslTypes.EQUAL;
            } 
            // fall through
          case 98: break;
          case 18: 
            { return GlslTypes.STAR;
            } 
            // fall through
          case 99: break;
          case 19: 
            { return GlslTypes.PLUS;
            } 
            // fall through
          case 100: break;
          case 20: 
            { return GlslTypes.DASH;
            } 
            // fall through
          case 101: break;
          case 21: 
            { return GlslTypes.PERCENT;
            } 
            // fall through
          case 102: break;
          case 22: 
            { return GlslTypes.ANGLE_L;
            } 
            // fall through
          case 103: break;
          case 23: 
            { return GlslTypes.ANGLE_R;
            } 
            // fall through
          case 104: break;
          case 24: 
            { return GlslTypes.AMPERSAND;
            } 
            // fall through
          case 105: break;
          case 25: 
            { return GlslTypes.CARET;
            } 
            // fall through
          case 106: break;
          case 26: 
            { return GlslTypes.VERTICAL_BAR;
            } 
            // fall through
          case 107: break;
          case 27: 
            { return GlslTypes.EXCLAMATION;
            } 
            // fall through
          case 108: break;
          case 28: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 109: break;
          case 29: 
            { return GlslTypes.COMMENT;
            } 
            // fall through
          case 110: break;
          case 30: 
            { return GlslTypes.DIV_ASSIGN;
            } 
            // fall through
          case 111: break;
          case 31: 
            { return GlslTypes.FLOAT_CONSTANT;
            } 
            // fall through
          case 112: break;
          case 32: 
            { return GlslTypes.IF;
            } 
            // fall through
          case 113: break;
          case 33: 
            { return GlslTypes.IN;
            } 
            // fall through
          case 114: break;
          case 34: 
            { return GlslTypes.DO;
            } 
            // fall through
          case 115: break;
          case 35: 
            { return GlslTypes.EQ_OP;
            } 
            // fall through
          case 116: break;
          case 36: 
            { return GlslTypes.MUL_ASSIGN;
            } 
            // fall through
          case 117: break;
          case 37: 
            { return GlslTypes.ADD_ASSIGN;
            } 
            // fall through
          case 118: break;
          case 38: 
            { return GlslTypes.INCREMENT;
            } 
            // fall through
          case 119: break;
          case 39: 
            { return GlslTypes.SUB_ASSIGN;
            } 
            // fall through
          case 120: break;
          case 40: 
            { return GlslTypes.DECREMENT;
            } 
            // fall through
          case 121: break;
          case 41: 
            { return GlslTypes.MOD_ASSIGN;
            } 
            // fall through
          case 122: break;
          case 42: 
            { return GlslTypes.LE_OP;
            } 
            // fall through
          case 123: break;
          case 43: 
            { return GlslTypes.LEFT_OP;
            } 
            // fall through
          case 124: break;
          case 44: 
            { return GlslTypes.GE_OP;
            } 
            // fall through
          case 125: break;
          case 45: 
            { return GlslTypes.RIGHT_OP;
            } 
            // fall through
          case 126: break;
          case 46: 
            { return GlslTypes.AND_ASSIGN;
            } 
            // fall through
          case 127: break;
          case 47: 
            { return GlslTypes.AND_OP;
            } 
            // fall through
          case 128: break;
          case 48: 
            { return GlslTypes.XOR_ASSIGN;
            } 
            // fall through
          case 129: break;
          case 49: 
            { return GlslTypes.XOR_OP;
            } 
            // fall through
          case 130: break;
          case 50: 
            { return GlslTypes.OR_ASSIGN;
            } 
            // fall through
          case 131: break;
          case 51: 
            { return GlslTypes.OR_OP;
            } 
            // fall through
          case 132: break;
          case 52: 
            { return GlslTypes.NE_OP;
            } 
            // fall through
          case 133: break;
          case 53: 
            { return GlslTypes.FOR;
            } 
            // fall through
          case 134: break;
          case 54: 
            { return GlslTypes.INT;
            } 
            // fall through
          case 135: break;
          case 55: 
            { return GlslTypes.OUT;
            } 
            // fall through
          case 136: break;
          case 56: 
            { return GlslTypes.LEFT_ASSIGN;
            } 
            // fall through
          case 137: break;
          case 57: 
            { return GlslTypes.RIGHT_ASSIGN;
            } 
            // fall through
          case 138: break;
          case 58: 
            { return GlslTypes.UINT;
            } 
            // fall through
          case 139: break;
          case 59: 
            { return GlslTypes.BOOL;
            } 
            // fall through
          case 140: break;
          case 60: 
            { return GlslTypes.NATIVE_VECTOR;
            } 
            // fall through
          case 141: break;
          case 61: 
            { return GlslTypes.VOID;
            } 
            // fall through
          case 142: break;
          case 62: 
            { return GlslTypes.ELSE;
            } 
            // fall through
          case 143: break;
          case 63: 
            { return GlslTypes.CASE;
            } 
            // fall through
          case 144: break;
          case 64: 
            { return GlslTypes.NATIVE_MATRIX;
            } 
            // fall through
          case 145: break;
          case 65: 
            { return GlslTypes.TRUE;
            } 
            // fall through
          case 146: break;
          case 66: 
            { return GlslTypes.FLOAT;
            } 
            // fall through
          case 147: break;
          case 67: 
            { return GlslTypes.FALSE;
            } 
            // fall through
          case 148: break;
          case 68: 
            { return GlslTypes.BREAK;
            } 
            // fall through
          case 149: break;
          case 69: 
            { return GlslTypes.CONST;
            } 
            // fall through
          case 150: break;
          case 70: 
            { return GlslTypes.WHILE;
            } 
            // fall through
          case 151: break;
          case 71: 
            { return GlslTypes.LAYOUT;
            } 
            // fall through
          case 152: break;
          case 72: 
            { return GlslTypes.BUFFER;
            } 
            // fall through
          case 153: break;
          case 73: 
            { return GlslTypes.DOUBLE;
            } 
            // fall through
          case 154: break;
          case 74: 
            { return GlslTypes.STRUCT;
            } 
            // fall through
          case 155: break;
          case 75: 
            { return GlslTypes.SWITCH;
            } 
            // fall through
          case 156: break;
          case 76: 
            { return GlslTypes.SHARED;
            } 
            // fall through
          case 157: break;
          case 77: 
            { return GlslTypes.RETURN;
            } 
            // fall through
          case 158: break;
          case 78: 
            { return GlslTypes.UNIFORM;
            } 
            // fall through
          case 159: break;
          case 79: 
            { return GlslTypes.DEFAULT;
            } 
            // fall through
          case 160: break;
          case 80: 
            { return GlslTypes.DISCARD;
            } 
            // fall through
          case 161: break;
          case 81: 
            { return GlslTypes.CONTINUE;
            } 
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
